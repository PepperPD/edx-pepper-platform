// Generated by CoffeeScript 1.6.3
(function() {
  this.AjaxPrefix = {
    addAjaxPrefix: function(jQuery, prefix) {
      jQuery.postWithPrefix = function(url, data, callback, type) {
        return $.post("" + (prefix()) + url, data, callback, type);
      };
      jQuery.getWithPrefix = function(url, data, callback, type) {
        return $.get("" + (prefix()) + url, data, callback, type);
      };
      return jQuery.ajaxWithPrefix = function(url, settings) {
        if (settings != null) {
          return $.ajax("" + (prefix()) + url, settings);
        } else {
          settings = url;
          settings.url = "" + (prefix()) + settings.url;
          return $.ajax(settings);
        }
      };
    }
  };

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.Calculator = (function() {
    function Calculator() {
      $('.calc').click(this.toggle);
      $('form#calculator').submit(this.calculate).submit(function(e) {
        return e.preventDefault();
      });
      $('div.help-wrapper a').hover(this.helpToggle).click(function(e) {
        return e.preventDefault();
      });
    }

    Calculator.prototype.toggle = function(event) {
      event.preventDefault();
      $('div.calc-main').toggleClass('open');
      if ($('.calc.closed').length) {
        $('.calc').attr('aria-label', 'Open Calculator');
      } else {
        $('.calc').attr('aria-label', 'Close Calculator');
        setTimeout((function() {
          return $('#calculator_wrapper #calculator_input').focus();
        }), 100);
      }
      return $('.calc').toggleClass('closed');
    };

    Calculator.prototype.helpToggle = function() {
      return $('.help').toggleClass('shown');
    };

    Calculator.prototype.calculate = function() {
      return $.getWithPrefix('/calculate', {
        equation: $('#calculator_input').val()
      }, function(data) {
        return $('#calculator_output').val(data.result);
      });
    };

    return Calculator;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var HUB, MathJaxProcessor;
    if (typeof MathJax === "undefined" || MathJax === null) {
      return;
    }
    HUB = MathJax.Hub;
    MathJaxProcessor = (function() {
      var CODESPAN, MATHSPLIT;

      MATHSPLIT = /(\$\$?|\\(?:begin|end)\{[a-z]*\*?\}|\\[\\{}$]|[{}]|(?:\n\s*)+|@@\d+@@)/i;

      CODESPAN = /(^|[^\\])(`+)([^\n]*?[^`\n])\2(?!`)/gm;

      function MathJaxProcessor(inlineMark, displayMark) {
        this.inlineMark = inlineMark || "$";
        this.displayMark = displayMark || "$$";
        this.math = null;
        this.blocks = null;
      }

      MathJaxProcessor.prototype.processMath = function(start, last, preProcess) {
        var block, i, _i, _ref;
        block = this.blocks.slice(start, last + 1).join("").replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        if (HUB.Browser.isMSIE) {
          block = block.replace(/(%[^\n]*)\n/g, "$1<br/>\n");
        }
        for (i = _i = _ref = start + 1; _ref <= last ? _i <= last : _i >= last; i = _ref <= last ? ++_i : --_i) {
          this.blocks[i] = "";
        }
        this.blocks[start] = "@@" + this.math.length + "@@";
        if (preProcess) {
          block = preProcess(block);
        }
        return this.math.push(block);
      };

      MathJaxProcessor.prototype.removeMath = function(text) {
        var block, braces, current, deTilde, end, hasCodeSpans, last, start, _i, _ref;
        text = text || "";
        this.math = [];
        start = end = last = null;
        braces = 0;
        hasCodeSpans = /`/.test(text);
        if (hasCodeSpans) {
          text = text.replace(/~/g, "~T").replace(CODESPAN, function($0) {
            return $0.replace(/\$/g, "~D");
          });
          deTilde = function(text) {
            return text.replace(/~([TD])/g, function($0, $1) {
              return {
                T: "~",
                D: "$"
              }[$1];
            });
          };
        } else {
          deTilde = function(text) {
            return text;
          };
        }
        this.blocks = _split(text.replace(/\r\n?/g, "\n"), MATHSPLIT);
        for (current = _i = 1, _ref = this.blocks.length; _i < _ref; current = _i += 2) {
          block = this.blocks[current];
          if (block.charAt(0) === "@") {
            this.blocks[current] = "@@" + this.math.length + "@@";
            this.math.push(block);
          } else if (start) {
            if (block === end) {
              if (braces) {
                last = current;
              } else {
                this.processMath(start, current, deTilde);
                start = end = last = null;
              }
            } else if (block.match(/\n.*\n/)) {
              if (last) {
                current = last;
                this.processMath(start, current, deTilde);
              }
              start = end = last = null;
              braces = 0;
            } else if (block === "{") {
              ++braces;
            } else if (block === "}" && braces) {
              --braces;
            }
          } else {
            if (block === this.inlineMark || block === this.displayMark) {
              start = current;
              end = block;
              braces = 0;
            } else if (block.substr(1, 5) === "begin") {
              start = current;
              end = "\\end" + block.substr(6);
              braces = 0;
            }
          }
        }
        if (last) {
          this.processMath(start, last, deTilde);
          start = end = last = null;
        }
        return deTilde(this.blocks.join(""));
      };

      MathJaxProcessor.removeMathWrapper = function(_this) {
        return function(text) {
          return _this.removeMath(text);
        };
      };

      MathJaxProcessor.prototype.replaceMath = function(text) {
        var _this = this;
        text = text.replace(/@@(\d+)@@/g, function($0, $1) {
          return _this.math[$1];
        });
        this.math = null;
        return text;
      };

      MathJaxProcessor.replaceMathWrapper = function(_this) {
        return function(text) {
          return _this.replaceMath(text);
        };
      };

      return MathJaxProcessor;

    })();
    if (typeof Markdown !== "undefined" && Markdown !== null) {
      Markdown.getMathCompatibleConverter = function(postProcessor) {
        var converter, processor;
        postProcessor || (postProcessor = (function(text) {
          return text;
        }));
        converter = Markdown.getSanitizingConverter();
        processor = new MathJaxProcessor();
        converter.hooks.chain("preConversion", MathJaxProcessor.removeMathWrapper(processor));
        converter.hooks.chain("postConversion", function(text) {
          return postProcessor(MathJaxProcessor.replaceMathWrapper(processor)(text));
        });
        return converter;
      };
      return Markdown.makeWmdEditor = function(elem, appended_id, imageUploadUrl, postProcessor) {
        var $elem, $wmdPanel, ajaxFileUpload, converter, delayRenderer, editor, imageUploadHandler, initialText, _append;
        $elem = $(elem);
        if (!$elem.length) {
          console.log("warning: elem for makeWmdEditor doesn't exist");
          return;
        }
        if (!$elem.find(".wmd-panel").length) {
          initialText = $elem.html();
          $elem.empty();
          _append = appended_id || "";
          $wmdPanel = $("<div>").addClass("wmd-panel").append($("<div>").attr("id", "wmd-button-bar" + _append)).append($("<textarea>").addClass("wmd-input").attr("id", "wmd-input" + _append).html(initialText)).append($("<div>").attr("id", "wmd-preview" + _append).addClass("wmd-panel wmd-preview"));
          $elem.append($wmdPanel);
        }
        converter = Markdown.getMathCompatibleConverter(postProcessor);
        ajaxFileUpload = function(imageUploadUrl, input, startUploadHandler) {
          $("#loading").ajaxStart(function() {
            return $(this).show();
          }).ajaxComplete(function() {
            return $(this).hide();
          });
          $("#upload").ajaxStart(function() {
            return $(this).hide();
          }).ajaxComplete(function() {
            return $(this).show();
          });
          return $.ajaxFileUpload({
            url: imageUploadUrl,
            secureuri: false,
            fileElementId: 'file-upload',
            dataType: 'json',
            success: function(data, status) {
              var error, fileURL;
              fileURL = data['result']['file_url'];
              error = data['result']['error'];
              if (error !== '') {
                alert(error);
                if (startUploadHandler) {
                  $('#file-upload').unbind('change').change(startUploadHandler);
                }
                return console.log(error);
              } else {
                return $(input).attr('value', fileURL);
              }
            },
            error: function(data, status, e) {
              alert(e);
              if (startUploadHandler) {
                return $('#file-upload').unbind('change').change(startUploadHandler);
              }
            }
          });
        };
        imageUploadHandler = function(elem, input) {
          return ajaxFileUpload(imageUploadUrl, input, imageUploadHandler);
        };
        editor = new Markdown.Editor(converter, appended_id, null, imageUploadHandler);
        delayRenderer = new MathJaxDelayRenderer();
        editor.hooks.chain("onPreviewPush", function(text, previewSet) {
          return delayRenderer.render({
            text: text,
            previewSetter: previewSet
          });
        });
        editor.run();
        return editor;
      };
    }
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.Content = (function(_super) {
      __extends(Content, _super);

      function Content() {
        _ref = Content.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Content.contents = {};

      Content.contentInfos = {};

      Content.prototype.template = function() {
        return DiscussionUtil.getTemplate('_content');
      };

      Content.prototype.actions = {
        editable: '.admin-edit',
        can_reply: '.discussion-reply',
        can_endorse: '.admin-endorse',
        can_delete: '.admin-delete',
        can_openclose: '.admin-openclose'
      };

      Content.prototype.urlMappers = {};

      Content.prototype.urlFor = function(name) {
        return this.urlMappers[name].apply(this);
      };

      Content.prototype.can = function(action) {
        return (this.get('ability') || {})[action];
      };

      Content.prototype.updateInfo = function(info) {
        if (info) {
          this.set('ability', info.ability);
          this.set('voted', info.voted);
          return this.set('subscribed', info.subscribed);
        }
      };

      Content.prototype.addComment = function(comment, options) {
        var comments_count, model, thread;
        options || (options = {});
        if (!options.silent) {
          thread = this.get('thread');
          comments_count = parseInt(thread.get('comments_count'));
          thread.set('comments_count', comments_count + 1);
        }
        this.get('children').push(comment);
        model = new Comment($.extend({}, comment, {
          thread: this.get('thread')
        }));
        this.get('comments').add(model);
        this.trigger("comment:add");
        return model;
      };

      Content.prototype.removeComment = function(comment) {
        var comments_count, thread;
        thread = this.get('thread');
        comments_count = parseInt(thread.get('comments_count'));
        thread.set('comments_count', comments_count - 1 - comment.getCommentsCount());
        return this.trigger("comment:remove");
      };

      Content.prototype.resetComments = function(children) {
        var comment, _i, _len, _ref1, _results;
        this.set('children', []);
        this.set('comments', new Comments());
        _ref1 = children || [];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          comment = _ref1[_i];
          _results.push(this.addComment(comment, {
            silent: true
          }));
        }
        return _results;
      };

      Content.prototype.initialize = function() {
        Content.addContent(this.id, this);
        if (Content.getInfo(this.id)) {
          this.updateInfo(Content.getInfo(this.id));
        }
        this.set('user_url', DiscussionUtil.urlFor('user_profile', this.get('user_id')));
        return this.resetComments(this.get('children'));
      };

      Content.prototype.remove = function() {
        if (this.get('type') === 'comment') {
          this.get('thread').removeComment(this);
          return this.get('thread').trigger("comment:remove", this);
        } else {
          return this.trigger("thread:remove", this);
        }
      };

      Content.addContent = function(id, content) {
        return this.contents[id] = content;
      };

      Content.getContent = function(id) {
        return this.contents[id];
      };

      Content.getInfo = function(id) {
        return this.contentInfos[id];
      };

      Content.loadContentInfos = function(infos) {
        var id, info;
        for (id in infos) {
          info = infos[id];
          if (this.getContent(id)) {
            this.getContent(id).updateInfo(info);
          }
        }
        return $.extend(this.contentInfos, infos);
      };

      Content.prototype.pinThread = function() {
        var pinned;
        pinned = this.get("pinned");
        this.set("pinned", pinned);
        return this.trigger("change", this);
      };

      Content.prototype.unPinThread = function() {
        var pinned;
        pinned = this.get("pinned");
        this.set("pinned", pinned);
        return this.trigger("change", this);
      };

      Content.prototype.flagAbuse = function() {
        var temp_array;
        temp_array = this.get("abuse_flaggers");
        temp_array.push(window.user.get('id'));
        this.set("abuse_flaggers", temp_array);
        return this.trigger("change", this);
      };

      Content.prototype.unflagAbuse = function() {
        this.get("abuse_flaggers").pop(window.user.get('id'));
        return this.trigger("change", this);
      };

      return Content;

    })(Backbone.Model);
    this.Thread = (function(_super) {
      __extends(Thread, _super);

      function Thread() {
        _ref1 = Thread.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Thread.prototype.urlMappers = {
        'retrieve': function() {
          return DiscussionUtil.urlFor('retrieve_single_thread', this.discussion.id, this.id);
        },
        'reply': function() {
          return DiscussionUtil.urlFor('create_comment', this.id);
        },
        'unvote': function() {
          return DiscussionUtil.urlFor("undo_vote_for_" + (this.get('type')), this.id);
        },
        'upvote': function() {
          return DiscussionUtil.urlFor("upvote_" + (this.get('type')), this.id);
        },
        'downvote': function() {
          return DiscussionUtil.urlFor("downvote_" + (this.get('type')), this.id);
        },
        'close': function() {
          return DiscussionUtil.urlFor('openclose_thread', this.id);
        },
        'update': function() {
          return DiscussionUtil.urlFor('update_thread', this.id);
        },
        '_delete': function() {
          return DiscussionUtil.urlFor('delete_thread', this.id);
        },
        'follow': function() {
          return DiscussionUtil.urlFor('follow_thread', this.id);
        },
        'unfollow': function() {
          return DiscussionUtil.urlFor('unfollow_thread', this.id);
        },
        'flagAbuse': function() {
          return DiscussionUtil.urlFor("flagAbuse_" + (this.get('type')), this.id);
        },
        'unFlagAbuse': function() {
          return DiscussionUtil.urlFor("unFlagAbuse_" + (this.get('type')), this.id);
        },
        'pinThread': function() {
          return DiscussionUtil.urlFor("pin_thread", this.id);
        },
        'unPinThread': function() {
          return DiscussionUtil.urlFor("un_pin_thread", this.id);
        }
      };

      Thread.prototype.initialize = function() {
        this.set('thread', this);
        return Thread.__super__.initialize.call(this);
      };

      Thread.prototype.comment = function() {
        return this.set("comments_count", parseInt(this.get("comments_count")) + 1);
      };

      Thread.prototype.follow = function() {
        return this.set('subscribed', true);
      };

      Thread.prototype.unfollow = function() {
        return this.set('subscribed', false);
      };

      Thread.prototype.vote = function() {
        this.get("votes")["up_count"] = parseInt(this.get("votes")["up_count"]) + 1;
        return this.trigger("change", this);
      };

      Thread.prototype.unvote = function() {
        this.get("votes")["up_count"] = parseInt(this.get("votes")["up_count"]) - 1;
        return this.trigger("change", this);
      };

      Thread.prototype.display_body = function() {
        if (this.has("highlighted_body")) {
          return String(this.get("highlighted_body")).replace(/<highlight>/g, '<mark>').replace(/<\/highlight>/g, '</mark>');
        } else {
          return this.get("body");
        }
      };

      Thread.prototype.display_title = function() {
        if (this.has("highlighted_title")) {
          return String(this.get("highlighted_title")).replace(/<highlight>/g, '<mark>').replace(/<\/highlight>/g, '</mark>');
        } else {
          return this.get("title");
        }
      };

      Thread.prototype.toJSON = function() {
        var json_attributes;
        json_attributes = _.clone(this.attributes);
        return _.extend(json_attributes, {
          title: this.display_title(),
          body: this.display_body()
        });
      };

      Thread.prototype.created_at_date = function() {
        return new Date(this.get("created_at"));
      };

      Thread.prototype.created_at_time = function() {
        return new Date(this.get("created_at")).getTime();
      };

      return Thread;

    })(this.Content);
    this.Comment = (function(_super) {
      __extends(Comment, _super);

      function Comment() {
        _ref2 = Comment.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Comment.prototype.urlMappers = {
        'reply': function() {
          return DiscussionUtil.urlFor('create_sub_comment', this.id);
        },
        'unvote': function() {
          return DiscussionUtil.urlFor("undo_vote_for_" + (this.get('type')), this.id);
        },
        'upvote': function() {
          return DiscussionUtil.urlFor("upvote_" + (this.get('type')), this.id);
        },
        'downvote': function() {
          return DiscussionUtil.urlFor("downvote_" + (this.get('type')), this.id);
        },
        'endorse': function() {
          return DiscussionUtil.urlFor('endorse_comment', this.id);
        },
        'update': function() {
          return DiscussionUtil.urlFor('update_comment', this.id);
        },
        '_delete': function() {
          return DiscussionUtil.urlFor('delete_comment', this.id);
        },
        'flagAbuse': function() {
          return DiscussionUtil.urlFor("flagAbuse_" + (this.get('type')), this.id);
        },
        'unFlagAbuse': function() {
          return DiscussionUtil.urlFor("unFlagAbuse_" + (this.get('type')), this.id);
        }
      };

      Comment.prototype.getCommentsCount = function() {
        var count;
        count = 0;
        this.get('comments').each(function(comment) {
          return count += comment.getCommentsCount() + 1;
        });
        return count;
      };

      return Comment;

    })(this.Content);
    this.Comments = (function(_super) {
      __extends(Comments, _super);

      function Comments() {
        _ref3 = Comments.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Comments.prototype.model = Comment;

      Comments.prototype.initialize = function() {
        var _this = this;
        return this.bind("add", function(item) {
          return item.collection = _this;
        });
      };

      Comments.prototype.find = function(id) {
        return _.first(this.where({
          id: id
        }));
      };

      return Comments;

    })(Backbone.Collection);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.Discussion = (function(_super) {
      __extends(Discussion, _super);

      function Discussion() {
        _ref = Discussion.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Discussion.prototype.model = Thread;

      Discussion.prototype.initialize = function(models, options) {
        var _this = this;
        if (options == null) {
          options = {};
        }
        this.pages = options['pages'] || 1;
        this.current_page = 1;
        this.bind("add", function(item) {
          return item.discussion = _this;
        });
        this.comparator = this.sortByDateRecentFirst;
        return this.on("thread:remove", function(thread) {
          return _this.remove(thread);
        });
      };

      Discussion.prototype.find = function(id) {
        return _.first(this.where({
          id: id
        }));
      };

      Discussion.prototype.hasMorePages = function() {
        return this.current_page < this.pages;
      };

      Discussion.prototype.addThread = function(thread, options) {
        var model;
        if (!this.find(thread.id)) {
          options || (options = {});
          model = new Thread(thread);
          this.add(model);
          return model;
        }
      };

      Discussion.prototype.retrieveAnotherPage = function(mode, options, sort_options) {
        var data, url,
          _this = this;
        if (options == null) {
          options = {};
        }
        if (sort_options == null) {
          sort_options = {};
        }
        this.current_page += 1;
        data = {
          page: this.current_page
        };
        switch (mode) {
          case 'search':
            url = DiscussionUtil.urlFor('search');
            data['text'] = options.search_text;
            break;
          case 'commentables':
            url = DiscussionUtil.urlFor('search');
            data['commentable_ids'] = options.commentable_ids;
            break;
          case 'all':
            url = DiscussionUtil.urlFor('threads');
            break;
          case 'flagged':
            data['flagged'] = true;
            url = DiscussionUtil.urlFor('search');
            break;
          case 'followed':
            url = DiscussionUtil.urlFor('followed_threads', options.user_id);
        }
        if (options['group_id']) {
          data['group_id'] = options['group_id'];
        }
        data['sort_key'] = sort_options.sort_key || 'date';
        data['sort_order'] = sort_options.sort_order || 'desc';
        return DiscussionUtil.safeAjax({
          $elem: this.$el,
          url: url,
          data: data,
          dataType: 'json',
          success: function(response, textStatus) {
            var models, new_collection, new_threads;
            models = _this.models;
            new_threads = [
              (function() {
                var _i, _len, _ref1, _results;
                _ref1 = response.discussion_data;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  data = _ref1[_i];
                  _results.push(new Thread(data));
                }
                return _results;
              })()
            ][0];
            new_collection = _.union(models, new_threads);
            Content.loadContentInfos(response.annotated_content_info);
            _this.reset(new_collection);
            _this.pages = response.num_pages;
            return _this.current_page = response.page;
          }
        });
      };

      Discussion.prototype.sortByDate = function(thread) {
        var today;
        if (thread.get('pinned')) {
          today = new Date();
          return new Date(today.getTime() + (24 * 60 * 60 * 1000));
        } else {
          return thread.get("created_at");
        }
      };

      Discussion.prototype.sortByDateRecentFirst = function(thread) {
        var today;
        if (thread.get('pinned')) {
          today = new Date();
          return -(new Date(today.getTime() + (24 * 60 * 60 * 1000)));
        } else {
          return -(new Date(thread.get("created_at")).getTime());
        }
      };

      Discussion.prototype.sortByVotes = function(thread1, thread2) {
        var thread1_count, thread2_count;
        thread1_count = parseInt(thread1.get("votes")['up_count']);
        thread2_count = parseInt(thread2.get("votes")['up_count']);
        if (thread2_count !== thread1_count) {
          return thread2_count - thread1_count;
        } else {
          return thread2.created_at_time() - thread1.created_at_time();
        }
      };

      Discussion.prototype.sortByComments = function(thread1, thread2) {
        var thread1_count, thread2_count;
        thread1_count = parseInt(thread1.get("comments_count"));
        thread2_count = parseInt(thread2.get("comments_count"));
        if (thread2_count !== thread1_count) {
          return thread2_count - thread1_count;
        } else {
          return thread2.created_at_time() - thread1.created_at_time();
        }
      };

      return Discussion;

    })(Backbone.Collection);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.DiscussionFilter = (function() {
    function DiscussionFilter() {}

    DiscussionFilter.filterDrop = function(e) {
      var $drop, $items, query;
      $drop = $(e.target).parents('.topic_menu_wrapper, .browse-topic-drop-menu-wrapper');
      query = $(e.target).val();
      $items = $drop.find('a');
      if (query.length === 0) {
        $items.removeClass('hidden');
        return;
      }
      $items.addClass('hidden');
      return $items.each(function(i) {
        var terms, test, thisText;
        thisText = $(this).not('.unread').text();
        $(this).parents('ul').siblings('a').not('.unread').each(function(i) {
          return thisText = thisText + ' ' + $(this).text();
        });
        test = true;
        terms = thisText.split(' ');
        if (thisText.toLowerCase().search(query.toLowerCase()) === -1) {
          test = false;
        }
        if (test) {
          $(this).removeClass('hidden');
          $(this).parent().find('a').removeClass('hidden');
          return $(this).parents('ul').siblings('a').removeClass('hidden');
        }
      });
    };

    return DiscussionFilter;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionModuleView = (function(_super) {
      __extends(DiscussionModuleView, _super);

      function DiscussionModuleView() {
        this.navigateToPage = __bind(this.navigateToPage, this);
        this.renderPagination = __bind(this.renderPagination, this);
        this.addThread = __bind(this.addThread, this);
        this.renderDiscussion = __bind(this.renderDiscussion, this);
        this.loadPage = __bind(this.loadPage, this);
        _ref = DiscussionModuleView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionModuleView.prototype.events = {
        "click .discussion-show": "toggleDiscussion",
        "click .new-post-btn": "toggleNewPost",
        "click .new-post-cancel": "hideNewPost",
        "click .discussion-paginator a": "navigateToPage"
      };

      DiscussionModuleView.prototype.paginationTemplate = function() {
        return DiscussionUtil.getTemplate("_pagination");
      };

      DiscussionModuleView.prototype.page_re = /\?discussion_page=(\d+)/;

      DiscussionModuleView.prototype.initialize = function() {
        var match;
        this.toggleDiscussionBtn = this.$(".discussion-show");
        match = this.page_re.exec(window.location.href);
        if (match) {
          return this.page = parseInt(match[1]);
        } else {
          return this.page = 1;
        }
      };

      DiscussionModuleView.prototype.toggleNewPost = function(event) {
        event.preventDefault();
        if (!this.newPostForm) {
          this.toggleDiscussion();
          this.isWaitingOnNewPost = true;
          return;
        }
        if (this.showed) {
          this.newPostForm.slideDown(300);
        } else {
          this.newPostForm.show();
        }
        this.toggleDiscussionBtn.addClass('shown');
        this.toggleDiscussionBtn.find('.button-text').html("Hide Discussion");
        this.$("section.discussion").slideDown();
        return this.showed = true;
      };

      DiscussionModuleView.prototype.hideNewPost = function(event) {
        event.preventDefault();
        return this.newPostForm.slideUp(300);
      };

      DiscussionModuleView.prototype.toggleDiscussion = function(event) {
        var $elem;
        if (this.showed) {
          this.$("section.discussion").slideUp();
          this.toggleDiscussionBtn.removeClass('shown');
          this.toggleDiscussionBtn.find('.button-text').html("Show Discussion");
          return this.showed = false;
        } else {
          this.toggleDiscussionBtn.addClass('shown');
          this.toggleDiscussionBtn.find('.button-text').html("Hide Discussion");
          if (this.retrieved) {
            this.$("section.discussion").slideDown();
            return this.showed = true;
          } else {
            $elem = this.toggleDiscussionBtn;
            return this.loadPage($elem);
          }
        }
      };

      DiscussionModuleView.prototype.loadPage = function($elem) {
        var discussionId, url,
          _this = this;
        discussionId = this.$el.data("discussion-id");
        url = DiscussionUtil.urlFor('retrieve_discussion', discussionId) + ("?page=" + this.page);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          $loading: $elem,
          url: url,
          type: "GET",
          dataType: 'json',
          success: function(response, textStatus, jqXHR) {
            return _this.renderDiscussion($elem, response, textStatus, discussionId);
          }
        });
      };

      DiscussionModuleView.prototype.renderDiscussion = function($elem, response, textStatus, discussionId) {
        var $discussion, allow_anonymous, allow_anonymous_to_peers, cohorts, source;
        window.user = new DiscussionUser(response.user_info);
        Content.loadContentInfos(response.annotated_content_info);
        DiscussionUtil.loadRoles(response.roles);
        allow_anonymous = response.allow_anonymous;
        allow_anonymous_to_peers = response.allow_anonymous_to_peers;
        cohorts = response.cohorts;
        this.discussion = new Discussion();
        this.discussion.reset(response.discussion_data, {
          silent: false
        });
        if (response.is_cohorted && response.is_moderator) {
          source = "script#_inline_discussion_cohorted";
        } else {
          source = "script#_inline_discussion";
        }
        $discussion = $(Mustache.render($(source).html(), {
          'threads': response.discussion_data,
          'discussionId': discussionId,
          'allow_anonymous_to_peers': allow_anonymous_to_peers,
          'allow_anonymous': allow_anonymous,
          'cohorts': cohorts
        }));
        if (this.$('section.discussion').length) {
          this.$('section.discussion').replaceWith($discussion);
        } else {
          this.$el.append($discussion);
        }
        this.newPostForm = $('.new-post-article');
        this.threadviews = this.discussion.map(function(thread) {
          return new DiscussionThreadInlineView({
            el: this.$("article#thread_" + thread.id),
            model: thread
          });
        });
        _.each(this.threadviews, function(dtv) {
          return dtv.render();
        });
        DiscussionUtil.bulkUpdateContentInfo(window.$$annotated_content_info);
        this.newPostView = new NewPostInlineView({
          el: this.$('.new-post-article'),
          collection: this.discussion
        });
        this.discussion.on("add", this.addThread);
        this.retrieved = true;
        this.showed = true;
        this.renderPagination(2, response.num_pages);
        if (this.isWaitingOnNewPost) {
          return this.newPostForm.show();
        }
      };

      DiscussionModuleView.prototype.addThread = function(thread, collection, options) {
        var article, threadView;
        article = $("<article class='discussion-thread' id='thread_" + thread.id + "'></article>");
        this.$('section.discussion > .threads').prepend(article);
        threadView = new DiscussionThreadInlineView({
          el: article,
          model: thread
        });
        threadView.render();
        return this.threadviews.unshift(threadView);
      };

      DiscussionModuleView.prototype.renderPagination = function(delta, numPages) {
        var maxPage, minPage, pageUrl, params, thing;
        minPage = Math.max(this.page - delta, 1);
        maxPage = Math.min(this.page + delta, numPages);
        pageUrl = function(number) {
          return "?discussion_page=" + number;
        };
        params = {
          page: this.page,
          lowPages: _.range(minPage, this.page).map(function(n) {
            return {
              number: n,
              url: pageUrl(n)
            };
          }),
          highPages: _.range(this.page + 1, maxPage + 1).map(function(n) {
            return {
              number: n,
              url: pageUrl(n)
            };
          }),
          previous: this.page - 1 >= 1 ? {
            url: pageUrl(this.page - 1),
            number: this.page - 1
          } : false,
          next: this.page + 1 <= numPages ? {
            url: pageUrl(this.page + 1),
            number: this.page + 1
          } : false,
          leftdots: minPage > 2,
          rightdots: maxPage < numPages - 1,
          first: minPage > 1 ? {
            url: pageUrl(1)
          } : false,
          last: maxPage < numPages ? {
            number: numPages,
            url: pageUrl(numPages)
          } : false
        };
        thing = Mustache.render(this.paginationTemplate(), params);
        return this.$('section.pagination').html(thing);
      };

      DiscussionModuleView.prototype.navigateToPage = function(event) {
        event.preventDefault();
        window.history.pushState({}, window.document.title, event.target.href);
        this.page = $(event.target).data('page-number');
        return this.loadPage($(event.target));
      };

      return DiscussionModuleView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionRouter = (function(_super) {
      __extends(DiscussionRouter, _super);

      function DiscussionRouter() {
        this.hideNewPost = __bind(this.hideNewPost, this);
        this.showNewPost = __bind(this.showNewPost, this);
        this.navigateToAllThreads = __bind(this.navigateToAllThreads, this);
        this.navigateToThread = __bind(this.navigateToThread, this);
        this.setActiveThread = __bind(this.setActiveThread, this);
        _ref = DiscussionRouter.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionRouter.prototype.routes = {
        "": "allThreads",
        ":forum_name/threads/:thread_id": "showThread"
      };

      DiscussionRouter.prototype.initialize = function(options) {
        this.discussion = options['discussion'];
        this.nav = new DiscussionThreadListView({
          collection: this.discussion,
          el: $(".sidebar")
        });
        this.nav.on("thread:selected", this.navigateToThread);
        this.nav.on("thread:removed", this.navigateToAllThreads);
        this.nav.on("threads:rendered", this.setActiveThread);
        this.nav.render();
        this.newPostView = new NewPostView({
          el: $(".new-post-article"),
          collection: this.discussion
        });
        this.nav.on("thread:created", this.navigateToThread);
        this.newPost = $('.new-post-article');
        $('.new-post-btn').bind("click", this.showNewPost);
        return $('.new-post-cancel').bind("click", this.hideNewPost);
      };

      DiscussionRouter.prototype.allThreads = function() {
        this.nav.updateSidebar();
        return this.nav.goHome();
      };

      DiscussionRouter.prototype.setActiveThread = function() {
        if (this.thread) {
          return this.nav.setActiveThread(this.thread.get("id"));
        } else {
          return this.nav.goHome;
        }
      };

      DiscussionRouter.prototype.showThread = function(forum_name, thread_id) {
        var _this = this;
        this.thread = this.discussion.get(thread_id);
        this.thread.set("unread_comments_count", 0);
        this.thread.set("read", true);
        this.setActiveThread();
        if (this.main) {
          this.main.cleanup();
          this.main.undelegateEvents();
        }
        this.main = new DiscussionThreadView({
          el: $(".discussion-column"),
          model: this.thread
        });
        this.main.render();
        this.main.on("thread:responses:rendered", function() {
          return _this.nav.updateSidebar();
        });
        return this.main.on("tag:selected", function(tag) {
          var search;
          search = "[" + tag + "]";
          return _this.nav.setAndSearchFor(search);
        });
      };

      DiscussionRouter.prototype.navigateToThread = function(thread_id) {
        var thread;
        thread = this.discussion.get(thread_id);
        return this.navigate("" + (thread.get("commentable_id")) + "/threads/" + thread_id, {
          trigger: true
        });
      };

      DiscussionRouter.prototype.navigateToAllThreads = function() {
        return this.navigate("", {
          trigger: true
        });
      };

      DiscussionRouter.prototype.showNewPost = function(event) {
        this.newPost.slideDown(300);
        return $('.new-post-title').focus();
      };

      DiscussionRouter.prototype.hideNewPost = function(event) {
        return this.newPost.slideUp(300);
      };

      return DiscussionRouter;

    })(Backbone.Router);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var DiscussionApp, DiscussionProfileApp;

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    DiscussionApp = {
      start: function(elem) {
        var content_info, discussion, element, thread_pages, threads, user_info;
        DiscussionUtil.loadRolesFromContainer();
        element = $(elem);
        window.$$course_id = element.data("course-id");
        user_info = element.data("user-info");
        threads = element.data("threads");
        thread_pages = element.data("thread-pages");
        content_info = element.data("content-info");
        window.user = new DiscussionUser(user_info);
        Content.loadContentInfos(content_info);
        discussion = new Discussion(threads, {
          pages: thread_pages
        });
        new DiscussionRouter({
          discussion: discussion
        });
        return Backbone.history.start({
          pushState: true,
          root: "/courses/" + $$course_id + "/discussion/forum/"
        });
      }
    };
    DiscussionProfileApp = {
      start: function(elem) {
        var element, threads, user_info;
        element = $(elem);
        window.$$course_id = element.data("course-id");
        threads = element.data("threads");
        user_info = element.data("user-info");
        window.user = new DiscussionUser(user_info);
        return new DiscussionUserProfileView({
          el: element,
          collection: threads
        });
      }
    };
    $(function() {
      $("section.discussion").each(function(index, elem) {
        return DiscussionApp.start(elem);
      });
      return $("section.discussion-user-threads").each(function(index, elem) {
        return DiscussionProfileApp.start(elem);
      });
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUser = (function(_super) {
      __extends(DiscussionUser, _super);

      function DiscussionUser() {
        _ref = DiscussionUser.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionUser.prototype.following = function(thread) {
        return _.include(this.get('subscribed_thread_ids'), thread.id);
      };

      DiscussionUser.prototype.voted = function(thread) {
        return _.include(this.get('upvoted_ids'), thread.id);
      };

      DiscussionUser.prototype.vote = function(thread) {
        this.get('upvoted_ids').push(thread.id);
        return thread.vote();
      };

      DiscussionUser.prototype.unvote = function(thread) {
        this.set('upvoted_ids', _.without(this.get('upvoted_ids'), thread.id));
        return thread.unvote();
      };

      return DiscussionUser;

    })(Backbone.Model);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {


}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    return new TooltipManager;
  });

  this.TooltipManager = (function() {
    function TooltipManager() {
      this.hideTooltip = __bind(this.hideTooltip, this);
      this.moveTooltip = __bind(this.moveTooltip, this);
      this.showTooltip = __bind(this.showTooltip, this);
      this.$body = $('body');
      this.$tooltip = $('<div class="tooltip"></div>');
      this.$body.delegate('[data-tooltip]', {
        'mouseover': this.showTooltip,
        'mousemove': this.moveTooltip,
        'mouseout': this.hideTooltip,
        'click': this.hideTooltip
      });
    }

    TooltipManager.prototype.showTooltip = function(e) {
      var $target, tooltipCoords, tooltipText,
        _this = this;
      $target = $(e.target).closest('[data-tooltip]');
      tooltipText = $target.attr('data-tooltip');
      this.$tooltip.html(tooltipText);
      this.$body.append(this.$tooltip);
      tooltipCoords = {
        x: e.pageX - (this.$tooltip.outerWidth() / 2),
        y: e.pageY - (this.$tooltip.outerHeight() + 15)
      };
      this.$tooltip.css;
      ({
        'left': tooltipCoords.x,
        'top': tooltipCoords.y
      });
      return this.tooltipTimer = setTimeout(function() {
        _this.$tooltip.show().css('opacity', 1);
        return _this.tooltipTimer = setTimeout(function() {
          return _this.hideTooltip();
        }, 3000);
      }, 500);
    };

    TooltipManager.prototype.moveTooltip = function(e) {
      var tooltipCoords;
      tooltipCoords = {
        x: e.pageX - (this.$tooltip.outerWidth() / 2),
        y: e.pageY - (this.$tooltip.outerHeight() + 15)
      };
      return this.$tooltip.css({
        'left': tooltipCoords.x,
        'top': tooltipCoords.y
      });
    };

    TooltipManager.prototype.hideTooltip = function(e) {
      this.$tooltip.hide().css('opacity', 0);
      return clearTimeout(this.tooltipTimer);
    };

    return TooltipManager;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUserProfileView = (function(_super) {
      __extends(DiscussionUserProfileView, _super);

      function DiscussionUserProfileView() {
        _ref = DiscussionUserProfileView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionUserProfileView.prototype.toggleModeratorStatus = function(event) {
        var $elem, confirmValue, isModerator, url,
          _this = this;
        confirmValue = confirm("Are you sure?");
        if (!confirmValue) {
          return;
        }
        $elem = $(event.target);
        if ($elem.hasClass("sidebar-promote-moderator-button")) {
          isModerator = true;
        } else if ($elem.hasClass("sidebar-revoke-moderator-button")) {
          isModerator = false;
        } else {
          console.error("unrecognized moderator status");
          return;
        }
        url = DiscussionUtil.urlFor('update_moderator_status', $$profiled_user_id);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            is_moderator: isModerator
          },
          error: function(response, textStatus, e) {
            return console.log(e);
          },
          success: function(response, textStatus) {
            var parent, view;
            parent = _this.$el.parent();
            _this.$el.replaceWith(response.html);
            return view = new DiscussionUserProfileView({
              el: parent.children(".user-profile")
            });
          }
        });
      };

      DiscussionUserProfileView.prototype.events = {
        "click .sidebar-toggle-moderator-button": "toggleModeratorStatus"
      };

      return DiscussionUserProfileView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    if (!window.$$contents) {
      window.$$contents = {};
    }
    return $.fn.extend({
      loading: function() {
        this.$_loading = $("<div class='loading-animation'></div>");
        return $(this).after(this.$_loading);
      },
      loaded: function() {
        return this.$_loading.remove();
      }
    });
  });

  this.DiscussionUtil = (function() {
    function DiscussionUtil() {}

    DiscussionUtil.wmdEditors = {};

    DiscussionUtil.getTemplate = function(id) {
      return $("script#" + id).html();
    };

    DiscussionUtil.loadRoles = function(roles) {
      return this.roleIds = roles;
    };

    DiscussionUtil.loadFlagModerator = function(what) {
      return this.isFlagModerator = (what === "True") || (what === 1);
    };

    DiscussionUtil.loadRolesFromContainer = function() {
      this.loadRoles($("#discussion-container").data("roles"));
      return this.loadFlagModerator($("#discussion-container").data("flag-moderator"));
    };

    DiscussionUtil.isStaff = function(user_id) {
      var staff;
      staff = _.union(this.roleIds['Staff'], this.roleIds['Moderator'], this.roleIds['Administrator']);
      return _.include(staff, parseInt(user_id));
    };

    DiscussionUtil.isTA = function(user_id) {
      var ta;
      ta = _.union(this.roleIds['Community TA']);
      return _.include(ta, parseInt(user_id));
    };

    DiscussionUtil.bulkUpdateContentInfo = function(infos) {
      var id, info, _results;
      _results = [];
      for (id in infos) {
        info = infos[id];
        _results.push(Content.getContent(id).updateInfo(info));
      }
      return _results;
    };

    DiscussionUtil.generateDiscussionLink = function(cls, txt, handler) {
      return $("<a>").addClass("discussion-link").attr("href", "javascript:void(0)").addClass(cls).html(txt).click(function() {
        return handler(this);
      });
    };

    DiscussionUtil.urlFor = function(name, param, param1, param2) {
      return {
        follow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/follow",
        unfollow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/unfollow",
        create_thread: "/courses/" + $$course_id + "/discussion/" + param + "/threads/create",
        search_similar_threads: "/courses/" + $$course_id + "/discussion/" + param + "/threads/search_similar",
        update_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/update",
        create_comment: "/courses/" + $$course_id + "/discussion/threads/" + param + "/reply",
        delete_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/delete",
        flagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/flagAbuse",
        unFlagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unFlagAbuse",
        flagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/flagAbuse",
        unFlagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unFlagAbuse",
        upvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/upvote",
        downvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/downvote",
        pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/pin",
        un_pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unpin",
        undo_vote_for_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unvote",
        follow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/follow",
        unfollow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unfollow",
        update_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/update",
        endorse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/endorse",
        create_sub_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/reply",
        delete_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/delete",
        upvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/upvote",
        downvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/downvote",
        undo_vote_for_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unvote",
        upload: "/courses/" + $$course_id + "/discussion/upload",
        search: "/courses/" + $$course_id + "/discussion/forum/search",
        tags_autocomplete: "/courses/" + $$course_id + "/discussion/threads/tags/autocomplete",
        retrieve_discussion: "/courses/" + $$course_id + "/discussion/forum/" + param + "/inline",
        retrieve_single_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        update_moderator_status: "/courses/" + $$course_id + "/discussion/users/" + param + "/update_moderator_status",
        openclose_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/close",
        permanent_link_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        permanent_link_comment: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1 + "#" + param2,
        user_profile: "/courses/" + $$course_id + "/discussion/forum/users/" + param,
        followed_threads: "/courses/" + $$course_id + "/discussion/forum/users/" + param + "/followed",
        threads: "/courses/" + $$course_id + "/discussion/forum",
        "enable_notifications": "/notification_prefs/enable/",
        "disable_notifications": "/notification_prefs/disable/",
        "notifications_status": "/notification_prefs/status"
      }[name];
    };

    DiscussionUtil.safeAjax = function(params) {
      var $elem, request;
      $elem = params.$elem;
      if ($elem && $elem.attr("disabled")) {
        return;
      }
      params["url"] = URI(params["url"]).addSearch({
        ajax: 1
      });
      params["beforeSend"] = function() {
        if ($elem) {
          $elem.attr("disabled", "disabled");
        }
        if (params["$loading"]) {
          if (params["loadingCallback"] != null) {
            return params["loadingCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loading();
          }
        }
      };
      request = $.ajax(params).always(function() {
        if ($elem) {
          $elem.removeAttr("disabled");
        }
        if (params["$loading"]) {
          if (params["loadedCallback"] != null) {
            return params["loadedCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loaded();
          }
        }
      });
      return request;
    };

    DiscussionUtil.get = function($elem, url, data, success) {
      return this.safeAjax({
        $elem: $elem,
        url: url,
        type: "GET",
        dataType: "json",
        data: data,
        success: success
      });
    };

    DiscussionUtil.post = function($elem, url, data, success) {
      return this.safeAjax({
        $elem: $elem,
        url: url,
        type: "POST",
        dataType: "json",
        data: data,
        success: success
      });
    };

    DiscussionUtil.bindLocalEvents = function($local, eventsHandler) {
      var event, eventSelector, handler, selector, _ref, _results;
      _results = [];
      for (eventSelector in eventsHandler) {
        handler = eventsHandler[eventSelector];
        _ref = eventSelector.split(' '), event = _ref[0], selector = _ref[1];
        _results.push($local(selector).unbind(event)[event](handler));
      }
      return _results;
    };

    DiscussionUtil.processTag = function(text) {
      return text.toLowerCase();
    };

    DiscussionUtil.tagsInputOptions = function() {
      return {
        autocomplete_url: this.urlFor('tags_autocomplete'),
        autocomplete: {
          remoteDataType: 'json'
        },
        interactive: true,
        height: '30px',
        width: '100%',
        defaultText: "Tag your post: press enter after each tag",
        removeWithBackspace: true,
        preprocessTag: this.processTag
      };
    };

    DiscussionUtil.formErrorHandler = function(errorsField) {
      return function(xhr, textStatus, error) {
        var response, _i, _len, _ref, _results;
        response = JSON.parse(xhr.responseText);
        if ((response.errors != null) && response.errors.length > 0) {
          errorsField.empty();
          _ref = response.errors;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            error = _ref[_i];
            _results.push(errorsField.append($("<li>").addClass("new-post-form-error").html(error)).show());
          }
          return _results;
        }
      };
    };

    DiscussionUtil.clearFormErrors = function(errorsField) {
      return errorsField.empty();
    };

    DiscussionUtil.postMathJaxProcessor = function(text) {
      var RE_DISPLAYMATH, RE_INLINEMATH;
      RE_INLINEMATH = /^\$([^\$]*)\$/g;
      RE_DISPLAYMATH = /^\$\$([^\$]*)\$\$/g;
      return this.processEachMathAndCode(text, function(s, type) {
        if (type === 'display') {
          return s.replace(RE_DISPLAYMATH, function($0, $1) {
            return "\\[" + $1 + "\\]";
          });
        } else if (type === 'inline') {
          return s.replace(RE_INLINEMATH, function($0, $1) {
            return "\\(" + $1 + "\\)";
          });
        } else {
          return s;
        }
      });
    };

    DiscussionUtil.makeWmdEditor = function($content, $local, cls_identifier) {
      var appended_id, editor, elem, id, imageUploadUrl, placeholder, _processor;
      elem = $local("." + cls_identifier);
      placeholder = elem.data('placeholder');
      id = elem.attr("data-id");
      appended_id = "-" + cls_identifier + "-" + id;
      imageUploadUrl = this.urlFor('upload');
      _processor = function(_this) {
        return function(text) {
          return _this.postMathJaxProcessor(text);
        };
      };
      editor = Markdown.makeWmdEditor(elem, appended_id, imageUploadUrl, _processor(this));
      this.wmdEditors["" + cls_identifier + "-" + id] = editor;
      if (placeholder != null) {
        elem.find("#wmd-input" + appended_id).attr('placeholder', placeholder);
      }
      return editor;
    };

    DiscussionUtil.getWmdEditor = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return this.wmdEditors["" + cls_identifier + "-" + id];
    };

    DiscussionUtil.getWmdInput = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return $local("#wmd-input-" + cls_identifier + "-" + id);
    };

    DiscussionUtil.getWmdContent = function($content, $local, cls_identifier) {
      return this.getWmdInput($content, $local, cls_identifier).val();
    };

    DiscussionUtil.setWmdContent = function($content, $local, cls_identifier, text) {
      this.getWmdInput($content, $local, cls_identifier).val(text);
      return this.getWmdEditor($content, $local, cls_identifier).refreshPreview();
    };

    DiscussionUtil.subscriptionLink = function(type, id) {
      var followLink, handleFollow, handleUnfollow, unfollowLink;
      followLink = function() {
        return this.generateDiscussionLink("discussion-follow-" + type, "Follow", handleFollow);
      };
      unfollowLink = function() {
        return this.generateDiscussionLink("discussion-unfollow-" + type, "Unfollow", handleUnfollow);
      };
      handleFollow = function(elem) {
        return this.safeAjax({
          $elem: $(elem),
          url: this.urlFor("follow_" + type, id),
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === "success") {
              return $(elem).replaceWith(unfollowLink());
            }
          },
          dataType: 'json'
        });
      };
      handleUnfollow = function(elem) {
        return this.safeAjax({
          $elem: $(elem),
          url: this.urlFor("unfollow_" + type, id),
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === "success") {
              return $(elem).replaceWith(followLink());
            }
          },
          dataType: 'json'
        });
      };
      if (this.isSubscribed(id, type)) {
        return unfollowLink();
      } else {
        return followLink();
      }
    };

    DiscussionUtil.processEachMathAndCode = function(text, processor) {
      var $div, ESCAPED_BACKSLASH, ESCAPED_DOLLAR, RE_DISPLAYMATH, RE_INLINEMATH, cnt, codeArchive, processedText;
      codeArchive = [];
      RE_DISPLAYMATH = /^([^\$]*?)\$\$([^\$]*?)\$\$(.*)$/m;
      RE_INLINEMATH = /^([^\$]*?)\$([^\$]+?)\$(.*)$/m;
      ESCAPED_DOLLAR = '@@ESCAPED_D@@';
      ESCAPED_BACKSLASH = '@@ESCAPED_B@@';
      processedText = "";
      $div = $("<div>").html(text);
      $div.find("code").each(function(index, code) {
        codeArchive.push($(code).html());
        return $(code).html(codeArchive.length - 1);
      });
      text = $div.html();
      text = text.replace(/\\\$/g, ESCAPED_DOLLAR);
      while (true) {
        if (RE_INLINEMATH.test(text)) {
          text = text.replace(RE_INLINEMATH, function($0, $1, $2, $3) {
            processedText += $1 + processor("$" + $2 + "$", 'inline');
            return $3;
          });
        } else if (RE_DISPLAYMATH.test(text)) {
          text = text.replace(RE_DISPLAYMATH, function($0, $1, $2, $3) {
            processedText = processor("$$" + $2 + "$$", 'display') + processedText;
            processedText = $1 + processedText;
            return $3;
          });
        } else {
          processedText += text;
          break;
        }
      }
      text = processedText;
      text = text.replace(new RegExp(ESCAPED_DOLLAR, 'g'), '\\$');
      text = text.replace(/\\\\\\\\/g, ESCAPED_BACKSLASH);
      text = text.replace(/\\begin\{([a-z]*\*?)\}([\s\S]*?)\\end\{\1\}/img, function($0, $1, $2) {
        return processor(("\\begin{" + $1 + "}") + $2 + ("\\end{" + $1 + "}"));
      });
      text = text.replace(new RegExp(ESCAPED_BACKSLASH, 'g'), '\\\\\\\\');
      $div = $("<div>").html(text);
      cnt = 0;
      $div.find("code").each(function(index, code) {
        $(code).html(processor(codeArchive[cnt], 'code'));
        return cnt += 1;
      });
      text = $div.html();
      return text;
    };

    DiscussionUtil.unescapeHighlightTag = function(text) {
      return text.replace(/\&lt\;highlight\&gt\;/g, "<span class='search-highlight'>").replace(/\&lt\;\/highlight\&gt\;/g, "</span>");
    };

    DiscussionUtil.stripHighlight = function(text) {
      return text.replace(/\&(amp\;)?lt\;highlight\&(amp\;)?gt\;/g, "").replace(/\&(amp\;)?lt\;\/highlight\&(amp\;)?gt\;/g, "");
    };

    DiscussionUtil.stripLatexHighlight = function(text) {
      return this.processEachMathAndCode(text, this.stripHighlight);
    };

    DiscussionUtil.markdownWithHighlight = function(text) {
      var converter;
      text = text.replace(/^\&gt\;/gm, ">");
      converter = Markdown.getMathCompatibleConverter();
      text = this.unescapeHighlightTag(this.stripLatexHighlight(converter.makeHtml(text)));
      return text.replace(/^>/gm, "&gt;");
    };

    DiscussionUtil.abbreviateString = function(text, minLength) {
      if (text.length < minLength) {
        return text;
      } else {
        while (minLength < text.length && text[minLength] !== ' ') {
          minLength++;
        }
        return text.substr(0, minLength) + '...';
      }
    };

    return DiscussionUtil;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionContentView = (function(_super) {
      __extends(DiscussionContentView, _super);

      function DiscussionContentView() {
        this.setWmdContent = __bind(this.setWmdContent, this);
        this.getWmdContent = __bind(this.getWmdContent, this);
        this.getWmdEditor = __bind(this.getWmdEditor, this);
        this.makeWmdEditor = __bind(this.makeWmdEditor, this);
        _ref = DiscussionContentView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionContentView.prototype.events = {
        "click .discussion-flag-abuse": "toggleFlagAbuse"
      };

      DiscussionContentView.prototype.attrRenderer = {
        endorsed: function(endorsed) {
          var _ref1;
          if (endorsed) {
            return this.$(".action-endorse").show().addClass("is-endorsed");
          } else {
            if ((_ref1 = this.model.get('ability')) != null ? _ref1.can_endorse : void 0) {
              this.$(".action-endorse").show();
            } else {
              this.$(".action-endorse").hide();
            }
            return this.$(".action-endorse").removeClass("is-endorsed");
          }
        },
        closed: function(closed) {
          if (!this.$(".action-openclose").length) {
            return;
          }
          if (!this.$(".post-status-closed").length) {
            return;
          }
          if (closed) {
            this.$(".post-status-closed").show();
            this.$(".action-openclose").html(this.$(".action-openclose").html().replace("Close", "Open"));
            return this.$(".discussion-reply-new").hide();
          } else {
            this.$(".post-status-closed").hide();
            this.$(".action-openclose").html(this.$(".action-openclose").html().replace("Open", "Close"));
            return this.$(".discussion-reply-new").show();
          }
        },
        voted: function(voted) {},
        votes_point: function(votes_point) {},
        comments_count: function(comments_count) {},
        subscribed: function(subscribed) {
          if (subscribed) {
            return this.$(".dogear").addClass("is-followed");
          } else {
            return this.$(".dogear").removeClass("is-followed");
          }
        },
        ability: function(ability) {
          var action, selector, _ref1, _results;
          _ref1 = this.abilityRenderer;
          _results = [];
          for (action in _ref1) {
            selector = _ref1[action];
            if (!ability[action]) {
              _results.push(selector.disable.apply(this));
            } else {
              _results.push(selector.enable.apply(this));
            }
          }
          return _results;
        }
      };

      DiscussionContentView.prototype.abilityRenderer = {
        editable: {
          enable: function() {
            return this.$(".action-edit").closest("li").show();
          },
          disable: function() {
            return this.$(".action-edit").closest("li").hide();
          }
        },
        can_delete: {
          enable: function() {
            return this.$(".action-delete").closest("li").show();
          },
          disable: function() {
            return this.$(".action-delete").closest("li").hide();
          }
        },
        can_endorse: {
          enable: function() {
            return this.$(".action-endorse").show().css("cursor", "auto");
          },
          disable: function() {
            this.$(".action-endorse").css("cursor", "default");
            if (!this.model.get('endorsed')) {
              return this.$(".action-endorse").hide();
            } else {
              return this.$(".action-endorse").show();
            }
          }
        },
        can_openclose: {
          enable: function() {
            return this.$(".action-openclose").closest("li").show();
          },
          disable: function() {
            return this.$(".action-openclose").closest("li").hide();
          }
        }
      };

      DiscussionContentView.prototype.renderPartialAttrs = function() {
        var attr, value, _ref1, _results;
        _ref1 = this.model.changedAttributes();
        _results = [];
        for (attr in _ref1) {
          value = _ref1[attr];
          if (this.attrRenderer[attr]) {
            _results.push(this.attrRenderer[attr].apply(this, [value]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      DiscussionContentView.prototype.renderAttrs = function() {
        var attr, value, _ref1, _results;
        _ref1 = this.model.attributes;
        _results = [];
        for (attr in _ref1) {
          value = _ref1[attr];
          if (this.attrRenderer[attr]) {
            _results.push(this.attrRenderer[attr].apply(this, [value]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      DiscussionContentView.prototype.$ = function(selector) {
        return this.$local.find(selector);
      };

      DiscussionContentView.prototype.initLocal = function() {
        this.$local = this.$el.children(".local");
        if (!this.$local.length) {
          this.$local = this.$el;
        }
        return this.$delegateElement = this.$local;
      };

      DiscussionContentView.prototype.makeWmdEditor = function(cls_identifier) {
        if (!this.$el.find(".wmd-panel").length) {
          return DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), cls_identifier);
        }
      };

      DiscussionContentView.prototype.getWmdEditor = function(cls_identifier) {
        return DiscussionUtil.getWmdEditor(this.$el, $.proxy(this.$, this), cls_identifier);
      };

      DiscussionContentView.prototype.getWmdContent = function(cls_identifier) {
        return DiscussionUtil.getWmdContent(this.$el, $.proxy(this.$, this), cls_identifier);
      };

      DiscussionContentView.prototype.setWmdContent = function(cls_identifier, text) {
        return DiscussionUtil.setWmdContent(this.$el, $.proxy(this.$, this), cls_identifier, text);
      };

      DiscussionContentView.prototype.initialize = function() {
        this.initLocal();
        return this.model.bind('change', this.renderPartialAttrs, this);
      };

      DiscussionContentView.prototype.toggleFlagAbuse = function(event) {
        var _ref1;
        event.preventDefault();
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          return this.unFlagAbuse();
        } else {
          return this.flagAbuse();
        }
      };

      DiscussionContentView.prototype.flagAbuse = function() {
        var url,
          _this = this;
        url = this.model.urlFor("flagAbuse");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-flag-abuse"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            var temp_array;
            if (textStatus === 'success') {
              /*
              note, we have to clone the array in order to trigger a change event
              */

              temp_array = _.clone(_this.model.get('abuse_flaggers'));
              temp_array.push(window.user.id);
              return _this.model.set('abuse_flaggers', temp_array);
            }
          }
        });
      };

      DiscussionContentView.prototype.unFlagAbuse = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unFlagAbuse");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-flag-abuse"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            var temp_array;
            if (textStatus === 'success') {
              temp_array = _.clone(_this.model.get('abuse_flaggers'));
              temp_array.pop(window.user.id);
              if (DiscussionUtil.isFlagModerator) {
                temp_array = [];
              }
              return _this.model.set('abuse_flaggers', temp_array);
            }
          }
        });
      };

      return DiscussionContentView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadEditView = (function(_super) {
      __extends(DiscussionThreadEditView, _super);

      function DiscussionThreadEditView() {
        _ref = DiscussionThreadEditView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      DiscussionThreadEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadEditView.prototype.initialize = function() {
        return DiscussionThreadEditView.__super__.initialize.call(this);
      };

      DiscussionThreadEditView.prototype.render = function() {
        this.template = _.template($("#thread-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-post-body");
        this.$(".edit-post-tags").tagsInput(DiscussionUtil.tagsInputOptions());
        return this;
      };

      DiscussionThreadEditView.prototype.update = function(event) {
        return this.trigger("thread:update", event);
      };

      DiscussionThreadEditView.prototype.cancel_edit = function(event) {
        return this.trigger("thread:cancel_edit", event);
      };

      return DiscussionThreadEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadListView = (function(_super) {
      __extends(DiscussionThreadListView, _super);

      function DiscussionThreadListView() {
        this.updateEmailNotifications = __bind(this.updateEmailNotifications, this);
        this.retrieveFollowed = __bind(this.retrieveFollowed, this);
        this.toggleTopicDrop = __bind(this.toggleTopicDrop, this);
        this.threadRemoved = __bind(this.threadRemoved, this);
        this.threadSelected = __bind(this.threadSelected, this);
        this.renderThreadListItem = __bind(this.renderThreadListItem, this);
        this.renderThread = __bind(this.renderThread, this);
        this.renderThreads = __bind(this.renderThreads, this);
        this.updateSidebar = __bind(this.updateSidebar, this);
        this.addAndSelectThread = __bind(this.addAndSelectThread, this);
        this.reloadDisplayedCollection = __bind(this.reloadDisplayedCollection, this);
        _ref = DiscussionThreadListView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadListView.prototype.events = {
        "click .search": "showSearch",
        "click .home": "goHome",
        "click .browse": "toggleTopicDrop",
        "keydown .post-search-field": "performSearch",
        "click .sort-bar a": "sortThreads",
        "click .browse-topic-drop-menu": "filterTopic",
        "click .browse-topic-drop-search-input": "ignoreClick",
        "click .post-list .list-item a": "threadSelected",
        "click .post-list .more-pages a": "loadMorePages",
        "change .cohort-options": "chooseCohort",
        'keyup .browse-topic-drop-search-input': DiscussionFilter.filterDrop
      };

      DiscussionThreadListView.prototype.initialize = function() {
        var _this = this;
        this.displayedCollection = new Discussion(this.collection.models, {
          pages: this.collection.pages
        });
        this.collection.on("change", this.reloadDisplayedCollection);
        this.sortBy = "date";
        this.discussionIds = "";
        this.collection.on("reset", function(discussion) {
          var board;
          board = $(".current-board").html();
          _this.displayedCollection.current_page = discussion.current_page;
          _this.displayedCollection.pages = discussion.pages;
          return _this.displayedCollection.reset(discussion.models);
        });
        this.collection.on("add", this.addAndSelectThread);
        this.sidebar_padding = 10;
        this.sidebar_header_height = 87;
        this.boardName;
        this.template = _.template($("#thread-list-template").html());
        this.current_search = "";
        return this.mode = 'all';
      };

      DiscussionThreadListView.prototype.reloadDisplayedCollection = function(thread) {
        var active, content, current_el, thread_id;
        thread_id = thread.get('id');
        content = this.renderThread(thread);
        current_el = this.$("a[data-id=" + thread_id + "]");
        active = current_el.hasClass("active");
        current_el.replaceWith(content);
        if (active) {
          return this.setActiveThread(thread_id);
        }
      };

      DiscussionThreadListView.prototype.addAndSelectThread = function(thread) {
        var commentable, commentable_id,
          _this = this;
        commentable_id = thread.get("commentable_id");
        commentable = this.$(".board-name[data-discussion_id]").filter(function() {
          return $(this).data("discussion_id").id === commentable_id;
        });
        this.setTopicHack(commentable);
        return this.retrieveDiscussion(commentable_id, function() {
          return _this.trigger("thread:created", thread.get('id'));
        });
      };

      DiscussionThreadListView.prototype.updateSidebar = function() {
        var amount, discussionBody, discussionBottomOffset, discussionsBodyBottom, discussionsBodyTop, postListWrapper, scrollTop, sidebar, sidebarHeight, sidebarWidth, topOffset, windowHeight;
        scrollTop = $(window).scrollTop();
        windowHeight = $(window).height();
        discussionBody = $(".discussion-article");
        discussionsBodyTop = discussionBody[0] ? discussionBody.offset().top : void 0;
        discussionsBodyBottom = discussionsBodyTop + discussionBody.outerHeight();
        sidebar = $(".sidebar");
        if (scrollTop > discussionsBodyTop - this.sidebar_padding) {
          sidebar.addClass('fixed');
          sidebar.css('top', this.sidebar_padding);
        } else {
          sidebar.removeClass('fixed');
          sidebar.css('top', '0');
        }
        sidebarWidth = .31 * $(".discussion-body").width();
        sidebar.css('width', sidebarWidth + 'px');
        sidebarHeight = windowHeight - Math.max(discussionsBodyTop - scrollTop, this.sidebar_padding);
        topOffset = scrollTop + windowHeight;
        discussionBottomOffset = discussionsBodyBottom + this.sidebar_padding;
        amount = Math.max(topOffset - discussionBottomOffset, 0);
        sidebarHeight = sidebarHeight - this.sidebar_padding - amount;
        sidebarHeight = Math.min(sidebarHeight + 1, discussionBody.outerHeight());
        sidebar.css('height', sidebarHeight);
        postListWrapper = this.$('.post-list-wrapper');
        return postListWrapper.css('height', (sidebarHeight - this.sidebar_header_height - 4) + 'px');
      };

      DiscussionThreadListView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      DiscussionThreadListView.prototype.render = function() {
        this.timer = 0;
        this.$el.html(this.template());
        $(window).bind("scroll", this.updateSidebar);
        $(window).bind("resize", this.updateSidebar);
        this.displayedCollection.on("reset", this.renderThreads);
        this.displayedCollection.on("thread:remove", this.renderThreads);
        this.renderThreads();
        return this;
      };

      DiscussionThreadListView.prototype.renderThreads = function() {
        var content, rendered, thread, _i, _len, _ref1;
        this.$(".post-list").html("");
        rendered = $("<div></div>");
        _ref1 = this.displayedCollection.models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          thread = _ref1[_i];
          content = this.renderThread(thread);
          rendered.append(content);
          content.wrap("<li class='list-item' data-id='\"" + (thread.get('id')) + "\"' />");
        }
        this.$(".post-list").html(rendered.html());
        this.renderMorePages();
        this.updateSidebar();
        return this.trigger("threads:rendered");
      };

      DiscussionThreadListView.prototype.renderMorePages = function() {
        if (this.displayedCollection.hasMorePages()) {
          return this.$(".post-list").append("<li class='more-pages'><a href='#'>Load more</a></li>");
        }
      };

      DiscussionThreadListView.prototype.loadMorePages = function(event) {
        var options;
        if (event) {
          event.preventDefault();
        }
        this.$(".more-pages").html('<div class="loading-animation"></div>');
        this.$(".more-pages").addClass("loading");
        options = {};
        switch (this.mode) {
          case 'search':
            options.search_text = this.current_search;
            if (this.group_id) {
              options.group_id = this.group_id;
            }
            break;
          case 'followed':
            options.user_id = window.user.id;
            options.group_id = "all";
            break;
          case 'commentables':
            options.commentable_ids = this.discussionIds;
            if (this.group_id) {
              options.group_id = this.group_id;
            }
            break;
          case 'all':
            if (this.group_id) {
              options.group_id = this.group_id;
            }
        }
        return this.collection.retrieveAnotherPage(this.mode, options, {
          sort_key: this.sortBy
        });
      };

      DiscussionThreadListView.prototype.renderThread = function(thread) {
        var content;
        content = $(_.template($("#thread-list-item-template").html())(thread.toJSON()));
        if (thread.get('subscribed')) {
          content.addClass("followed");
        }
        if (thread.get('endorsed')) {
          content.addClass("resolved");
        }
        if (thread.get('read')) {
          content.addClass("read");
        }
        return this.highlight(content);
      };

      DiscussionThreadListView.prototype.highlight = function(el) {
        return el.html(el.html().replace(/&lt;mark&gt;/g, "<mark>").replace(/&lt;\/mark&gt;/g, "</mark>"));
      };

      DiscussionThreadListView.prototype.renderThreadListItem = function(thread) {
        var view;
        view = new ThreadListItemView({
          model: thread
        });
        view.on("thread:selected", this.threadSelected);
        view.on("thread:removed", this.threadRemoved);
        view.render();
        return this.$(".post-list").append(view.el);
      };

      DiscussionThreadListView.prototype.threadSelected = function(e) {
        var thread_id;
        thread_id = $(e.target).closest("a").attr("data-id");
        this.setActiveThread(thread_id);
        this.trigger("thread:selected", thread_id);
        return false;
      };

      DiscussionThreadListView.prototype.threadRemoved = function(thread_id) {
        return this.trigger("thread:removed", thread_id);
      };

      DiscussionThreadListView.prototype.setActiveThread = function(thread_id) {
        this.$(".post-list a[data-id!='" + thread_id + "']").removeClass("active");
        return this.$(".post-list a[data-id='" + thread_id + "']").addClass("active");
      };

      DiscussionThreadListView.prototype.showSearch = function() {
        this.$(".browse").removeClass('is-dropped');
        this.hideTopicDrop();
        this.$(".search").addClass('is-open');
        this.$(".browse").removeClass('is-open');
        return setTimeout((function() {
          return this.$(".post-search-field").focus();
        }), 200);
      };

      DiscussionThreadListView.prototype.goHome = function() {
        var thread_id, url,
          _this = this;
        this.template = _.template($("#discussion-home").html());
        $(".discussion-column").html(this.template);
        $(".post-list a").removeClass("active");
        $("input.email-setting").bind("click", this.updateEmailNotifications);
        url = DiscussionUtil.urlFor("notifications_status", window.user.get("id"));
        DiscussionUtil.safeAjax({
          url: url,
          type: "GET",
          success: function(response, textStatus) {
            if (response.status) {
              return $('input.email-setting').attr('checked', 'checked');
            } else {
              return $('input.email-setting').removeAttr('checked');
            }
          }
        });
        thread_id = null;
        return this.trigger("thread:removed");
      };

      DiscussionThreadListView.prototype.toggleTopicDrop = function(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.current_search !== "") {
          this.clearSearch();
        }
        this.$(".search").removeClass('is-open');
        this.$(".browse").addClass('is-open');
        this.$(".browse").toggleClass('is-dropped');
        if (this.$(".browse").hasClass('is-dropped')) {
          this.$(".browse-topic-drop-menu-wrapper").show();
          $(".browse-topic-drop-search-input").focus();
          $("body").bind("click", this.toggleTopicDrop);
          return $("body").bind("keydown", this.setActiveItem);
        } else {
          return this.hideTopicDrop();
        }
      };

      DiscussionThreadListView.prototype.hideTopicDrop = function() {
        this.$(".browse-topic-drop-menu-wrapper").hide();
        $("body").unbind("click", this.toggleTopicDrop);
        return $("body").unbind("keydown", this.setActiveItem);
      };

      DiscussionThreadListView.prototype.setTopicHack = function(boardNameContainer) {
        var boardName, item;
        item = $(boardNameContainer).closest('a');
        boardName = item.find(".board-name").html();
        _.each(item.parents('ul').not('.browse-topic-drop-menu'), function(parent) {
          return boardName = $(parent).siblings('a').find('.board-name').html() + ' / ' + boardName;
        });
        return this.$(".current-board").html(this.fitName(boardName));
      };

      DiscussionThreadListView.prototype.setTopic = function(event) {
        var boardName, item;
        item = $(event.target).closest('a');
        boardName = item.find(".board-name").html();
        _.each(item.parents('ul').not('.browse-topic-drop-menu'), function(parent) {
          return boardName = $(parent).siblings('a').find('.board-name').html() + ' / ' + boardName;
        });
        return this.$(".current-board").html(this.fitName(boardName));
      };

      DiscussionThreadListView.prototype.setSelectedTopic = function(name) {
        return this.$(".current-board").html(this.fitName(name));
      };

      DiscussionThreadListView.prototype.getNameWidth = function(name) {
        var test, width;
        test = $("<div>");
        test.css({
          "font-size": this.$(".current-board").css('font-size'),
          opacity: 0,
          position: 'absolute',
          left: -1000,
          top: -1000
        });
        $("body").append(test);
        test.html(name);
        width = test.width();
        test.remove();
        return width;
      };

      DiscussionThreadListView.prototype.fitName = function(name) {
        var partialName, path, rawName, width, x;
        this.maxNameWidth = (this.$el.width() * .8) - 50;
        width = this.getNameWidth(name);
        if (width < this.maxNameWidth) {
          return name;
        }
        path = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = name.split("/");
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            x = _ref1[_i];
            _results.push(x.replace(/^\s+|\s+$/g, ""));
          }
          return _results;
        })();
        while (path.length > 1) {
          path.shift();
          partialName = "…/" + path.join("/");
          if (this.getNameWidth(partialName) < this.maxNameWidth) {
            return partialName;
          }
        }
        rawName = path[0];
        name = "…/" + rawName;
        while (this.getNameWidth(name) > this.maxNameWidth) {
          rawName = rawName.slice(0, rawName.length - 1);
          name = "…/" + rawName + "…";
        }
        return name;
      };

      DiscussionThreadListView.prototype.filterTopic = function(event) {
        var discussionId, discussionIds, item;
        if (this.current_search !== "") {
          this.setTopic(event);
          return this.clearSearch(this.filterTopic, event);
        } else {
          this.setTopic(event);
          item = $(event.target).closest('li');
          discussionId = item.find("span.board-name").data("discussion_id");
          if (discussionId === "#all") {
            this.discussionIds = "";
            this.$(".post-search-field").val("");
            this.$('.cohort').show();
            return this.retrieveAllThreads();
          } else if (discussionId === "#flagged") {
            this.discussionIds = "";
            this.$(".post-search-field").val("");
            this.$('.cohort').hide();
            return this.retrieveFlaggedThreads();
          } else if (discussionId === "#following") {
            this.retrieveFollowed(event);
            return this.$('.cohort').hide();
          } else {
            discussionIds = _.map(item.find(".board-name[data-discussion_id]"), function(board) {
              return $(board).data("discussion_id").id;
            });
            if ($(event.target).attr('cohorted') === "True") {
              return this.retrieveDiscussions(discussionIds, "function(){$('.cohort').show();}");
            } else {
              return this.retrieveDiscussions(discussionIds, "function(){$('.cohort').hide();}");
            }
          }
        }
      };

      DiscussionThreadListView.prototype.chooseCohort = function(event) {
        this.group_id = this.$('.cohort-options :selected').val();
        this.collection.current_page = 0;
        this.collection.reset();
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.retrieveDiscussion = function(discussion_id, callback) {
        var url,
          _this = this;
        if (callback == null) {
          callback = null;
        }
        url = DiscussionUtil.urlFor("retrieve_discussion", discussion_id);
        return DiscussionUtil.safeAjax({
          url: url,
          type: "GET",
          success: function(response, textStatus) {
            _this.collection.current_page = response.page;
            _this.collection.pages = response.num_pages;
            _this.collection.reset(response.discussion_data);
            Content.loadContentInfos(response.annotated_content_info);
            _this.displayedCollection.reset(_this.collection.models);
            if (callback != null) {
              return callback();
            }
          }
        });
      };

      DiscussionThreadListView.prototype.retrieveDiscussions = function(discussion_ids) {
        this.discussionIds = discussion_ids.join(',');
        this.mode = 'commentables';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.retrieveAllThreads = function() {
        this.mode = 'all';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.retrieveFirstPage = function(event) {
        this.collection.current_page = 0;
        this.collection.reset();
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.retrieveFlaggedThreads = function(event) {
        this.collection.current_page = 0;
        this.collection.reset();
        this.mode = 'flagged';
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.sortThreads = function(event) {
        this.$(".sort-bar a").removeClass("active");
        $(event.target).addClass("active");
        this.sortBy = $(event.target).data("sort");
        this.displayedCollection.comparator = (function() {
          switch (this.sortBy) {
            case 'date':
              return this.displayedCollection.sortByDateRecentFirst;
            case 'votes':
              return this.displayedCollection.sortByVotes;
            case 'comments':
              return this.displayedCollection.sortByComments;
          }
        }).call(this);
        return this.retrieveFirstPage(event);
      };

      DiscussionThreadListView.prototype.performSearch = function(event) {
        var text;
        if (event.which === 13) {
          event.preventDefault();
          text = this.$(".post-search-field").val();
          return this.searchFor(text);
        }
      };

      DiscussionThreadListView.prototype.setAndSearchFor = function(text) {
        this.showSearch();
        this.$(".post-search-field").val(text);
        return this.searchFor(text);
      };

      DiscussionThreadListView.prototype.searchFor = function(text, callback, value) {
        var url,
          _this = this;
        this.mode = 'search';
        this.current_search = text;
        url = DiscussionUtil.urlFor("search");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".post-search-field"),
          data: {
            text: text
          },
          url: url,
          type: "GET",
          $loading: $,
          loadingCallback: function() {
            return _this.$(".post-list").html('<li class="loading"><div class="loading-animation"></div></li>');
          },
          loadedCallback: function() {
            if (callback) {
              return callback.apply(_this, [value]);
            }
          },
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              _this.collection.reset(response.discussion_data);
              Content.loadContentInfos(response.annotated_content_info);
              _this.collection.current_page = response.page;
              _this.collection.pages = response.num_pages;
              return _this.displayedCollection.reset(_this.collection.models);
            }
          }
        });
      };

      DiscussionThreadListView.prototype.clearSearch = function(callback, value) {
        this.$(".post-search-field").val("");
        return this.searchFor("", callback, value);
      };

      DiscussionThreadListView.prototype.setActiveItem = function(event) {
        var index, itemFromTop, itemTop, items, scrollTarget, scrollTop;
        if (event.which === 13) {
          $(".browse-topic-drop-menu-wrapper .focused").click();
          return;
        }
        if (event.which !== 40 && event.which !== 38) {
          return;
        }
        event.preventDefault();
        items = $.makeArray($(".browse-topic-drop-menu-wrapper a").not(".hidden"));
        index = items.indexOf($('.browse-topic-drop-menu-wrapper .focused')[0]);
        if (event.which === 40) {
          index = Math.min(index + 1, items.length - 1);
        }
        if (event.which === 38) {
          index = Math.max(index - 1, 0);
        }
        $(".browse-topic-drop-menu-wrapper .focused").removeClass("focused");
        $(items[index]).addClass("focused");
        itemTop = $(items[index]).parent().offset().top;
        scrollTop = $(".browse-topic-drop-menu").scrollTop();
        itemFromTop = $(".browse-topic-drop-menu").offset().top - itemTop;
        scrollTarget = Math.min(scrollTop - itemFromTop, scrollTop);
        scrollTarget = Math.max(scrollTop - itemFromTop - $(".browse-topic-drop-menu").height() + $(items[index]).height(), scrollTarget);
        return $(".browse-topic-drop-menu").scrollTop(scrollTarget);
      };

      DiscussionThreadListView.prototype.retrieveFollowed = function(event) {
        this.mode = 'followed';
        return this.retrieveFirstPage(event);
      };

      DiscussionThreadListView.prototype.updateEmailNotifications = function() {
        var _this = this;
        if ($('input.email-setting').attr('checked')) {
          return DiscussionUtil.safeAjax({
            url: DiscussionUtil.urlFor("enable_notifications"),
            type: "POST",
            error: function() {
              return $('input.email-setting').removeAttr('checked');
            }
          });
        } else {
          return DiscussionUtil.safeAjax({
            url: DiscussionUtil.urlFor("disable_notifications"),
            type: "POST",
            error: function() {
              return $('input.email-setting').attr('checked', 'checked');
            }
          });
        }
      };

      return DiscussionThreadListView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadProfileView = (function(_super) {
      var expanded;

      __extends(DiscussionThreadProfileView, _super);

      function DiscussionThreadProfileView() {
        this.addComment = __bind(this.addComment, this);
        this.renderResponse = __bind(this.renderResponse, this);
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderVoted = __bind(this.renderVoted, this);
        _ref = DiscussionThreadProfileView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      expanded = false;

      DiscussionThreadProfileView.prototype.events = {
        "click .discussion-vote": "toggleVote",
        "click .action-follow": "toggleFollowing",
        "click .expand-post": "expandPost",
        "click .collapse-post": "collapsePost"
      };

      DiscussionThreadProfileView.prototype.initLocal = function() {
        this.$local = this.$el.children(".discussion-article").children(".local");
        return this.$delegateElement = this.$local;
      };

      DiscussionThreadProfileView.prototype.initialize = function() {
        DiscussionThreadProfileView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      DiscussionThreadProfileView.prototype.render = function() {
        var params;
        this.template = DiscussionUtil.getTemplate("_profile_thread");
        if (!this.model.has('abbreviatedBody')) {
          this.abbreviateBody();
        }
        params = $.extend(this.model.toJSON(), {
          expanded: this.expanded,
          permalink: this.model.urlFor('retrieve')
        });
        if (!this.model.get('anonymous')) {
          params = $.extend(params, {
            user: {
              username: this.model.username,
              user_url: this.model.user_url
            }
          });
        }
        this.$el.html(Mustache.render(this.template, params));
        this.initLocal();
        this.delegateEvents();
        this.renderDogear();
        this.renderVoted();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.convertMath();
        if (this.expanded) {
          this.renderResponses();
        }
        return this;
      };

      DiscussionThreadProfileView.prototype.renderDogear = function() {
        if (window.user.following(this.model)) {
          return this.$(".dogear").addClass("is-followed");
        }
      };

      DiscussionThreadProfileView.prototype.renderVoted = function() {
        if (window.user.voted(this.model)) {
          return this.$("[data-role=discussion-vote]").addClass("is-cast");
        } else {
          return this.$("[data-role=discussion-vote]").removeClass("is-cast");
        }
      };

      DiscussionThreadProfileView.prototype.updateModelDetails = function() {
        this.renderVoted();
        return this.$("[data-role=discussion-vote] .votes-count-number").html(this.model.get("votes")["up_count"]);
      };

      DiscussionThreadProfileView.prototype.convertMath = function() {
        var element;
        element = this.$(".post-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      DiscussionThreadProfileView.prototype.renderResponses = function() {
        var _this = this;
        return DiscussionUtil.safeAjax({
          url: "/courses/" + $$course_id + "/discussion/forum/" + (this.model.get('commentable_id')) + "/threads/" + this.model.id,
          $loading: this.$el,
          success: function(data, textStatus, xhr) {
            var comments;
            _this.$el.find(".loading").remove();
            Content.loadContentInfos(data['annotated_content_info']);
            comments = new Comments(data['content']['children']);
            comments.each(_this.renderResponse);
            return _this.trigger("thread:responses:rendered");
          }
        });
      };

      DiscussionThreadProfileView.prototype.renderResponse = function(response) {
        var view;
        response.set('thread', this.model);
        view = new ThreadResponseView({
          model: response
        });
        view.on("comment:add", this.addComment);
        view.render();
        return this.$el.find(".responses").append(view.el);
      };

      DiscussionThreadProfileView.prototype.addComment = function() {
        return this.model.comment();
      };

      DiscussionThreadProfileView.prototype.toggleVote = function(event) {
        event.preventDefault();
        if (window.user.voted(this.model)) {
          return this.unvote();
        } else {
          return this.vote();
        }
      };

      DiscussionThreadProfileView.prototype.toggleFollowing = function(event) {
        var $elem, url;
        $elem = $(event.target);
        url = null;
        if (!this.model.get('subscribed')) {
          this.model.follow();
          url = this.model.urlFor("follow");
        } else {
          this.model.unfollow();
          url = this.model.urlFor("unfollow");
        }
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST"
        });
      };

      DiscussionThreadProfileView.prototype.vote = function() {
        var url,
          _this = this;
        window.user.vote(this.model);
        url = this.model.urlFor("upvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      DiscussionThreadProfileView.prototype.unvote = function() {
        var url,
          _this = this;
        window.user.unvote(this.model);
        url = this.model.urlFor("unvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      DiscussionThreadProfileView.prototype.edit = function() {};

      DiscussionThreadProfileView.prototype.abbreviateBody = function() {
        var abbreviated;
        abbreviated = DiscussionUtil.abbreviateString(this.model.get('body'), 140);
        return this.model.set('abbreviatedBody', abbreviated);
      };

      DiscussionThreadProfileView.prototype.expandPost = function(event) {
        this.expanded = true;
        this.$el.addClass('expanded');
        this.$el.find('.post-body').html(this.model.get('body'));
        this.convertMath();
        this.$el.find('.expand-post').css('display', 'none');
        this.$el.find('.collapse-post').css('display', 'block');
        this.$el.find('.post-extended-content').show();
        if (this.$el.find('.loading').length) {
          return this.renderResponses();
        }
      };

      DiscussionThreadProfileView.prototype.collapsePost = function(event) {
        this.expanded = false;
        this.$el.removeClass('expanded');
        this.$el.find('.post-body').html(this.model.get('abbreviatedBody'));
        this.convertMath();
        this.$el.find('.collapse-post').css('display', 'none');
        this.$el.find('.post-extended-content').hide();
        return this.$el.find('.expand-post').css('display', 'block');
      };

      return DiscussionThreadProfileView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadShowView = (function(_super) {
      __extends(DiscussionThreadShowView, _super);

      function DiscussionThreadShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderPinned = __bind(this.renderPinned, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        this.renderVoted = __bind(this.renderVoted, this);
        _ref = DiscussionThreadShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadShowView.prototype.events = {
        "click .discussion-vote": "toggleVote",
        "click .discussion-flag-abuse": "toggleFlagAbuse",
        "click .admin-pin": "togglePin",
        "click .action-follow": "toggleFollowing",
        "click .action-edit": "edit",
        "click .action-delete": "_delete",
        "click .action-openclose": "toggleClosed"
      };

      DiscussionThreadShowView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadShowView.prototype.initialize = function() {
        DiscussionThreadShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      DiscussionThreadShowView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-show-template").html());
        return this.template(this.model.toJSON());
      };

      DiscussionThreadShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderDogear();
        this.renderVoted();
        this.renderFlagged();
        this.renderPinned();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.convertMath();
        this.highlight(this.$(".post-body"));
        this.highlight(this.$("h1,h3"));
        return this;
      };

      DiscussionThreadShowView.prototype.renderDogear = function() {
        if (window.user.following(this.model)) {
          return this.$(".dogear").addClass("is-followed");
        }
      };

      DiscussionThreadShowView.prototype.renderVoted = function() {
        if (window.user.voted(this.model)) {
          return this.$("[data-role=discussion-vote]").addClass("is-cast");
        } else {
          return this.$("[data-role=discussion-vote]").removeClass("is-cast");
        }
      };

      DiscussionThreadShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Misuse Reported");
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Report Misuse");
        }
      };

      DiscussionThreadShowView.prototype.renderPinned = function() {
        if (this.model.get("pinned")) {
          this.$("[data-role=thread-pin]").addClass("pinned");
          this.$("[data-role=thread-pin]").removeClass("notpinned");
          return this.$(".discussion-pin .pin-label").html("Pinned");
        } else {
          this.$("[data-role=thread-pin]").removeClass("pinned");
          this.$("[data-role=thread-pin]").addClass("notpinned");
          return this.$(".discussion-pin .pin-label").html("Pin Thread");
        }
      };

      DiscussionThreadShowView.prototype.updateModelDetails = function() {
        this.renderVoted();
        this.renderFlagged();
        this.renderPinned();
        return this.$("[data-role=discussion-vote] .votes-count-number").html(this.model.get("votes")["up_count"]);
      };

      DiscussionThreadShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".post-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      DiscussionThreadShowView.prototype.toggleVote = function(event) {
        event.preventDefault();
        if (window.user.voted(this.model)) {
          return this.unvote();
        } else {
          return this.vote();
        }
      };

      DiscussionThreadShowView.prototype.toggleFollowing = function(event) {
        var $elem, url;
        $elem = $(event.target);
        url = null;
        if (!this.model.get('subscribed')) {
          this.model.follow();
          url = this.model.urlFor("follow");
        } else {
          this.model.unfollow();
          url = this.model.urlFor("unfollow");
        }
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST"
        });
      };

      DiscussionThreadShowView.prototype.vote = function() {
        var url,
          _this = this;
        window.user.vote(this.model);
        url = this.model.urlFor("upvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response, {
                silent: true
              });
            }
          }
        });
      };

      DiscussionThreadShowView.prototype.unvote = function() {
        var url,
          _this = this;
        window.user.unvote(this.model);
        url = this.model.urlFor("unvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response, {
                silent: true
              });
            }
          }
        });
      };

      DiscussionThreadShowView.prototype.edit = function(event) {
        return this.trigger("thread:edit", event);
      };

      DiscussionThreadShowView.prototype._delete = function(event) {
        return this.trigger("thread:_delete", event);
      };

      DiscussionThreadShowView.prototype.togglePin = function(event) {
        event.preventDefault();
        if (this.model.get('pinned')) {
          return this.unPin();
        } else {
          return this.pin();
        }
      };

      DiscussionThreadShowView.prototype.pin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("pinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', true);
            }
          },
          error: function() {
            return $('.admin-pin').text("Pinning not currently available");
          }
        });
      };

      DiscussionThreadShowView.prototype.unPin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unPinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', false);
            }
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleClosed = function(event) {
        var $elem, closed, data, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('close');
        closed = this.model.get('closed');
        data = {
          closed: !closed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            _this.model.set('closed', !closed);
            return _this.model.set('ability', response.ability);
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            return _this.model.set('endorsed', !endorsed);
          }
        });
      };

      DiscussionThreadShowView.prototype.highlight = function(el) {
        if (el.html()) {
          return el.html(el.html().replace(/&lt;mark&gt;/g, "<mark>").replace(/&lt;\/mark&gt;/g, "</mark>"));
        }
      };

      return DiscussionThreadShowView;

    })(DiscussionContentView);
    this.DiscussionThreadInlineShowView = (function(_super) {
      __extends(DiscussionThreadInlineShowView, _super);

      function DiscussionThreadInlineShowView() {
        _ref1 = DiscussionThreadInlineShowView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      DiscussionThreadInlineShowView.prototype.renderTemplate = function() {
        var params;
        this.template = DiscussionUtil.getTemplate('_inline_thread_show');
        params = this.model.toJSON();
        if (this.model.get('username') != null) {
          params = $.extend(params, {
            user: {
              username: this.model.username,
              user_url: this.model.user_url
            }
          });
        }
        return Mustache.render(this.template, params);
      };

      return DiscussionThreadInlineShowView;

    })(DiscussionThreadShowView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadView = (function(_super) {
      __extends(DiscussionThreadView, _super);

      function DiscussionThreadView() {
        this._delete = __bind(this._delete, this);
        this.cancelEdit = __bind(this.cancelEdit, this);
        this.update = __bind(this.update, this);
        this.edit = __bind(this.edit, this);
        this.endorseThread = __bind(this.endorseThread, this);
        this.addComment = __bind(this.addComment, this);
        this.renderResponse = __bind(this.renderResponse, this);
        _ref = DiscussionThreadView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadView.prototype.events = {
        "click .discussion-submit-post": "submitComment"
      };

      DiscussionThreadView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadView.prototype.initialize = function() {
        DiscussionThreadView.__super__.initialize.call(this);
        return this.createShowView();
      };

      DiscussionThreadView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-template").html());
        return this.template(this.model.toJSON());
      };

      DiscussionThreadView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.$el.find(".loading").hide();
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.makeWmdEditor("reply-body");
        this.renderResponses();
        return this;
      };

      DiscussionThreadView.prototype.cleanup = function() {
        if (this.responsesRequest != null) {
          return this.responsesRequest.abort();
        }
      };

      DiscussionThreadView.prototype.renderResponses = function() {
        var _this = this;
        setTimeout(function() {
          return _this.$el.find(".loading").show();
        }, 200);
        return this.responsesRequest = DiscussionUtil.safeAjax({
          url: DiscussionUtil.urlFor('retrieve_single_thread', this.model.get('commentable_id'), this.model.id),
          success: function(data, textStatus, xhr) {
            var comments;
            _this.responsesRequest = null;
            _this.$el.find(".loading").remove();
            Content.loadContentInfos(data['annotated_content_info']);
            comments = new Comments(data['content']['children']);
            comments.each(_this.renderResponse);
            return _this.trigger("thread:responses:rendered");
          }
        });
      };

      DiscussionThreadView.prototype.renderResponse = function(response) {
        var view;
        response.set('thread', this.model);
        view = new ThreadResponseView({
          model: response
        });
        view.on("comment:add", this.addComment);
        view.on("comment:endorse", this.endorseThread);
        view.render();
        this.$el.find(".responses").append(view.el);
        return view.afterInsert();
      };

      DiscussionThreadView.prototype.addComment = function() {
        return this.model.comment();
      };

      DiscussionThreadView.prototype.endorseThread = function(endorsed) {
        var is_endorsed;
        is_endorsed = this.$el.find(".is-endorsed").length;
        return this.model.set('endorsed', is_endorsed);
      };

      DiscussionThreadView.prototype.submitComment = function(event) {
        var body, comment, url,
          _this = this;
        event.preventDefault();
        url = this.model.urlFor('reply');
        body = this.getWmdContent("reply-body");
        if (!body.trim().length) {
          return;
        }
        this.setWmdContent("reply-body", "");
        comment = new Comment({
          body: body,
          created_at: (new Date()).toISOString(),
          username: window.user.get("username"),
          votes: {
            up_count: 0
          },
          abuse_flaggers: [],
          endorsed: false,
          user_id: window.user.get("id")
        });
        comment.set('thread', this.model.get('thread'));
        this.renderResponse(comment);
        this.model.addComment();
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: body
          },
          success: function(data, textStatus) {
            comment.updateInfo(data.annotated_content_info);
            return comment.set(data.content);
          }
        });
      };

      DiscussionThreadView.prototype.edit = function(event) {
        this.createEditView();
        return this.renderEditView();
      };

      DiscussionThreadView.prototype.update = function(event) {
        var newBody, newTitle, url,
          _this = this;
        newTitle = this.editView.$(".edit-post-title").val();
        newBody = this.editView.$(".edit-post-body textarea").val();
        url = DiscussionUtil.urlFor('update_thread', this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            title: newTitle,
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-post-form-errors")),
          success: function(response, textStatus) {
            _this.editView.$(".edit-post-title").val("").attr("prev-text", "");
            _this.editView.$(".edit-post-body textarea").val("").attr("prev-text", "");
            _this.editView.$(".edit-post-tags").val("");
            _this.editView.$(".edit-post-tags").importTags("");
            _this.editView.$(".wmd-preview p").html("");
            _this.model.set({
              title: newTitle,
              body: newBody,
              tags: response.content.tags
            });
            _this.createShowView();
            return _this.renderShowView();
          }
        });
      };

      DiscussionThreadView.prototype.createEditView = function() {
        if (this.showView != null) {
          this.showView.undelegateEvents();
          this.showView.$el.empty();
          this.showView = null;
        }
        this.editView = new DiscussionThreadEditView({
          model: this.model
        });
        this.editView.bind("thread:update", this.update);
        return this.editView.bind("thread:cancel_edit", this.cancelEdit);
      };

      DiscussionThreadView.prototype.renderSubView = function(view) {
        view.setElement(this.$('.thread-content-wrapper'));
        view.render();
        return view.delegateEvents();
      };

      DiscussionThreadView.prototype.renderEditView = function() {
        return this.renderSubView(this.editView);
      };

      DiscussionThreadView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        this.showView = new DiscussionThreadShowView({
          model: this.model
        });
        this.showView.bind("thread:_delete", this._delete);
        return this.showView.bind("thread:edit", this.edit);
      };

      DiscussionThreadView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      DiscussionThreadView.prototype.cancelEdit = function(event) {
        event.preventDefault();
        this.createShowView();
        return this.renderShowView();
      };

      DiscussionThreadView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        url = this.model.urlFor('_delete');
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm("Are you sure to delete thread \"" + (this.model.get('title')) + "\"?")) {
          return;
        }
        this.model.remove();
        this.showView.undelegateEvents();
        this.undelegateEvents();
        this.$el.empty();
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {}
        });
      };

      return DiscussionThreadView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadInlineView = (function(_super) {
      var expanded;

      __extends(DiscussionThreadInlineView, _super);

      function DiscussionThreadInlineView() {
        this.expandPost = __bind(this.expandPost, this);
        _ref = DiscussionThreadInlineView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      expanded = false;

      DiscussionThreadInlineView.prototype.events = {
        "click .discussion-submit-post": "submitComment",
        "click .expand-post": "expandPost",
        "click .collapse-post": "collapsePost"
      };

      DiscussionThreadInlineView.prototype.initialize = function() {
        return DiscussionThreadInlineView.__super__.initialize.call(this);
      };

      DiscussionThreadInlineView.prototype.initLocal = function() {
        this.$local = this.$el.children(".discussion-article").children(".local");
        if (!this.$local.length) {
          this.$local = this.$el;
        }
        return this.$delegateElement = this.$local;
      };

      DiscussionThreadInlineView.prototype.render = function() {
        var params;
        if (this.model.has('group_id')) {
          this.template = DiscussionUtil.getTemplate("_inline_thread_cohorted");
        } else {
          this.template = DiscussionUtil.getTemplate("_inline_thread");
        }
        if (!this.model.has('abbreviatedBody')) {
          this.abbreviateBody();
        }
        params = this.model.toJSON();
        this.$el.html(Mustache.render(this.template, params));
        this.initLocal();
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.$el.find('.post-extended-content').hide();
        if (this.expanded) {
          this.makeWmdEditor("reply-body");
          this.renderResponses();
        }
        return this;
      };

      DiscussionThreadInlineView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        this.showView = new DiscussionThreadInlineShowView({
          model: this.model
        });
        this.showView.bind("thread:_delete", this._delete);
        return this.showView.bind("thread:edit", this.edit);
      };

      DiscussionThreadInlineView.prototype.renderResponses = function() {
        var _this = this;
        return DiscussionUtil.safeAjax({
          url: "/courses/" + $$course_id + "/discussion/forum/" + (this.model.get('commentable_id')) + "/threads/" + this.model.id,
          $loading: this.$el,
          success: function(data, textStatus, xhr) {
            var comments;
            Content.loadContentInfos(data['annotated_content_info']);
            comments = new Comments(data['content']['children']);
            comments.each(_this.renderResponse);
            _this.trigger("thread:responses:rendered");
            return _this.$('.loading').remove();
          }
        });
      };

      DiscussionThreadInlineView.prototype.toggleClosed = function(event) {
        var $elem, closed, data, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('close');
        closed = this.model.get('closed');
        data = {
          closed: !closed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            _this.model.set('closed', !closed);
            return _this.model.set('ability', response.ability);
          }
        });
      };

      DiscussionThreadInlineView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            return _this.model.set('endorsed', !endorsed);
          }
        });
      };

      DiscussionThreadInlineView.prototype.abbreviateBody = function() {
        var abbreviated;
        abbreviated = DiscussionUtil.abbreviateString(this.model.get('body'), 140);
        return this.model.set('abbreviatedBody', abbreviated);
      };

      DiscussionThreadInlineView.prototype.expandPost = function(event) {
        this.expanded = true;
        this.$el.addClass('expanded');
        this.$el.find('.post-body').html(this.model.get('body'));
        this.showView.convertMath();
        this.$el.find('.expand-post').css('display', 'none');
        this.$el.find('.collapse-post').css('display', 'block');
        this.$el.find('.post-extended-content').show();
        this.makeWmdEditor("reply-body");
        this.renderAttrs();
        if (this.$el.find('.loading').length) {
          return this.renderResponses();
        }
      };

      DiscussionThreadInlineView.prototype.collapsePost = function(event) {
        this.expanded = false;
        this.$el.removeClass('expanded');
        this.$el.find('.post-body').html(this.model.get('abbreviatedBody'));
        this.showView.convertMath();
        this.$el.find('.collapse-post').css('display', 'none');
        this.$el.find('.post-extended-content').hide();
        return this.$el.find('.expand-post').css('display', 'block');
      };

      DiscussionThreadInlineView.prototype.createEditView = function() {
        DiscussionThreadInlineView.__super__.createEditView.call(this);
        this.editView.bind("thread:update", this.expandPost);
        this.editView.bind("thread:update", this.abbreviateBody);
        return this.editView.bind("thread:cancel_edit", this.expandPost);
      };

      return DiscussionThreadInlineView;

    })(DiscussionThreadView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUserProfileView = (function(_super) {
      __extends(DiscussionUserProfileView, _super);

      function DiscussionUserProfileView() {
        this.addThread = __bind(this.addThread, this);
        this.renderThreads = __bind(this.renderThreads, this);
        _ref = DiscussionUserProfileView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionUserProfileView.prototype.initialize = function(options) {
        return this.renderThreads(this.$el, this.collection);
      };

      DiscussionUserProfileView.prototype.renderThreads = function($elem, threads) {
        var $discussion;
        this.discussion = new Discussion();
        this.discussion.reset(threads, {
          silent: false
        });
        $discussion = $(Mustache.render($("script#_user_profile").html(), {
          'threads': threads
        }));
        $elem.append($discussion);
        this.threadviews = this.discussion.map(function(thread) {
          return new DiscussionThreadProfileView({
            el: this.$("article#thread_" + thread.id),
            model: thread
          });
        });
        return _.each(this.threadviews, function(dtv) {
          return dtv.render();
        });
      };

      DiscussionUserProfileView.prototype.addThread = function(thread, collection, options) {
        var article, threadView;
        article = $("<article class='discussion-thread' id='thread_" + thread.id + "'></article>");
        this.$('section.discussion > .threads').prepend(article);
        threadView = new DiscussionThreadInlineView({
          el: article,
          model: thread
        });
        threadView.render();
        return this.threadviews.unshift(threadView);
      };

      return DiscussionUserProfileView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.NewPostInlineView = (function(_super) {
      __extends(NewPostInlineView, _super);

      function NewPostInlineView() {
        _ref = NewPostInlineView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NewPostInlineView.prototype.initialize = function() {
        this.topicId = this.$(".topic").first().data("discussion-id");
        this.maxNameWidth = 100;
        return DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "new-post-body");
      };

      NewPostInlineView.prototype.events = {
        "submit .new-post-form": "createPost"
      };

      NewPostInlineView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      NewPostInlineView.prototype.createPost = function(event) {
        var anonymous, anonymous_to_peers, body, follow, group, title, url,
          _this = this;
        event.preventDefault();
        title = this.$(".new-post-title").val();
        body = this.$(".new-post-body").find(".wmd-input").val();
        group = this.$(".new-post-group option:selected").attr("value");
        anonymous = false || this.$("input.discussion-anonymous").is(":checked");
        anonymous_to_peers = false || this.$("input.discussion-anonymous-to-peers").is(":checked");
        follow = false || this.$("input.discussion-follow").is(":checked");
        url = DiscussionUtil.urlFor('create_thread', this.topicId);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            title: title,
            body: body,
            group_id: group,
            anonymous: anonymous,
            anonymous_to_peers: anonymous_to_peers,
            auto_subscribe: follow
          },
          error: DiscussionUtil.formErrorHandler(this.$(".new-post-form-errors")),
          success: function(response, textStatus) {
            var thread;
            thread = new Thread(response['content']);
            DiscussionUtil.clearFormErrors(_this.$(".new-post-form-errors"));
            _this.$el.hide();
            _this.$(".new-post-title").val("").attr("prev-text", "");
            _this.$(".new-post-body textarea").val("").attr("prev-text", "");
            return _this.collection.add(thread);
          }
        });
      };

      return NewPostInlineView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.NewPostView = (function(_super) {
      __extends(NewPostView, _super);

      function NewPostView() {
        this.hideTopicDropdown = __bind(this.hideTopicDropdown, this);
        _ref = NewPostView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NewPostView.prototype.initialize = function() {
        this.dropdownButton = this.$(".topic_dropdown_button");
        this.topicMenu = this.$(".topic_menu_wrapper");
        this.menuOpen = this.dropdownButton.hasClass('dropped');
        this.topicId = this.$(".topic").first().data("discussion_id");
        this.topicText = this.getFullTopicName(this.$(".topic").first());
        this.maxNameWidth = 100;
        this.setSelectedTopic();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "new-post-body");
        this.$(".new-post-tags").tagsInput(DiscussionUtil.tagsInputOptions());
        if (this.$($(".topic_menu li a")[0]).attr('cohorted') !== "True") {
          return $('.choose-cohort').hide();
        }
      };

      NewPostView.prototype.events = {
        "submit .new-post-form": "createPost",
        "click  .topic_dropdown_button": "toggleTopicDropdown",
        "click  .topic_menu_wrapper": "setTopic",
        "click  .topic_menu_search": "ignoreClick",
        "keyup .form-topic-drop-search-input": DiscussionFilter.filterDrop
      };

      NewPostView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      NewPostView.prototype.toggleTopicDropdown = function(event) {
        event.stopPropagation();
        if (this.menuOpen) {
          return this.hideTopicDropdown();
        } else {
          return this.showTopicDropdown();
        }
      };

      NewPostView.prototype.showTopicDropdown = function() {
        this.menuOpen = true;
        this.dropdownButton.addClass('dropped');
        this.topicMenu.show();
        $(".form-topic-drop-search-input").focus();
        $("body").bind("keydown", this.setActiveItem);
        $("body").bind("click", this.hideTopicDropdown);
        return this.maxNameWidth = this.dropdownButton.width() * 0.9;
      };

      NewPostView.prototype.hideTopicDropdown = function() {
        this.menuOpen = false;
        this.dropdownButton.removeClass('dropped');
        this.topicMenu.hide();
        $("body").unbind("keydown", this.setActiveItem);
        return $("body").unbind("click", this.hideTopicDropdown);
      };

      NewPostView.prototype.setTopic = function(event) {
        var $target;
        $target = $(event.target);
        if ($target.data('discussion_id')) {
          this.topicText = $target.html();
          this.topicText = this.getFullTopicName($target);
          this.topicId = $target.data('discussion_id');
          this.setSelectedTopic();
          if ($target.attr('cohorted') === "True") {
            return $('.choose-cohort').show();
          } else {
            return $('.choose-cohort').hide();
          }
        }
      };

      NewPostView.prototype.setSelectedTopic = function() {
        return this.dropdownButton.html(this.fitName(this.topicText) + ' <span class="drop-arrow">▾</span>');
      };

      NewPostView.prototype.getFullTopicName = function(topicElement) {
        var name;
        name = topicElement.html();
        topicElement.parents('ul').not('.topic_menu').each(function() {
          return name = $(this).siblings('a').html() + ' / ' + name;
        });
        return name;
      };

      NewPostView.prototype.getNameWidth = function(name) {
        var test, width;
        test = $("<div>");
        test.css({
          "font-size": this.dropdownButton.css('font-size'),
          opacity: 0,
          position: 'absolute',
          left: -1000,
          top: -1000
        });
        $("body").append(test);
        test.html(name);
        width = test.width();
        test.remove();
        return width;
      };

      NewPostView.prototype.fitName = function(name) {
        var partialName, path, rawName, width, x;
        width = this.getNameWidth(name);
        if (width < this.maxNameWidth) {
          return name;
        }
        path = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = name.split("/");
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            x = _ref1[_i];
            _results.push(x.replace(/^\s+|\s+$/g, ""));
          }
          return _results;
        })();
        while (path.length > 1) {
          path.shift();
          partialName = "... / " + path.join(" / ");
          if (this.getNameWidth(partialName) < this.maxNameWidth) {
            return partialName;
          }
        }
        rawName = path[0];
        name = "... / " + rawName;
        while (this.getNameWidth(name) > this.maxNameWidth) {
          rawName = rawName.slice(0, rawName.length - 1);
          name = "... / " + rawName + " ...";
        }
        return name;
      };

      NewPostView.prototype.createPost = function(event) {
        var anonymous, anonymous_to_peers, body, follow, group, tags, title, url,
          _this = this;
        event.preventDefault();
        title = this.$(".new-post-title").val();
        body = this.$(".new-post-body").find(".wmd-input").val();
        tags = this.$(".new-post-tags").val();
        group = this.$(".new-post-group option:selected").attr("value");
        anonymous = false || this.$("input.discussion-anonymous").is(":checked");
        anonymous_to_peers = false || this.$("input.discussion-anonymous-to-peers").is(":checked");
        follow = false || this.$("input.discussion-follow").is(":checked");
        url = DiscussionUtil.urlFor('create_thread', this.topicId);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            title: title,
            body: body,
            tags: tags,
            anonymous: anonymous,
            anonymous_to_peers: anonymous_to_peers,
            auto_subscribe: follow,
            group_id: group
          },
          error: DiscussionUtil.formErrorHandler(this.$(".new-post-form-errors")),
          success: function(response, textStatus) {
            var thread;
            thread = new Thread(response['content']);
            DiscussionUtil.clearFormErrors(_this.$(".new-post-form-errors"));
            _this.$el.hide();
            _this.$(".new-post-title").val("").attr("prev-text", "");
            _this.$(".new-post-body textarea").val("").attr("prev-text", "");
            _this.$(".new-post-tags").val("");
            _this.$(".new-post-tags").importTags("");
            _this.$(".wmd-preview p").html("");
            return _this.collection.add(thread);
          }
        });
      };

      NewPostView.prototype.setActiveItem = function(event) {
        var index, itemFromTop, itemTop, items, scrollTarget, scrollTop;
        if (event.which === 13) {
          $(".topic_menu_wrapper .focused").click();
          return;
        }
        if (event.which !== 40 && event.which !== 38) {
          return;
        }
        event.preventDefault();
        items = $.makeArray($(".topic_menu_wrapper a").not(".hidden"));
        index = items.indexOf($('.topic_menu_wrapper .focused')[0]);
        if (event.which === 40) {
          index = Math.min(index + 1, items.length - 1);
        }
        if (event.which === 38) {
          index = Math.max(index - 1, 0);
        }
        $(".topic_menu_wrapper .focused").removeClass("focused");
        $(items[index]).addClass("focused");
        itemTop = $(items[index]).parent().offset().top;
        scrollTop = $(".topic_menu").scrollTop();
        itemFromTop = $(".topic_menu").offset().top - itemTop;
        scrollTarget = Math.min(scrollTop - itemFromTop, scrollTop);
        scrollTarget = Math.max(scrollTop - itemFromTop - $(".topic_menu").height() + $(items[index]).height() + 20, scrollTarget);
        return $(".topic_menu").scrollTop(scrollTarget);
      };

      return NewPostView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentShowView = (function(_super) {
      __extends(ResponseCommentShowView, _super);

      function ResponseCommentShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        _ref = ResponseCommentShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentShowView.prototype.events = {
        "click .discussion-flag-abuse": "toggleFlagAbuse"
      };

      ResponseCommentShowView.prototype.tagName = "li";

      ResponseCommentShowView.prototype.initialize = function() {
        ResponseCommentShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      ResponseCommentShowView.prototype.render = function() {
        var params;
        this.template = _.template($("#response-comment-show-template").html());
        params = this.model.toJSON();
        this.$el.html(this.template(params));
        this.initLocal();
        this.delegateEvents();
        this.renderAttrs();
        this.renderFlagged();
        this.markAsStaff();
        this.$el.find(".timeago").timeago();
        this.convertMath();
        this.addReplyLink();
        return this;
      };

      ResponseCommentShowView.prototype.addReplyLink = function() {
        var html, name, p, _ref1;
        if (this.model.hasOwnProperty('parent')) {
          name = (_ref1 = this.model.parent.get('username')) != null ? _ref1 : "anonymous";
          html = "<a href='#comment_" + this.model.parent.id + "'>@" + name + "</a>:  ";
          p = this.$('.response-body p:first');
          return p.prepend(html);
        }
      };

      ResponseCommentShowView.prototype.convertMath = function() {
        var body;
        body = this.$el.find(".response-body");
        body.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(body.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, body[0]]);
      };

      ResponseCommentShowView.prototype.markAsStaff = function() {
        if (DiscussionUtil.isStaff(this.model.get("user_id"))) {
          return this.$el.find("a.profile-link").after('<span class="staff-label">staff</span>');
        } else if (DiscussionUtil.isTA(this.model.get("user_id"))) {
          return this.$el.find("a.profile-link").after('<span class="community-ta-label">Community&nbsp;&nbsp;TA</span>');
        }
      };

      ResponseCommentShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          return this.$("[data-role=thread-flag]").removeClass("notflagged");
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          return this.$("[data-role=thread-flag]").addClass("notflagged");
        }
      };

      ResponseCommentShowView.prototype.updateModelDetails = function() {
        return this.renderFlagged();
      };

      return ResponseCommentShowView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentView = (function(_super) {
      __extends(ResponseCommentView, _super);

      function ResponseCommentView() {
        _ref = ResponseCommentView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentView.prototype.tagName = "li";

      ResponseCommentView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ResponseCommentView.prototype.initialize = function() {
        ResponseCommentView.__super__.initialize.call(this);
        return this.createShowView();
      };

      ResponseCommentView.prototype.render = function() {
        this.renderShowView();
        return this;
      };

      ResponseCommentView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        return this.showView = new ResponseCommentShowView({
          model: this.model
        });
      };

      ResponseCommentView.prototype.renderSubView = function(view) {
        view.setElement(this.$el);
        view.render();
        return view.delegateEvents();
      };

      ResponseCommentView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      return ResponseCommentView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseEditView = (function(_super) {
      __extends(ThreadResponseEditView, _super);

      function ThreadResponseEditView() {
        _ref = ThreadResponseEditView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      ThreadResponseEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseEditView.prototype.initialize = function() {
        return ThreadResponseEditView.__super__.initialize.call(this);
      };

      ThreadResponseEditView.prototype.render = function() {
        this.template = _.template($("#thread-response-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-post-body");
        return this;
      };

      ThreadResponseEditView.prototype.update = function(event) {
        return this.trigger("response:update", event);
      };

      ThreadResponseEditView.prototype.cancel_edit = function(event) {
        return this.trigger("response:cancel_edit", event);
      };

      return ThreadResponseEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseShowView = (function(_super) {
      __extends(ThreadResponseShowView, _super);

      function ThreadResponseShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        _ref = ThreadResponseShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseShowView.prototype.events = {
        "click .vote-btn": "toggleVote",
        "click .action-endorse": "toggleEndorse",
        "click .action-delete": "_delete",
        "click .action-edit": "edit",
        "click .discussion-flag-abuse": "toggleFlagAbuse"
      };

      ThreadResponseShowView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseShowView.prototype.initialize = function() {
        ThreadResponseShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      ThreadResponseShowView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-response-show-template").html());
        return this.template(this.model.toJSON());
      };

      ThreadResponseShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        if (window.user.voted(this.model)) {
          this.$(".vote-btn").addClass("is-cast");
        }
        this.renderAttrs();
        this.renderFlagged();
        this.$el.find(".posted-details").timeago();
        this.convertMath();
        this.markAsStaff();
        return this;
      };

      ThreadResponseShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".response-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      ThreadResponseShowView.prototype.markAsStaff = function() {
        if (DiscussionUtil.isStaff(this.model.get("user_id"))) {
          this.$el.addClass("staff");
          return this.$el.prepend('<div class="staff-banner">staff</div>');
        } else if (DiscussionUtil.isTA(this.model.get("user_id"))) {
          this.$el.addClass("community-ta");
          return this.$el.prepend('<div class="community-ta-banner">Community TA</div>');
        }
      };

      ThreadResponseShowView.prototype.toggleVote = function(event) {
        event.preventDefault();
        this.$(".vote-btn").toggleClass("is-cast");
        if (this.$(".vote-btn").hasClass("is-cast")) {
          return this.vote();
        } else {
          return this.unvote();
        }
      };

      ThreadResponseShowView.prototype.vote = function() {
        var url,
          _this = this;
        url = this.model.urlFor("upvote");
        this.$(".votes-count-number").html(parseInt(this.$(".votes-count-number").html()) + 1);
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      ThreadResponseShowView.prototype.unvote = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unvote");
        this.$(".votes-count-number").html(parseInt(this.$(".votes-count-number").html()) - 1);
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      ThreadResponseShowView.prototype.edit = function(event) {
        return this.trigger("response:edit", event);
      };

      ThreadResponseShowView.prototype._delete = function(event) {
        return this.trigger("response:_delete", event);
      };

      ThreadResponseShowView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url;
        event.preventDefault();
        if (!this.model.can('can_endorse')) {
          return;
        }
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        this.model.set('endorsed', !endorsed);
        this.trigger("comment:endorse", !endorsed);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST"
        });
      };

      ThreadResponseShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Misuse Reported");
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Report Misuse");
        }
      };

      ThreadResponseShowView.prototype.updateModelDetails = function() {
        return this.renderFlagged();
      };

      return ThreadResponseShowView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseView = (function(_super) {
      __extends(ThreadResponseView, _super);

      function ThreadResponseView() {
        this.update = __bind(this.update, this);
        this.edit = __bind(this.edit, this);
        this.cancelEdit = __bind(this.cancelEdit, this);
        this._delete = __bind(this._delete, this);
        this.renderComment = __bind(this.renderComment, this);
        _ref = ThreadResponseView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseView.prototype.tagName = "li";

      ThreadResponseView.prototype.events = {
        "click .discussion-submit-comment": "submitComment",
        "focus .wmd-input": "showEditorChrome"
      };

      ThreadResponseView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseView.prototype.initialize = function() {
        return this.createShowView();
      };

      ThreadResponseView.prototype.renderTemplate = function() {
        var templateData, _ref1;
        this.template = _.template($("#thread-response-template").html());
        templateData = this.model.toJSON();
        templateData.wmdId = (_ref1 = this.model.id) != null ? _ref1 : (new Date()).getTime();
        return this.template(templateData);
      };

      ThreadResponseView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.renderComments();
        return this;
      };

      ThreadResponseView.prototype.afterInsert = function() {
        this.makeWmdEditor("comment-body");
        return this.hideEditorChrome();
      };

      ThreadResponseView.prototype.hideEditorChrome = function() {
        this.$('.wmd-button-row').hide();
        this.$('.wmd-preview').hide();
        this.$('.wmd-input').css({
          height: '35px',
          padding: '5px'
        });
        return this.$('.comment-post-control').hide();
      };

      ThreadResponseView.prototype.showEditorChrome = function() {
        this.$('.wmd-button-row').show();
        this.$('.wmd-preview').show();
        this.$('.comment-post-control').show();
        return this.$('.wmd-input').css({
          height: '125px',
          padding: '10px'
        });
      };

      ThreadResponseView.prototype.renderComments = function() {
        var collectComments, comments,
          _this = this;
        comments = new Comments();
        comments.comparator = function(comment) {
          return comment.get('created_at');
        };
        collectComments = function(comment) {
          var children;
          comments.add(comment);
          children = new Comments(comment.get('children'));
          return children.each(function(child) {
            child.parent = comment;
            return collectComments(child);
          });
        };
        this.model.get('comments').each(collectComments);
        return comments.each(function(comment) {
          return _this.renderComment(comment, false, null);
        });
      };

      ThreadResponseView.prototype.renderComment = function(comment) {
        var view;
        comment.set('thread', this.model.get('thread'));
        view = new ResponseCommentView({
          model: comment
        });
        view.render();
        this.$el.find(".comments .new-comment").before(view.el);
        return view;
      };

      ThreadResponseView.prototype.submitComment = function(event) {
        var body, comment, url, view;
        event.preventDefault();
        url = this.model.urlFor('reply');
        body = this.getWmdContent("comment-body");
        if (!body.trim().length) {
          return;
        }
        this.setWmdContent("comment-body", "");
        comment = new Comment({
          body: body,
          created_at: (new Date()).toISOString(),
          username: window.user.get("username"),
          abuse_flaggers: [],
          user_id: window.user.get("id"),
          id: "unsaved"
        });
        view = this.renderComment(comment);
        this.hideEditorChrome();
        this.trigger("comment:add", comment);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: body
          },
          success: function(response, textStatus) {
            comment.set(response.content);
            return view.render();
          }
        });
      };

      ThreadResponseView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        event.preventDefault();
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm("Are you sure to delete this response? ")) {
          return;
        }
        url = this.model.urlFor('_delete');
        this.model.remove();
        this.$el.remove();
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {}
        });
      };

      ThreadResponseView.prototype.createEditView = function() {
        if (this.showView != null) {
          this.showView.undelegateEvents();
          this.showView.$el.empty();
          this.showView = null;
        }
        this.editView = new ThreadResponseEditView({
          model: this.model
        });
        this.editView.bind("response:update", this.update);
        return this.editView.bind("response:cancel_edit", this.cancelEdit);
      };

      ThreadResponseView.prototype.renderSubView = function(view) {
        view.setElement(this.$('.discussion-response'));
        view.render();
        return view.delegateEvents();
      };

      ThreadResponseView.prototype.renderEditView = function() {
        return this.renderSubView(this.editView);
      };

      ThreadResponseView.prototype.hideCommentForm = function() {
        return this.$('.comment-form').closest('li').hide();
      };

      ThreadResponseView.prototype.showCommentForm = function() {
        return this.$('.comment-form').closest('li').show();
      };

      ThreadResponseView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        this.showView = new ThreadResponseShowView({
          model: this.model
        });
        this.showView.bind("response:_delete", this._delete);
        return this.showView.bind("response:edit", this.edit);
      };

      ThreadResponseView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      ThreadResponseView.prototype.cancelEdit = function(event) {
        event.preventDefault();
        this.createShowView();
        this.renderShowView();
        return this.showCommentForm();
      };

      ThreadResponseView.prototype.edit = function(event) {
        this.createEditView();
        this.renderEditView();
        return this.hideCommentForm();
      };

      ThreadResponseView.prototype.update = function(event) {
        var newBody, url,
          _this = this;
        newBody = this.editView.$(".edit-post-body textarea").val();
        url = DiscussionUtil.urlFor('update_comment', this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-post-form-errors")),
          success: function(response, textStatus) {
            _this.editView.$(".edit-post-body textarea").val("").attr("prev-text", "");
            _this.editView.$(".wmd-preview p").html("");
            _this.model.set({
              body: newBody
            });
            _this.createShowView();
            _this.renderShowView();
            return _this.showCommentForm();
          }
        });
      };

      return ThreadResponseView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.FeedbackForm = (function() {
    function FeedbackForm() {
      $('#feedback_button').click(function() {
        var data;
        data = {
          subject: $('#feedback_subject').val(),
          message: $('#feedback_message').val(),
          url: window.location.href
        };
        return $.postWithPrefix('/send_feedback', data, function() {
          return $('#feedback_div').html('Feedback submitted. Thank you');
        }, 'json');
      });
    }

    return FeedbackForm;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var Analytics, GradeDistributionDisplay, ProfileDistributionWidget, plantTimeout, std_ajax_err;

  plantTimeout = function() {
    return window.InstructorDashboard.util.plantTimeout.apply(this, arguments);
  };

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  ProfileDistributionWidget = (function() {
    function ProfileDistributionWidget(_arg) {
      var template_html, template_params;
      this.$container = _arg.$container, this.feature = _arg.feature, this.title = _arg.title, this.endpoint = _arg.endpoint;
      template_params = {
        title: this.title,
        feature: this.feature,
        endpoint: this.endpoint
      };
      template_html = $("#profile-distribution-widget-template").text();
      this.$container.html(Mustache.render(template_html, template_params));
    }

    ProfileDistributionWidget.prototype.reset_display = function() {
      this.$container.find('.display-errors').empty();
      this.$container.find('.display-text').empty();
      this.$container.find('.display-graph').empty();
      return this.$container.find('.display-table').empty();
    };

    ProfileDistributionWidget.prototype.show_error = function(msg) {
      return this.$container.find('.display-errors').text(msg);
    };

    ProfileDistributionWidget.prototype.load = function() {
      var _this = this;
      this.reset_display();
      return this.get_profile_distributions(this.feature, {
        error: std_ajax_err(function() {
          return _this.show_error("Error fetching distribution.");
        }),
        success: function(data) {
          var columns, feature_res, graph_data, graph_placeholder, grid, grid_data, options, table_placeholder;
          feature_res = data.feature_results;
          if (feature_res.type === 'EASY_CHOICE') {
            options = {
              enableCellNavigation: true,
              enableColumnReorder: false,
              forceFitColumns: true
            };
            columns = [
              {
                id: _this.feature,
                field: _this.feature,
                name: data.feature_display_names[_this.feature]
              }, {
                id: 'count',
                field: 'count',
                name: 'Count'
              }
            ];
            grid_data = _.map(feature_res.data, function(value, key) {
              var datapoint;
              datapoint = {};
              datapoint[_this.feature] = feature_res.choices_display_names[key];
              datapoint['count'] = value;
              return datapoint;
            });
            table_placeholder = $('<div/>', {
              "class": 'slickgrid'
            });
            _this.$container.find('.display-table').append(table_placeholder);
            return grid = new Slick.Grid(table_placeholder, grid_data, columns, options);
          } else if (feature_res.feature === 'year_of_birth') {
            graph_placeholder = $('<div/>', {
              "class": 'graph-placeholder'
            });
            _this.$container.find('.display-graph').append(graph_placeholder);
            graph_data = _.map(feature_res.data, function(value, key) {
              return [parseInt(key), value];
            });
            return $.plot(graph_placeholder, [
              {
                data: graph_data
              }
            ]);
          } else {
            console.warn("unable to show distribution " + feature_res.type);
            return _this.show_error('Unavailable metric display.');
          }
        }
      });
    };

    ProfileDistributionWidget.prototype.get_profile_distributions = function(feature, handler) {
      var settings;
      settings = {
        dataType: 'json',
        url: this.endpoint,
        data: {
          feature: feature
        }
      };
      if (typeof handler === 'function') {
        _.extend(settings, {
          success: handler
        });
      } else {
        _.extend(settings, handler);
      }
      return $.ajax(settings);
    };

    return ProfileDistributionWidget;

  })();

  GradeDistributionDisplay = (function() {
    function GradeDistributionDisplay(_arg) {
      var template_html, template_params;
      this.$container = _arg.$container, this.endpoint = _arg.endpoint;
      template_params = {};
      template_html = $('#grade-distributions-widget-template').text();
      this.$container.html(Mustache.render(template_html, template_params));
      this.$problem_selector = this.$container.find('.problem-selector');
    }

    GradeDistributionDisplay.prototype.reset_display = function() {
      this.$container.find('.display-errors').empty();
      this.$container.find('.display-text').empty();
      return this.$container.find('.display-graph').empty();
    };

    GradeDistributionDisplay.prototype.show_error = function(msg) {
      return this.$container.find('.display-errors').text(msg);
    };

    GradeDistributionDisplay.prototype.load = function() {
      var _this = this;
      return this.get_grade_distributions({
        error: std_ajax_err(function() {
          return _this.show_error("Error fetching grade distributions.");
        }),
        success: function(data) {
          var I4X_PROBLEM, grade_info, label, module_id, _i, _len, _ref, _ref1, _ref2;
          _this.$container.find('.last-updated').text("Last Updated: " + data.time);
          _this.$problem_selector.empty();
          _ref = data.data;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _ref1 = _ref[_i], module_id = _ref1.module_id, grade_info = _ref1.grade_info;
            I4X_PROBLEM = /i4x:\/\/.*\/.*\/problem\/(.*)/;
            label = (_ref2 = I4X_PROBLEM.exec(module_id)) != null ? _ref2[1] : void 0;
            if (label == null) {
              label = module_id;
            }
            _this.$problem_selector.append($('<option/>', {
              text: label,
              data: {
                module_id: module_id,
                grade_info: grade_info
              }
            }));
          }
          _this.$problem_selector.change(function() {
            var $opt;
            $opt = _this.$problem_selector.children('option:selected');
            if (!($opt.length > 0)) {
              return;
            }
            _this.reset_display();
            return _this.render_distribution({
              module_id: $opt.data('module_id'),
              grade_info: $opt.data('grade_info')
            });
          });
          return _this.$problem_selector.change();
        }
      });
    };

    GradeDistributionDisplay.prototype.render_distribution = function(_arg) {
      var $display_graph, grade_info, graph_data, graph_placeholder, module_id, total_students;
      module_id = _arg.module_id, grade_info = _arg.grade_info;
      $display_graph = this.$container.find('.display-graph');
      graph_data = grade_info.map(function(_arg1) {
        var grade, max_grade, num_students;
        grade = _arg1.grade, max_grade = _arg1.max_grade, num_students = _arg1.num_students;
        return [grade, num_students];
      });
      total_students = _.reduce([0].concat(grade_info), function(accum, _arg1) {
        var grade, max_grade, num_students;
        grade = _arg1.grade, max_grade = _arg1.max_grade, num_students = _arg1.num_students;
        return accum + num_students;
      });
      this.$container.find('.display-text').text("" + total_students + " students scored.");
      graph_placeholder = $('<div/>', {
        "class": 'graph-placeholder'
      });
      $display_graph.append(graph_placeholder);
      graph_data = graph_data;
      return $.plot(graph_placeholder, [
        {
          data: graph_data,
          bars: {
            show: true
          },
          color: '#1d9dd9'
        }
      ]);
    };

    GradeDistributionDisplay.prototype.get_grade_distributions = function(handler) {
      var settings;
      settings = {
        dataType: 'json',
        url: this.endpoint,
        data: {
          aname: 'ProblemGradeDistribution'
        }
      };
      if (typeof handler === 'function') {
        _.extend(settings, {
          success: handler
        });
      } else {
        _.extend(settings, handler);
      }
      return $.ajax(settings);
    };

    return GradeDistributionDisplay;

  })();

  Analytics = (function() {
    function Analytics($section) {
      var _this = this;
      this.$section = $section;
      this.$section.data('wrapper', this);
      this.$pd_containers = this.$section.find('.profile-distribution-widget-container');
      this.$gd_containers = this.$section.find('.grade-distributions-widget-container');
      this.pdws = _.map(this.$pd_containers, function(container) {
        return new ProfileDistributionWidget({
          $container: $(container),
          feature: $(container).data('feature'),
          title: $(container).data('title'),
          endpoint: $(container).data('endpoint')
        });
      });
      this.gdws = _.map(this.$gd_containers, function(container) {
        return new GradeDistributionDisplay({
          $container: $(container),
          endpoint: $(container).data('endpoint')
        });
      });
    }

    Analytics.prototype.refresh = function() {
      var gdw, pdw, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.pdws;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pdw = _ref[_i];
        pdw.load();
      }
      _ref1 = this.gdws;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        gdw = _ref1[_j];
        _results.push(gdw.load());
      }
      return _results;
    };

    Analytics.prototype.onClickTitle = function() {
      return this.refresh();
    };

    return Analytics;

  })();

  if (typeof _ !== "undefined" && _ !== null) {
    _.defaults(window, {
      InstructorDashboard: {}
    });
    _.defaults(window.InstructorDashboard, {
      sections: {}
    });
    _.defaults(window.InstructorDashboard.sections, {
      Analytics: Analytics
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var CourseInfo, plantTimeout, std_ajax_err;

  plantTimeout = function() {
    return window.InstructorDashboard.util.plantTimeout.apply(this, arguments);
  };

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  CourseInfo = (function() {
    function CourseInfo($section) {
      var _this = this;
      this.$section = $section;
      this.$course_errors_wrapper = this.$section.find('.course-errors-wrapper');
      if (this.$course_errors_wrapper.length) {
        this.$course_error_toggle = this.$course_errors_wrapper.find('.toggle-wrapper');
        this.$course_error_toggle_text = this.$course_error_toggle.find('h2');
        this.$course_error_visibility_wrapper = this.$course_errors_wrapper.find('.course-errors-visibility-wrapper');
        this.$course_errors = this.$course_errors_wrapper.find('.course-error');
        this.$course_error_toggle_text.text(this.$course_error_toggle_text.text() + (" (" + this.$course_errors.length + ")"));
        this.$course_error_toggle.click(function(e) {
          e.preventDefault();
          if (_this.$course_errors_wrapper.hasClass('open')) {
            return _this.$course_errors_wrapper.removeClass('open');
          } else {
            return _this.$course_errors_wrapper.addClass('open');
          }
        });
      }
    }

    return CourseInfo;

  })();

  if (typeof _ !== "undefined" && _ !== null) {
    _.defaults(window, {
      InstructorDashboard: {}
    });
    _.defaults(window.InstructorDashboard, {
      sections: {}
    });
    _.defaults(window.InstructorDashboard.sections, {
      CourseInfo: CourseInfo
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var DataDownload, plantTimeout, std_ajax_err;

  plantTimeout = function() {
    return window.InstructorDashboard.util.plantTimeout.apply(this, arguments);
  };

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  DataDownload = (function() {
    function DataDownload($section) {
      var _this = this;
      this.$section = $section;
      this.$display = this.$section.find('.data-display');
      this.$display_text = this.$display.find('.data-display-text');
      this.$display_table = this.$display.find('.data-display-table');
      this.$request_response_error = this.$display.find('.request-response-error');
      this.$list_studs_btn = this.$section.find("input[name='list-profiles']'");
      this.$grade_config_btn = this.$section.find("input[name='dump-gradeconf']'");
      this.$list_studs_btn.click(function(e) {
        var url;
        url = _this.$list_studs_btn.data('endpoint');
        if ($(e.target).data('csv')) {
          url += '/csv';
          return location.href = url;
        } else {
          _this.clear_display();
          _this.$display_table.text('Loading...');
          return $.ajax({
            dataType: 'json',
            url: url,
            error: std_ajax_err(function() {
              _this.clear_display();
              return _this.$request_response_error.text("Error getting student list.");
            }),
            success: function(data) {
              var $table_placeholder, columns, feature, grid, grid_data, options;
              _this.clear_display();
              options = {
                enableCellNavigation: true,
                enableColumnReorder: false,
                forceFitColumns: true
              };
              columns = (function() {
                var _i, _len, _ref, _results;
                _ref = data.queried_features;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  feature = _ref[_i];
                  _results.push({
                    id: feature,
                    field: feature,
                    name: feature
                  });
                }
                return _results;
              })();
              grid_data = data.students;
              $table_placeholder = $('<div/>', {
                "class": 'slickgrid'
              });
              _this.$display_table.append($table_placeholder);
              return grid = new Slick.Grid($table_placeholder, grid_data, columns, options);
            }
          });
        }
      });
      this.$grade_config_btn.click(function(e) {
        var url;
        url = _this.$grade_config_btn.data('endpoint');
        return $.ajax({
          dataType: 'json',
          url: url,
          error: std_ajax_err(function() {
            _this.clear_display();
            return _this.$request_response_error.text("Error getting grading configuration.");
          }),
          success: function(data) {
            _this.clear_display();
            return _this.$display_text.html(data['grading_config_summary']);
          }
        });
      });
    }

    DataDownload.prototype.clear_display = function() {
      this.$display_text.empty();
      this.$display_table.empty();
      return this.$request_response_error.empty();
    };

    return DataDownload;

  })();

  if (typeof _ !== "undefined" && _ !== null) {
    _.defaults(window, {
      InstructorDashboard: {}
    });
    _.defaults(window.InstructorDashboard, {
      sections: {}
    });
    _.defaults(window.InstructorDashboard.sections, {
      DataDownload: DataDownload
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var $active_section, CSS_ACTIVE_SECTION, CSS_IDASH_SECTION, CSS_INSTRUCTOR_CONTENT, CSS_INSTRUCTOR_NAV, HASH_LINK_PREFIX, SafeWaiter, plantTimeout, sections_have_loaded, setup_instructor_dashboard, setup_instructor_dashboard_sections, std_ajax_err,
    _this = this;

  plantTimeout = function() {
    return window.InstructorDashboard.util.plantTimeout.apply(this, arguments);
  };

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  CSS_INSTRUCTOR_CONTENT = 'instructor-dashboard-content-2';

  CSS_ACTIVE_SECTION = 'active-section';

  CSS_IDASH_SECTION = 'idash-section';

  CSS_INSTRUCTOR_NAV = 'instructor-nav';

  HASH_LINK_PREFIX = '#view-';

  $active_section = null;

  SafeWaiter = (function() {
    function SafeWaiter() {
      this.after_handlers = [];
      this.waitFor_handlers = [];
      this.fired = false;
    }

    SafeWaiter.prototype.after = function(f) {
      if (this.fired) {
        return f();
      } else {
        return this.after_handlers.push(f);
      }
    };

    SafeWaiter.prototype.waitFor = function(f) {
      var _this = this;
      if (this.fired) {
        return;
      }
      this.waitFor_handlers.push(f);
      return function() {
        _this.waitFor_handlers = _this.waitFor_handlers.filter(function(g) {
          return g !== f;
        });
        if (_this.waitFor_handlers.length === 0) {
          _this.fired = true;
          _this.after_handlers.map(function(cb) {
            return plantTimeout(0, cb);
          });
        }
        return f.apply(_this, arguments);
      };
    };

    return SafeWaiter;

  })();

  sections_have_loaded = new SafeWaiter;

  $(function() {
    var instructor_dashboard_content;
    instructor_dashboard_content = $("." + CSS_INSTRUCTOR_CONTENT);
    if (instructor_dashboard_content.length > 0) {
      setup_instructor_dashboard(instructor_dashboard_content);
      return setup_instructor_dashboard_sections(instructor_dashboard_content);
    }
  });

  setup_instructor_dashboard = function(idash_content) {
    var $links, click_first_link, link, rmatch, section_name;
    $links = idash_content.find("." + CSS_INSTRUCTOR_NAV).find('a');
    $links.each(function(i, link) {
      return $(link).click(function(e) {
        var $section, section_name, _ref;
        e.preventDefault();
        idash_content.find("." + CSS_INSTRUCTOR_NAV).children().removeClass(CSS_ACTIVE_SECTION);
        idash_content.find("." + CSS_IDASH_SECTION).removeClass(CSS_ACTIVE_SECTION);
        section_name = $(this).data('section');
        $section = idash_content.find("#" + section_name);
        $(this).addClass(CSS_ACTIVE_SECTION);
        $section.addClass(CSS_ACTIVE_SECTION);
        analytics.pageview("instructor_section:" + section_name);
        location.hash = "" + HASH_LINK_PREFIX + section_name;
        sections_have_loaded.after(function() {
          var _ref;
          return (_ref = $section.data('wrapper')) != null ? typeof _ref.onClickTitle === "function" ? _ref.onClickTitle() : void 0 : void 0;
        });
        if (!$section.is($active_section)) {
          if ($active_section != null) {
            if ((_ref = $active_section.data('wrapper')) != null) {
              if (typeof _ref.onExit === "function") {
                _ref.onExit();
              }
            }
          }
        }
        return $active_section = $section;
      });
    });
    click_first_link = function() {
      var link;
      link = $links.eq(0);
      return link.click();
    };
    if ((new RegExp("^" + HASH_LINK_PREFIX)).test(location.hash)) {
      rmatch = (new RegExp("^" + HASH_LINK_PREFIX + "(.*)")).exec(location.hash);
      section_name = rmatch[1];
      link = $links.filter("[data-section='" + section_name + "']");
      if (link.length === 1) {
        return link.click();
      } else {
        return click_first_link();
      }
    } else {
      return click_first_link();
    }
  };

  setup_instructor_dashboard_sections = function(idash_content) {
    var sections_to_initialize;
    sections_to_initialize = [
      {
        constructor: window.InstructorDashboard.sections.CourseInfo,
        $element: idash_content.find("." + CSS_IDASH_SECTION + "#course_info")
      }, {
        constructor: window.InstructorDashboard.sections.DataDownload,
        $element: idash_content.find("." + CSS_IDASH_SECTION + "#data_download")
      }, {
        constructor: window.InstructorDashboard.sections.Membership,
        $element: idash_content.find("." + CSS_IDASH_SECTION + "#membership")
      }, {
        constructor: window.InstructorDashboard.sections.StudentAdmin,
        $element: idash_content.find("." + CSS_IDASH_SECTION + "#student_admin")
      }, {
        constructor: window.InstructorDashboard.sections.Analytics,
        $element: idash_content.find("." + CSS_IDASH_SECTION + "#analytics")
      }
    ];
    return sections_to_initialize.map(function(_arg) {
      var $element, constructor;
      constructor = _arg.constructor, $element = _arg.$element;
      return plantTimeout(0, sections_have_loaded.waitFor(function() {
        return new constructor($element);
      }));
    });
  };

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var AuthList, AuthListWidget, BatchEnrollment, MemberListWidget, Membership, plantTimeout, std_ajax_err,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  plantTimeout = function() {
    return window.InstructorDashboard.util.plantTimeout.apply(this, arguments);
  };

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  MemberListWidget = (function() {
    function MemberListWidget($container, params) {
      var template_html,
        _this = this;
      this.$container = $container;
      if (params == null) {
        params = {};
      }
      params = _.defaults(params, {
        title: "Member List",
        info: "Use this list to manage members.",
        labels: ["field1", "field2", "field3"],
        add_placeholder: "Enter name",
        add_btn_label: "Add Member",
        add_handler: function(input) {}
      });
      template_html = $("#member-list-widget-template").html();
      this.$container.html(Mustache.render(template_html, params));
      this.$('.info-badge').click(function() {
        return _this.toggle_info();
      });
      this.$('input[type="button"].add').click(function() {
        return typeof params.add_handler === "function" ? params.add_handler(_this.$('.add-field').val()) : void 0;
      });
    }

    MemberListWidget.prototype.show_info = function() {
      this.$('.info').show();
      return this.$('.member-list').hide();
    };

    MemberListWidget.prototype.show_list = function() {
      this.$('.info').hide();
      return this.$('.member-list').show();
    };

    MemberListWidget.prototype.toggle_info = function() {
      this.$('.info').toggle();
      return this.$('.member-list').toggle();
    };

    MemberListWidget.prototype.clear_input = function() {
      return this.$('.add-field').val('');
    };

    MemberListWidget.prototype.clear_rows = function() {
      return this.$('table tbody').empty();
    };

    MemberListWidget.prototype.add_row = function(row_array) {
      var $tbody, $td, $tr, item, _i, _len;
      $tbody = this.$('table tbody');
      $tr = $('<tr>');
      for (_i = 0, _len = row_array.length; _i < _len; _i++) {
        item = row_array[_i];
        $td = $('<td>');
        if (item instanceof jQuery) {
          $td.append(item);
        } else {
          $td.text(item);
        }
        $tr.append($td);
      }
      return $tbody.append($tr);
    };

    MemberListWidget.prototype.$ = function(selector) {
      var s;
      if (this.debug != null) {
        s = this.$container.find(selector);
        if ((s != null ? s.length : void 0) !== 1) {
          console.warn("local selector '" + selector + "' found (" + s.length + ") results");
        }
        return s;
      } else {
        return this.$container.find(selector);
      }
    };

    return MemberListWidget;

  })();

  AuthListWidget = (function(_super) {
    __extends(AuthListWidget, _super);

    function AuthListWidget($container, rolename, $error_section) {
      var _this = this;
      this.rolename = rolename;
      this.$error_section = $error_section;
      AuthListWidget.__super__.constructor.call(this, $container, {
        title: $container.data('display-name'),
        info: $container.data('info-text'),
        labels: ["username", "email", "revoke access"],
        add_placeholder: "Enter email",
        add_btn_label: $container.data('add-button-label'),
        add_handler: function(input) {
          return _this.add_handler(input);
        }
      });
      this.debug = true;
      this.list_endpoint = $container.data('list-endpoint');
      this.modify_endpoint = $container.data('modify-endpoint');
      if (this.rolename == null) {
        throw "AuthListWidget missing @rolename";
      }
      this.reload_list();
    }

    AuthListWidget.prototype.re_view = function() {
      this.clear_errors();
      this.clear_input();
      this.reload_list();
      this.$('.info').hide();
      return this.$('.member-list').show();
    };

    AuthListWidget.prototype.add_handler = function(input) {
      var _this = this;
      if ((input != null) && input !== '') {
        return this.modify_member_access(input, 'allow', function(error) {
          if (error !== null) {
            return _this.show_errors(error);
          }
          _this.clear_errors();
          _this.clear_input();
          return _this.reload_list();
        });
      } else {
        return this.show_errors("Enter an email.");
      }
    };

    AuthListWidget.prototype.reload_list = function() {
      var _this = this;
      return this.get_member_list(function(error, member_list) {
        if (error !== null) {
          return _this.show_errors(error);
        }
        _this.clear_rows();
        _this.show_info();
        return _.each(member_list, function(member) {
          var $revoke_btn;
          $revoke_btn = $('<div/>', {
            "class": 'revoke',
            click: function() {
              return _this.modify_member_access(member.email, 'revoke', function(error) {
                if (error !== null) {
                  return _this.show_errors(error);
                }
                _this.clear_errors();
                return _this.reload_list();
              });
            }
          });
          _this.add_row([member.username, member.email, $revoke_btn]);
          return _this.show_list();
        });
      });
    };

    AuthListWidget.prototype.clear_errors = function() {
      var _ref;
      return (_ref = this.$error_section) != null ? _ref.text('') : void 0;
    };

    AuthListWidget.prototype.show_errors = function(msg) {
      var _ref;
      return (_ref = this.$error_section) != null ? _ref.text(msg) : void 0;
    };

    AuthListWidget.prototype.get_member_list = function(cb) {
      var _this = this;
      return $.ajax({
        dataType: 'json',
        url: this.list_endpoint,
        data: {
          rolename: this.rolename
        },
        success: function(data) {
          return typeof cb === "function" ? cb(null, data[_this.rolename]) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb("Error fetching list for role '" + _this.rolename + "'") : void 0;
        })
      });
    };

    AuthListWidget.prototype.modify_member_access = function(email, action, cb) {
      var _this = this;
      return $.ajax({
        dataType: 'json',
        url: this.modify_endpoint,
        data: {
          email: email,
          rolename: this.rolename,
          action: action
        },
        success: function(data) {
          return typeof cb === "function" ? cb(null, data) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb("Error changing user's permissions.") : void 0;
        })
      });
    };

    return AuthListWidget;

  })(MemberListWidget);

  BatchEnrollment = (function() {
    function BatchEnrollment($container) {
      var _this = this;
      this.$container = $container;
      this.$emails_input = this.$container.find("textarea[name='student-emails']'");
      this.$btn_enroll = this.$container.find("input[name='enroll']'");
      this.$btn_unenroll = this.$container.find("input[name='unenroll']'");
      this.$checkbox_autoenroll = this.$container.find("input[name='auto-enroll']'");
      this.$task_response = this.$container.find(".request-response");
      this.$request_response_error = this.$container.find(".request-response-error");
      this.$btn_enroll.click(function() {
        var send_data;
        send_data = {
          action: 'enroll',
          emails: _this.$emails_input.val(),
          auto_enroll: _this.$checkbox_autoenroll.is(':checked')
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_enroll.data('endpoint'),
          data: send_data,
          success: function(data) {
            return _this.display_response(data);
          },
          error: std_ajax_err(function() {
            return _this.fail_with_error("Error enrolling/unenrolling students.");
          })
        });
      });
      this.$btn_unenroll.click(function() {
        var send_data;
        send_data = {
          action: 'unenroll',
          emails: _this.$emails_input.val(),
          auto_enroll: _this.$checkbox_autoenroll.is(':checked')
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_unenroll.data('endpoint'),
          data: send_data,
          success: function(data) {
            return _this.display_response(data);
          },
          error: std_ajax_err(function() {
            return _this.fail_with_error("Error enrolling/unenrolling students.");
          })
        });
      });
    }

    BatchEnrollment.prototype.fail_with_error = function(msg) {
      console.warn(msg);
      this.$task_response.empty();
      this.$request_response_error.empty();
      return this.$request_response_error.text(msg);
    };

    BatchEnrollment.prototype.display_response = function(data_from_server) {
      var allowed, autoenrolled, enrolled, errors, errors_label, notenrolled, render_list, sr, student_results, _i, _j, _len, _len1, _ref,
        _this = this;
      this.$task_response.empty();
      this.$request_response_error.empty();
      errors = [];
      enrolled = [];
      allowed = [];
      autoenrolled = [];
      notenrolled = [];
      _ref = data_from_server.results;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        student_results = _ref[_i];
        if (student_results.error) {
          errors.push(student_results);
        } else if (student_results.after.enrollment) {
          enrolled.push(student_results);
        } else if (student_results.after.allowed) {
          if (student_results.after.auto_enroll) {
            autoenrolled.push(student_results);
          } else {
            allowed.push(student_results);
          }
        } else if (!student_results.after.enrollment) {
          notenrolled.push(student_results);
        } else {
          console.warn('student results not reported to user');
          console.warn(student_results);
        }
      }
      render_list = function(label, emails) {
        var email, email_list, task_res_section, _j, _len1;
        task_res_section = $('<div/>', {
          "class": 'request-res-section'
        });
        task_res_section.append($('<h3/>', {
          text: label
        }));
        email_list = $('<ul/>');
        task_res_section.append(email_list);
        for (_j = 0, _len1 = emails.length; _j < _len1; _j++) {
          email = emails[_j];
          email_list.append($('<li/>', {
            text: email
          }));
        }
        return _this.$task_response.append(task_res_section);
      };
      if (errors.length) {
        errors_label = (function() {
          if (data_from_server.action === 'enroll') {
            return "There was an error enrolling:";
          } else if (data_from_server.action === 'unenroll') {
            return "There was an error unenrolling:";
          } else {
            console.warn("unknown action from server '" + data_from_server.action + "'");
            return "There was an error processing:";
          }
        })();
        for (_j = 0, _len1 = errors.length; _j < _len1; _j++) {
          student_results = errors[_j];
          render_list(errors_label, (function() {
            var _k, _len2, _results;
            _results = [];
            for (_k = 0, _len2 = errors.length; _k < _len2; _k++) {
              sr = errors[_k];
              _results.push(sr.email);
            }
            return _results;
          })());
        }
      }
      if (enrolled.length) {
        render_list("Students Enrolled:", (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = enrolled.length; _k < _len2; _k++) {
            sr = enrolled[_k];
            _results.push(sr.email);
          }
          return _results;
        })());
      }
      if (allowed.length) {
        render_list("These students will be allowed to enroll once they register:", (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = allowed.length; _k < _len2; _k++) {
            sr = allowed[_k];
            _results.push(sr.email);
          }
          return _results;
        })());
      }
      if (autoenrolled.length) {
        render_list("These students will be enrolled once they register:", (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = autoenrolled.length; _k < _len2; _k++) {
            sr = autoenrolled[_k];
            _results.push(sr.email);
          }
          return _results;
        })());
      }
      if (notenrolled.length) {
        return render_list("These students are now not enrolled:", (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = notenrolled.length; _k < _len2; _k++) {
            sr = notenrolled[_k];
            _results.push(sr.email);
          }
          return _results;
        })());
      }
    };

    return BatchEnrollment;

  })();

  AuthList = (function() {
    function AuthList($container, rolename) {
      var _this = this;
      this.$container = $container;
      this.rolename = rolename;
      this.$display_table = this.$container.find('.auth-list-table');
      this.$request_response_error = this.$container.find('.request-response-error');
      this.$add_section = this.$container.find('.auth-list-add');
      this.$allow_field = this.$add_section.find("input[name='email']");
      this.$allow_button = this.$add_section.find("input[name='allow']");
      this.$allow_button.click(function() {
        _this.access_change(_this.$allow_field.val(), 'allow', function() {
          return _this.reload_auth_list();
        });
        return _this.$allow_field.val('');
      });
      this.reload_auth_list();
    }

    AuthList.prototype.reload_auth_list = function() {
      var load_auth_list,
        _this = this;
      load_auth_list = function(data) {
        var $table_placeholder, WHICH_CELL_IS_REVOKE, columns, grid, options, table_data;
        _this.$request_response_error.empty();
        _this.$display_table.empty();
        options = {
          enableCellNavigation: true,
          enableColumnReorder: false,
          forceFitColumns: true
        };
        WHICH_CELL_IS_REVOKE = 3;
        columns = [
          {
            id: 'username',
            field: 'username',
            name: 'Username'
          }, {
            id: 'email',
            field: 'email',
            name: 'Email'
          }, {
            id: 'first_name',
            field: 'first_name',
            name: 'First Name'
          }, {
            id: 'revoke',
            field: 'revoke',
            name: 'Revoke',
            formatter: function(row, cell, value, columnDef, dataContext) {
              return "<span class='revoke-link'>Revoke Access</span>";
            }
          }
        ];
        table_data = data[_this.rolename];
        $table_placeholder = $('<div/>', {
          "class": 'slickgrid'
        });
        _this.$display_table.append($table_placeholder);
        grid = new Slick.Grid($table_placeholder, table_data, columns, options);
        return grid.onClick.subscribe(function(e, args) {
          var item;
          item = args.grid.getDataItem(args.row);
          if (args.cell === WHICH_CELL_IS_REVOKE) {
            return _this.access_change(item.email, 'revoke', function() {
              return _this.reload_auth_list();
            });
          }
        });
      };
      return $.ajax({
        dataType: 'json',
        url: this.$display_table.data('endpoint'),
        data: {
          rolename: this.rolename
        },
        success: load_auth_list,
        error: std_ajax_err(function() {
          return _this.$request_response_error.text("Error fetching list for '" + _this.rolename + "'");
        })
      });
    };

    AuthList.prototype.refresh = function() {
      this.$display_table.empty();
      return this.reload_auth_list();
    };

    AuthList.prototype.access_change = function(email, action, cb) {
      var _this = this;
      return $.ajax({
        dataType: 'json',
        url: this.$add_section.data('endpoint'),
        data: {
          email: email,
          rolename: this.rolename,
          action: action
        },
        success: function(data) {
          return typeof cb === "function" ? cb(data) : void 0;
        },
        error: std_ajax_err(function() {
          return _this.$request_response_error.text("Error changing user's permissions.");
        })
      });
    };

    return AuthList;

  })();

  Membership = (function() {
    function Membership($section) {
      var auth_list, _i, _len, _ref,
        _this = this;
      this.$section = $section;
      this.$section.data('wrapper', this);
      plantTimeout(0, function() {
        return new BatchEnrollment(_this.$section.find('.batch-enrollment'));
      });
      this.$list_selector = this.$section.find('select#member-lists-selector');
      this.$auth_list_containers = this.$section.find('.auth-list-container');
      this.$auth_list_errors = this.$section.find('.member-lists-management .request-response-error');
      this.auth_lists = _.map(this.$auth_list_containers, function(auth_list_container) {
        var rolename;
        rolename = $(auth_list_container).data('rolename');
        return new AuthListWidget($(auth_list_container), rolename, _this.$auth_list_errors);
      });
      this.$list_selector.empty();
      _ref = this.auth_lists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        auth_list = _ref[_i];
        this.$list_selector.append($('<option/>', {
          text: auth_list.$container.data('display-name'),
          data: {
            auth_list: auth_list
          }
        }));
      }
      if (this.auth_lists.length === 0) {
        this.$list_selector.hide();
      }
      this.$list_selector.change(function() {
        var $opt, _j, _len1, _ref1;
        $opt = _this.$list_selector.children('option:selected');
        if (!($opt.length > 0)) {
          return;
        }
        _ref1 = _this.auth_lists;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          auth_list = _ref1[_j];
          auth_list.$container.removeClass('active');
        }
        auth_list = $opt.data('auth_list');
        auth_list.$container.addClass('active');
        return auth_list.re_view();
      });
      this.$list_selector.change();
    }

    Membership.prototype.onClickTitle = function() {};

    return Membership;

  })();

  if (typeof _ !== "undefined" && _ !== null) {
    _.defaults(window, {
      InstructorDashboard: {}
    });
    _.defaults(window.InstructorDashboard, {
      sections: {}
    });
    _.defaults(window.InstructorDashboard.sections, {
      Membership: Membership
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var StudentAdmin, confirm_then, create_task_list_table, find_and_assert, load_IntervalManager, plantInterval, plantTimeout, std_ajax_err,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  plantTimeout = function() {
    return window.InstructorDashboard.util.plantTimeout.apply(this, arguments);
  };

  plantInterval = function() {
    return window.InstructorDashboard.util.plantInterval.apply(this, arguments);
  };

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  load_IntervalManager = function() {
    return window.InstructorDashboard.util.IntervalManager;
  };

  confirm_then = function(_arg) {
    var cancel, msg, ok;
    msg = _arg.msg, ok = _arg.ok, cancel = _arg.cancel;
    if (window.confirm(msg)) {
      return typeof ok === "function" ? ok() : void 0;
    } else {
      return typeof cancel === "function" ? cancel() : void 0;
    }
  };

  find_and_assert = function($root, selector) {
    var item;
    item = $root.find(selector);
    if (item.length !== 1) {
      console.error("element selection failed for '" + selector + "' resulted in length " + item.length);
      throw "Failed Element Selection";
    } else {
      return item;
    }
  };

  create_task_list_table = function($table_tasks, tasks_data) {
    var $table_placeholder, columns, grid, options, table_data;
    $table_tasks.empty();
    options = {
      enableCellNavigation: true,
      enableColumnReorder: false,
      autoHeight: true,
      rowHeight: 60,
      forceFitColumns: true
    };
    columns = [
      {
        id: 'task_type',
        field: 'task_type',
        name: 'Task Type'
      }, {
        id: 'requester',
        field: 'requester',
        name: 'Requester',
        width: 30
      }, {
        id: 'task_input',
        field: 'task_input',
        name: 'Input'
      }, {
        id: 'task_state',
        field: 'task_state',
        name: 'State',
        width: 30
      }, {
        id: 'task_id',
        field: 'task_id',
        name: 'Task ID',
        width: 50
      }, {
        id: 'created',
        field: 'created',
        name: 'Created'
      }
    ];
    table_data = tasks_data;
    $table_placeholder = $('<div/>', {
      "class": 'slickgrid'
    });
    $table_tasks.append($table_placeholder);
    return grid = new Slick.Grid($table_placeholder, table_data, columns, options);
  };

  StudentAdmin = (function() {
    function StudentAdmin($section) {
      var TASK_LIST_POLL_INTERVAL,
        _this = this;
      this.$section = $section;
      this.reload_running_tasks_list = __bind(this.reload_running_tasks_list, this);
      this.$section.data('wrapper', this);
      this.$field_student_select = find_and_assert(this.$section, "input[name='student-select']");
      this.$progress_link = find_and_assert(this.$section, "a.progress-link");
      this.$btn_enroll = find_and_assert(this.$section, "input[name='enroll']");
      this.$btn_unenroll = find_and_assert(this.$section, "input[name='unenroll']");
      this.$field_problem_select_single = find_and_assert(this.$section, "input[name='problem-select-single']");
      this.$btn_reset_attempts_single = find_and_assert(this.$section, "input[name='reset-attempts-single']");
      this.$btn_delete_state_single = this.$section.find("input[name='delete-state-single']");
      this.$btn_rescore_problem_single = this.$section.find("input[name='rescore-problem-single']");
      this.$btn_task_history_single = this.$section.find("input[name='task-history-single']");
      this.$table_task_history_single = this.$section.find(".task-history-single-table");
      this.$field_problem_select_all = this.$section.find("input[name='problem-select-all']");
      this.$btn_reset_attempts_all = this.$section.find("input[name='reset-attempts-all']");
      this.$btn_rescore_problem_all = this.$section.find("input[name='rescore-problem-all']");
      this.$btn_task_history_all = this.$section.find("input[name='task-history-all']");
      this.$table_task_history_all = this.$section.find(".task-history-all-table");
      this.$table_running_tasks = this.$section.find(".running-tasks-table");
      this.$request_response_error_single = find_and_assert(this.$section, ".student-specific-container .request-response-error");
      this.$request_response_error_all = this.$section.find(".course-specific-container .request-response-error");
      if (this.$table_running_tasks.length > 0) {
        TASK_LIST_POLL_INTERVAL = 20000;
        this.reload_running_tasks_list();
        this.task_poller = new (load_IntervalManager())(TASK_LIST_POLL_INTERVAL, function() {
          return _this.reload_running_tasks_list();
        });
      }
      this.$progress_link.click(function(e) {
        var email;
        e.preventDefault();
        email = _this.$field_student_select.val();
        return $.ajax({
          dataType: 'json',
          url: _this.$progress_link.data('endpoint'),
          data: {
            student_email: email
          },
          success: _this.clear_errors_then(function(data) {
            return window.location = data.progress_url;
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error getting student progress url for '" + email + "'.");
          })
        });
      });
      this.$btn_enroll.click(function() {
        var send_data;
        send_data = {
          action: 'enroll',
          emails: _this.$field_student_select.val(),
          auto_enroll: false
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_enroll.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function() {
            return console.log("student " + send_data.emails + " enrolled");
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error enrolling student '" + send_data.emails + "'.");
          })
        });
      });
      this.$btn_unenroll.click(function() {
        var send_data;
        send_data = {
          action: 'unenroll',
          emails: _this.$field_student_select.val()
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_unenroll.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function() {
            return console.log("student " + send_data.emails + " unenrolled");
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error unenrolling student '" + send_data.emails + "'.");
          })
        });
      });
      this.$btn_reset_attempts_single.click(function() {
        var send_data;
        send_data = {
          student_email: _this.$field_student_select.val(),
          problem_to_reset: _this.$field_problem_select_single.val(),
          delete_module: false
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_reset_attempts_single.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function() {
            return console.log('problem attempts reset');
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error resetting problem attempts.");
          })
        });
      });
      this.$btn_delete_state_single.click(function() {
        return confirm_then({
          msg: "Delete student '" + (_this.$field_student_select.val()) + "'s state on problem '" + (_this.$field_problem_select_single.val()) + "'?",
          ok: function() {
            var send_data;
            send_data = {
              student_email: _this.$field_student_select.val(),
              problem_to_reset: _this.$field_problem_select_single.val(),
              delete_module: true
            };
            return $.ajax({
              dataType: 'json',
              url: _this.$btn_delete_state_single.data('endpoint'),
              data: send_data,
              success: _this.clear_errors_then(function() {
                return console.log('module state deleted');
              }),
              error: std_ajax_err(function() {
                return _this.$request_response_error_single.text("Error deleting problem state.");
              })
            });
          }
        });
      });
      this.$btn_rescore_problem_single.click(function() {
        var send_data;
        send_data = {
          student_email: _this.$field_student_select.val(),
          problem_to_reset: _this.$field_problem_select_single.val()
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_rescore_problem_single.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function() {
            return console.log('started rescore problem task');
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error starting a task to rescore student's problem.");
          })
        });
      });
      this.$btn_task_history_single.click(function() {
        var send_data;
        send_data = {
          student_email: _this.$field_student_select.val(),
          problem_urlname: _this.$field_problem_select_single.val()
        };
        if (!send_data.student_email) {
          return _this.$request_response_error_single.text("Enter a student email.");
        }
        if (!send_data.problem_urlname) {
          return _this.$request_response_error_single.text("Enter a problem urlname.");
        }
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_task_history_single.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function(data) {
            return create_task_list_table(_this.$table_task_history_single, data.tasks);
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error getting task history for student+problem");
          })
        });
      });
      this.$btn_reset_attempts_all.click(function() {
        return confirm_then({
          msg: "Reset attempts for all students on problem '" + (_this.$field_problem_select_all.val()) + "'?",
          ok: function() {
            var send_data;
            send_data = {
              all_students: true,
              problem_to_reset: _this.$field_problem_select_all.val()
            };
            return $.ajax({
              dataType: 'json',
              url: _this.$btn_reset_attempts_all.data('endpoint'),
              data: send_data,
              success: _this.clear_errors_then(function() {
                return console.log('started reset attempts task');
              }),
              error: std_ajax_err(function() {
                return _this.$request_response_error_all.text("Error starting a task to reset attempts for all students on this problem.");
              })
            });
          }
        });
      });
      this.$btn_rescore_problem_all.click(function() {
        return confirm_then({
          msg: "Rescore problem '" + (_this.$field_problem_select_all.val()) + "' for all students?",
          ok: function() {
            var send_data;
            send_data = {
              all_students: true,
              problem_to_reset: _this.$field_problem_select_all.val()
            };
            return $.ajax({
              dataType: 'json',
              url: _this.$btn_rescore_problem_all.data('endpoint'),
              data: send_data,
              success: _this.clear_errors_then(function() {
                return console.log('started rescore problem task');
              }),
              error: std_ajax_err(function() {
                return _this.$request_response_error_all.text("Error starting a task to rescore this problem for all students.");
              })
            });
          }
        });
      });
      this.$btn_task_history_all.click(function() {
        var send_data;
        send_data = {
          problem_urlname: _this.$field_problem_select_all.val()
        };
        if (!send_data.problem_urlname) {
          return _this.$request_response_error_all.text("Enter a problem urlname.");
        }
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_task_history_all.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function(data) {
            return create_task_list_table(_this.$table_task_history_all, data.tasks);
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_all.text("Error listing task history for this student and problem.");
          })
        });
      });
    }

    StudentAdmin.prototype.reload_running_tasks_list = function() {
      var list_endpoint,
        _this = this;
      list_endpoint = this.$table_running_tasks.data('endpoint');
      return $.ajax({
        dataType: 'json',
        url: list_endpoint,
        success: function(data) {
          return create_task_list_table(_this.$table_running_tasks, data.tasks);
        },
        error: std_ajax_err(function() {
          return console.warn("error listing all instructor tasks");
        })
      });
    };

    StudentAdmin.prototype.clear_errors_then = function(cb) {
      this.$request_response_error_single.empty();
      this.$request_response_error_all.empty();
      return function() {
        return cb != null ? cb.apply(this, arguments) : void 0;
      };
    };

    StudentAdmin.prototype.onClickTitle = function() {
      var _ref;
      return (_ref = this.task_poller) != null ? _ref.start() : void 0;
    };

    StudentAdmin.prototype.onExit = function() {
      var _ref;
      return (_ref = this.task_poller) != null ? _ref.stop() : void 0;
    };

    return StudentAdmin;

  })();

  if (typeof _ !== "undefined" && _ !== null) {
    _.defaults(window, {
      InstructorDashboard: {}
    });
    _.defaults(window.InstructorDashboard, {
      sections: {}
    });
    _.defaults(window.InstructorDashboard.sections, {
      StudentAdmin: StudentAdmin
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var IntervalManager, plantInterval, plantTimeout, std_ajax_err;

  plantTimeout = function(ms, cb) {
    return setTimeout(cb, ms);
  };

  plantInterval = function(ms, cb) {
    return setInterval(cb, ms);
  };

  std_ajax_err = function(handler) {
    return function(jqXHR, textStatus, errorThrown) {
      console.warn("ajax error\ntextStatus: " + textStatus + "\nerrorThrown: " + errorThrown);
      return handler.apply(this, arguments);
    };
  };

  IntervalManager = (function() {
    function IntervalManager(ms, fn) {
      this.ms = ms;
      this.fn = fn;
      this.intervalID = null;
    }

    IntervalManager.prototype.start = function() {
      if (this.intervalID === null) {
        return this.intervalID = setInterval(this.fn, this.ms);
      }
    };

    IntervalManager.prototype.stop = function() {
      clearInterval(this.intervalID);
      return this.intervalID = null;
    };

    return IntervalManager;

  })();

  if (typeof _ !== "undefined" && _ !== null) {
    _.defaults(window, {
      InstructorDashboard: {}
    });
    window.InstructorDashboard.util = {
      plantTimeout: plantTimeout,
      plantInterval: plantInterval,
      std_ajax_err: std_ajax_err,
      IntervalManager: IntervalManager
    };
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  if ($('.instructor-dashboard-wrapper').length === 1) {
    analytics.track("Loaded an Instructor Dashboard Page", {
      location: window.location.pathname,
      dashboard_page: $('.navbar .selectedmode').text()
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.Logger = (function() {
    var listeners;

    function Logger() {}

    listeners = {};

    Logger.log = function(event_type, data, element) {
      var callback, _i, _j, _len, _len1, _ref, _ref1;
      if (element == null) {
        element = null;
      }
      if (event_type in listeners) {
        if (null in listeners[event_type]) {
          _ref = listeners[event_type][null];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            callback = _ref[_i];
            callback(event_type, data, element);
          }
        } else if (element in listeners[event_type]) {
          _ref1 = listeners[event_type][element];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            callback = _ref1[_j];
            callback(event_type, data, element);
          }
        }
      }
      return $.postWithPrefix('/event', {
        event_type: event_type,
        event: JSON.stringify(data),
        page: window.location.href
      });
    };

    Logger.listen = function(event_type, element, callback) {
      if (!(event_type in listeners)) {
        listeners[event_type] = {};
      }
      if (!(element in listeners[event_type])) {
        return listeners[event_type][element] = [callback];
      } else {
        return listeners[event_type][element].push(callback);
      }
    };

    Logger.bind = function() {
      return window.onunload = function() {
        return $.ajaxWithPrefix({
          url: "/event",
          data: {
            event_type: 'page_close',
            event: '',
            page: window.location.href
          },
          async: false
        });
      };
    };

    return Logger;

  })();

  this.log_event = Logger.log;

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  AjaxPrefix.addAjaxPrefix(jQuery, function() {
    return Courseware.prefix;
  });

  $(function() {
    $.ajaxSetup({
      headers: {
        'X-CSRFToken': $.cookie('csrftoken')
      },
      dataType: 'json'
    });
    window.onTouchBasedDevice = function() {
      return navigator.userAgent.match(/iPhone|iPod|iPad/i);
    };
    if (onTouchBasedDevice()) {
      $('body').addClass('touch-based-device');
    }
    $('#csrfmiddlewaretoken').attr('value', $.cookie('csrftoken'));
    new Calculator;
    new FeedbackForm;
    if ($('body').hasClass('courseware')) {
      Courseware.start();
    }
    window.submit_circuit = function(circuit_id) {
      $("input.schematic").each(function(index, el) {
        return el.schematic.update_value();
      });
      schematic_value($("#schematic_" + circuit_id).attr("value"));
      return $.postWithPrefix("/save_circuit/" + circuit_id, {
        schematic: schematic_value
      }, function(data) {
        if (data.results === 'success') {
          return alert('Saved');
        }
      });
    };
    window.postJSON = function(url, data, callback) {
      return $.postWithPrefix(url, data, callback);
    };
    $('#login').click(function() {
      $('#login_form input[name="email"]').focus();
      _gaq.push(['_trackPageview', '/login']);
      return false;
    });
    $('#signup').click(function() {
      $('#signup-modal input[name="email"]').focus();
      _gaq.push(['_trackPageview', '/signup']);
      return false;
    });
    if (!Array.prototype.indexOf) {
      return Array.prototype.indexOf = function(obj, start) {
        var ele, i, _i, _len, _ref;
        if (start == null) {
          start = 0;
        }
        _ref = this.slice(start);
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          ele = _ref[i];
          if (ele === obj) {
            return i + start;
          }
        }
        return -1;
      };
    }
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var getTime;

  getTime = function() {
    return new Date().getTime();
  };

  this.MathJaxDelayRenderer = (function() {
    var bufferId, numBuffers;

    MathJaxDelayRenderer.prototype.maxDelay = 3000;

    MathJaxDelayRenderer.prototype.mathjaxRunning = false;

    MathJaxDelayRenderer.prototype.elapsedTime = 0;

    MathJaxDelayRenderer.prototype.mathjaxDelay = 0;

    MathJaxDelayRenderer.prototype.mathjaxTimeout = void 0;

    bufferId = "mathjax_delay_buffer";

    numBuffers = 0;

    function MathJaxDelayRenderer(params) {
      params = params || {};
      this.maxDelay = params["maxDelay"] || this.maxDelay;
      this.bufferId = params["bufferId"] || (bufferId + numBuffers);
      numBuffers += 1;
      this.$buffer = $("<div>").attr("id", this.bufferId).css("display", "none").appendTo($("body"));
    }

    MathJaxDelayRenderer.prototype.render = function(params) {
      var delay, elem, preprocessor, previewSetter, renderer, text,
        _this = this;
      elem = params["element"];
      previewSetter = params["previewSetter"];
      text = params["text"];
      if (text == null) {
        text = $(elem).html();
      }
      preprocessor = params["preprocessor"];
      if (params["delay"] === false) {
        if (preprocessor != null) {
          text = preprocessor(text);
        }
        $(elem).html(text);
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, $(elem).attr("id")]);
      } else {
        if (this.mathjaxTimeout) {
          window.clearTimeout(this.mathjaxTimeout);
          this.mathjaxTimeout = void 0;
        }
        delay = Math.min(this.elapsedTime + this.mathjaxDelay, this.maxDelay);
        renderer = function() {
          var curTime, prevTime;
          if (_this.mathjaxRunning) {
            return;
          }
          prevTime = getTime();
          if (preprocessor != null) {
            text = preprocessor(text);
          }
          _this.$buffer.html(text);
          curTime = getTime();
          _this.elapsedTime = curTime - prevTime;
          if (MathJax) {
            prevTime = getTime();
            _this.mathjaxRunning = true;
            return MathJax.Hub.Queue(["Typeset", MathJax.Hub, _this.$buffer.attr("id")], function() {
              _this.mathjaxRunning = false;
              curTime = getTime();
              _this.mathjaxDelay = curTime - prevTime;
              if (previewSetter) {
                return previewSetter($(_this.$buffer).html());
              } else {
                return $(elem).html($(_this.$buffer).html());
              }
            });
          } else {
            return _this.mathjaxDelay = 0;
          }
        };
        return this.mathjaxTimeout = window.setTimeout(renderer, delay);
      }
    };

    return MathJaxDelayRenderer;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.Modal = (function() {
    function Modal() {}

    Modal.prototype.initialize = function(options) {
      return this.el = options['el'];
    };

    Modal.prototype.render = function() {
      return this.el.hide();
    };

    return Modal;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var StudentNotes,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  StudentNotes = (function() {
    StudentNotes.prototype._debug = false;

    StudentNotes.prototype.targets = [];

    function StudentNotes($, el) {
      this.onInitNotes = __bind(this.onInitNotes, this);
      var events;
      if (this._debug) {
        console.log('student notes init', arguments, this);
      }
      if (!$(el).data('notes-instance')) {
        events = {
          'notes:init': this.onInitNotes
        };
        $(el).delegate('*', events);
        $(el).data('notes-instance', this);
      }
    }

    StudentNotes.prototype.onInitNotes = function(event, uri) {
      var annotator, found, store, storeConfig;
      if (uri == null) {
        uri = null;
      }
      event.stopPropagation();
      storeConfig = this.getStoreConfig(uri);
      found = this.targets.some(function(target) {
        return target === event.target;
      });
      if (found) {
        annotator = $(event.target).data('annotator');
        if (annotator) {
          store = annotator.plugins['Store'];
          $.extend(store.options, storeConfig);
          if (uri) {
            return store.loadAnnotationsFromSearch(storeConfig['loadFromSearch']);
          } else {
            return console.log('URI is required to load annotations');
          }
        } else {
          return console.log('No annotator() instance found for target: ', event.target);
        }
      } else {
        $(event.target).annotator().annotator('addPlugin', 'Tags').annotator('addPlugin', 'Store', storeConfig);
        return this.targets.push(event.target);
      }
    };

    StudentNotes.prototype.getStoreConfig = function(uri) {
      var prefix, storeConfig;
      prefix = this.getPrefix();
      if (uri === null) {
        uri = this.getURIPath();
      }
      storeConfig = {
        prefix: prefix,
        loadFromSearch: {
          uri: uri,
          limit: 0
        },
        annotationData: {
          uri: uri
        }
      };
      return storeConfig;
    };

    StudentNotes.prototype.getPrefix = function() {
      var match, prefix, re;
      re = /^(\/courses\/[^/]+\/[^/]+\/[^/]+)/;
      match = re.exec(this.getURIPath());
      prefix = (match ? match[1] : '');
      return "" + prefix + "/notes/api";
    };

    StudentNotes.prototype.getURIPath = function() {
      return window.location.href.toString().split(window.location.host)[1];
    };

    return StudentNotes;

  })();

  $(document).ready(function($) {
    return new StudentNotes($, this);
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {


}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var XProblemDisplay, XProblemGenerator, XProblemGrader, root;

  XProblemGenerator = (function() {
    function XProblemGenerator(seed, parameters) {
      this.parameters = parameters != null ? parameters : {};
      this.random = new MersenneTwister(seed);
      this.problemState = {};
    }

    XProblemGenerator.prototype.generate = function() {
      return console.error("Abstract method called: XProblemGenerator.generate");
    };

    return XProblemGenerator;

  })();

  XProblemDisplay = (function() {
    function XProblemDisplay(state, submission, evaluation, container, submissionField, parameters) {
      this.state = state;
      this.submission = submission;
      this.evaluation = evaluation;
      this.container = container;
      this.submissionField = submissionField;
      this.parameters = parameters != null ? parameters : {};
    }

    XProblemDisplay.prototype.render = function() {
      return console.error("Abstract method called: XProblemDisplay.render");
    };

    XProblemDisplay.prototype.updateSubmission = function() {
      return this.submissionField.val(JSON.stringify(this.getCurrentSubmission()));
    };

    XProblemDisplay.prototype.getCurrentSubmission = function() {
      return console.error("Abstract method called: XProblemDisplay.getCurrentSubmission");
    };

    return XProblemDisplay;

  })();

  XProblemGrader = (function() {
    function XProblemGrader(submission, problemState, parameters) {
      this.submission = submission;
      this.problemState = problemState;
      this.parameters = parameters != null ? parameters : {};
      this.solution = null;
      this.evaluation = {};
    }

    XProblemGrader.prototype.solve = function() {
      return console.error("Abstract method called: XProblemGrader.solve");
    };

    XProblemGrader.prototype.grade = function() {
      return console.error("Abstract method called: XProblemGrader.grade");
    };

    return XProblemGrader;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.XProblemGenerator = XProblemGenerator;

  root.XProblemDisplay = XProblemDisplay;

  root.XProblemGrader = XProblemGrader;

}).call(this);

(function($, undefined) {
  var form_ext;
  $.form_ext  = form_ext = {
    ajax: function(options) {
      return $.ajax(options);
    },
    handleRemote: function(element) {
      var method = element.attr('method');
      var url = element.attr('action');
      var data = element.serializeArray();
      var options = {
        type: method || 'GET',
        data: data,
        dataType: 'text json',
        success: function(data, status, xhr) {
          element.trigger("ajax:success", [data, status, xhr]);
        },
        complete: function(xhr, status) {
          element.trigger("ajax:complete", [xhr, status]);
        },
        error: function(xhr, status, error) {
          element.trigger("ajax:error", [xhr, status, error]);
        }
      }
      if(url) { options.url = url; }
      return form_ext.ajax(options)
    },
    CSRFProtection: function(xhr) {
      var token = $.cookie('csrftoken');
      if (token) xhr.setRequestHeader('X-CSRFToken', token);
    }
  }
  $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { form_ext.CSRFProtection(xhr); }});
  $(document).delegate('form', 'submit', function(e) {
    var form = $(this),
    remote = form.data("remote") !== undefined;

    if(remote) {
      form_ext.handleRemote(form);
      return false;
    }

  });
})(jQuery);

$(document).ready(function () {
  $('a.dropdown').toggle(function() {
    $('ul.dropdown-menu').addClass("expanded");
    $('a.dropdown').addClass("active");
  }, function() {
    $('ul.dropdown-menu').removeClass("expanded");
    $('a.dropdown').removeClass("active");
  });
});

(function($){
  $.fn.extend({
    leanModal: function(options) {
      var defaults = {
        top: 100,
        overlay: 0.5,
        closeButton: null,
        position: 'fixed'
      }
      
      if ($("#lean_overlay").length == 0) {
        var overlay = $("<div id='lean_overlay'></div>");
        $("body").append(overlay);
      }

      options =  $.extend(defaults, options);

      return this.each(function() {
        var o = options;

        $(this).click(function(e) {

          $(".modal").hide();

          var modal_id = $(this).attr("href");
          
          if ($(modal_id).hasClass("video-modal")) {
            //Video modals need to be cloned before being presented as a modal
            //This is because actions on the video get recorded in the history.
            //Deleting the video (clone) prevents the odd back button behavior.
            var modal_clone = $(modal_id).clone(true, true);
            modal_clone.attr('id', 'modal_clone');
            $(modal_id).after(modal_clone);
            modal_id = '#modal_clone';
          }


          $("#lean_overlay").click(function() {
             close_modal(modal_id);
          });

          $(o.closeButton).click(function() {
             close_modal(modal_id);
          });

          var modal_height = $(modal_id).outerHeight();
          var modal_width = $(modal_id).outerWidth();

          $('#lean_overlay').css({ 'display' : 'block', opacity : 0 });
          $('#lean_overlay').fadeTo(200,o.overlay);

          $('iframe', modal_id).attr('src', $('iframe', modal_id).data('src'));
          $(modal_id).css({
            'display' : 'block',
            'position' : o.position,
            'opacity' : 0,
            'z-index': 11000,
            'left' : 50 + '%',
            'margin-left' : -(modal_width/2) + "px",
            'top' : o.top + "px"
          })

          $(modal_id).fadeTo(200,1);
          $(modal_id).find(".notice").hide().html("");
          var notice = $(this).data('notice')
          if(notice !== undefined) {
            $notice = $(modal_id).find(".notice");
            $notice.show().html(notice);
            // This is for activating leanModal links that were in the notice. We should have a cleaner way of
            // allowing all dynamically added leanmodal links to work.
            $notice.find("a[rel*=leanModal]").leanModal({ top : 120, overlay: 1, closeButton: ".close-modal", position: 'absolute' });
          }
          window.scrollTo(0, 0);
          e.preventDefault();

        });
      });

      function close_modal(modal_id){
        $("#lean_overlay").fadeOut(200);
        $('iframe', modal_id).attr('src', '');
        $(modal_id).css({ 'display' : 'none' });
        if (modal_id == '#modal_clone') {
          $(modal_id).remove();
        }
      }
    }
  });

  $("a[rel*=leanModal]").each(function(){
    $(this).leanModal({ top : 120, overlay: 1, closeButton: ".close-modal", position: 'absolute' });
    embed = $($(this).attr('href')).find('iframe')
    if(embed.length > 0) {
      if(embed.attr('src').indexOf("?") > 0) {
          embed.data('src', embed.attr('src') + '&autoplay=1&rel=0');
          embed.attr('src', '');
      } else {
          embed.data('src', embed.attr('src') + '?autoplay=1&rel=0');
          embed.attr('src', '');
      }
    }
  });
})(jQuery);

$(function() {
  if ($('.filter nav').length > 0) {
    var offset = $('.filter nav').offset().top;

    $(window).scroll(function() {
      if (offset <= window.pageYOffset) {
        return $('.filter nav').addClass('fixed-top');
      }
      else if (offset >= window.pageYOffset) {
        return $('.filter nav').removeClass('fixed-top');
      }
    });
  }
});

// http://james.padolsey.com/javascript/bujs-1-getparameterbyname/
function getParameterByName(name) {
    var match = RegExp('[?&]' + name + '=([^&]*)')
                    .exec(window.location.search);

    return match ?
        decodeURIComponent(match[1].replace(/\+/g, ' '))
        : null;
}

// checks whether or not the url is external to the local site.
// generously provided by StackOverflow: http://stackoverflow.com/questions/6238351/fastest-way-to-detect-external-urls
window.isExternal = function (url) {
    // parse the url into protocol, host, path, query, and fragment. More information can be found here: http://tools.ietf.org/html/rfc3986#appendix-B
    var match = url.match(/^([^:\/?#]+:)?(?:\/\/([^\/?#]*))?([^?#]+)?(\?[^#]*)?(#.*)?/);
    // match[1] matches a protocol if one exists in the url
    // if the protocol in the url does not match the protocol in the window's location, this url is considered external
    if (typeof match[1] === "string" &&
            match[1].length > 0 &&
            match[1].toLowerCase() !== location.protocol)
        return true;
    // match[2] matches the host if one exists in the url
    // if the host in the url does not match the host of the window location, this url is considered external
    if (typeof match[2] === "string" &&
            match[2].length > 0 &&
            // this regex removes the port number if it patches the current location's protocol
            match[2].replace(new RegExp(":("+{"http:":80,"https:":443}[location.protocol]+")?$"), "") !== location.host)
        return true;
    return false;
};

// Utility method for replacing a portion of a string.
window.rewriteStaticLinks = function(content, from, to) {
    if (from === null || to === null) {
        return content
    }

    var regex = new RegExp(from, 'g');
    return content.replace(regex, to)
};
