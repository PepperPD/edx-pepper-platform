// Generated by CoffeeScript 1.6.3
(function() {
  describe('HTMLEditingDescriptor', function() {
    describe('Read data from server, create Editor, and get data back out', function() {
      return it('Does not munge &lt', function() {
        var data, visualEditorStub;
        loadFixtures('html-edit-formattingbug.html');
        this.descriptor = new HTMLEditingDescriptor($('.html-edit'));
        visualEditorStub = {
          isDirty: function() {
            return false;
          }
        };
        spyOn(this.descriptor, 'getVisualEditor').andCallFake(function() {
          return visualEditorStub;
        });
        data = this.descriptor.save().data;
        return expect(data).toEqual("&lt;problem>\n&lt;p>&lt;/p>\n&lt;multiplechoiceresponse>\n<pre>&lt;problem>\n    &lt;p>&lt;/p></pre>\n<div><foo>bar</foo></div>");
      });
    });
    describe('Saves HTML', function() {
      beforeEach(function() {
        loadFixtures('html-edit.html');
        return this.descriptor = new HTMLEditingDescriptor($('.html-edit'));
      });
      it('Returns data from Advanced Editor if Visual Editor is not dirty', function() {
        var data, visualEditorStub;
        visualEditorStub = {
          isDirty: function() {
            return false;
          }
        };
        spyOn(this.descriptor, 'getVisualEditor').andCallFake(function() {
          return visualEditorStub;
        });
        expect(this.descriptor.showingVisualEditor).toEqual(true);
        data = this.descriptor.save().data;
        return expect(data).toEqual('Advanced Editor Text');
      });
      it('Returns data from Advanced Editor if Visual Editor is not showing (even if Visual Editor is dirty)', function() {
        var data, visualEditorStub;
        visualEditorStub = {
          isDirty: function() {
            return true;
          }
        };
        spyOn(this.descriptor, 'getVisualEditor').andCallFake(function() {
          return visualEditorStub;
        });
        this.descriptor.showingVisualEditor = false;
        data = this.descriptor.save().data;
        return expect(data).toEqual('Advanced Editor Text');
      });
      it('Returns data from Visual Editor if Visual Editor is dirty and showing', function() {
        var data, visualEditorStub;
        visualEditorStub = {
          isDirty: function() {
            return true;
          },
          getContent: function() {
            return 'from visual editor';
          }
        };
        spyOn(this.descriptor, 'getVisualEditor').andCallFake(function() {
          return visualEditorStub;
        });
        expect(this.descriptor.showingVisualEditor).toEqual(true);
        data = this.descriptor.save().data;
        return expect(data).toEqual('from visual editor');
      });
      return it('Performs link rewriting for static assets when saving', function() {
        var data, visualEditorStub;
        visualEditorStub = {
          isDirty: function() {
            return true;
          },
          getContent: function() {
            return 'from visual editor with /c4x/foo/bar/asset/image.jpg';
          }
        };
        spyOn(this.descriptor, 'getVisualEditor').andCallFake(function() {
          return visualEditorStub;
        });
        expect(this.descriptor.showingVisualEditor).toEqual(true);
        this.descriptor.base_asset_url = '/c4x/foo/bar/asset/';
        data = this.descriptor.save().data;
        return expect(data).toEqual('from visual editor with /static/image.jpg');
      });
    });
    describe('Can switch to Advanced Editor', function() {
      beforeEach(function() {
        loadFixtures('html-edit.html');
        return this.descriptor = new HTMLEditingDescriptor($('.html-edit'));
      });
      it('Populates from Visual Editor if Advanced Visual is dirty', function() {
        var visualEditorStub;
        expect(this.descriptor.showingVisualEditor).toEqual(true);
        visualEditorStub = {
          isDirty: function() {
            return true;
          },
          getContent: function() {
            return 'from visual editor';
          }
        };
        this.descriptor.showAdvancedEditor(visualEditorStub);
        expect(this.descriptor.showingVisualEditor).toEqual(false);
        return expect(this.descriptor.advanced_editor.getValue()).toEqual('from visual editor');
      });
      return it('Does not populate from Visual Editor if Visual Editor is not dirty', function() {
        var visualEditorStub;
        expect(this.descriptor.showingVisualEditor).toEqual(true);
        visualEditorStub = {
          isDirty: function() {
            return false;
          },
          getContent: function() {
            return 'from visual editor';
          }
        };
        this.descriptor.showAdvancedEditor(visualEditorStub);
        expect(this.descriptor.showingVisualEditor).toEqual(false);
        return expect(this.descriptor.advanced_editor.getValue()).toEqual('Advanced Editor Text');
      });
    });
    return describe('Can switch to Visual Editor', function() {
      it('Always populates from the Advanced Editor', function() {
        var visualEditorStub;
        loadFixtures('html-edit.html');
        this.descriptor = new HTMLEditingDescriptor($('.html-edit'));
        this.descriptor.showingVisualEditor = false;
        visualEditorStub = {
          isNotDirty: false,
          content: 'not set',
          startContent: 'not set',
          focus: function() {
            return true;
          },
          isDirty: function() {
            return !this.isNotDirty;
          },
          setContent: function(x) {
            return this.content = x;
          },
          getContent: function() {
            return this.content;
          }
        };
        this.descriptor.showVisualEditor(visualEditorStub);
        expect(this.descriptor.showingVisualEditor).toEqual(true);
        expect(visualEditorStub.isDirty()).toEqual(false);
        expect(visualEditorStub.getContent()).toEqual('Advanced Editor Text');
        return expect(visualEditorStub.startContent).toEqual('Advanced Editor Text');
      });
      return it('When switching to visual editor links are rewritten to c4x format', function() {
        var visualEditorStub;
        loadFixtures('html-edit-with-links.html');
        this.descriptor = new HTMLEditingDescriptor($('.html-edit'));
        this.descriptor.base_asset_url = '/c4x/foo/bar/asset/';
        this.descriptor.showingVisualEditor = false;
        visualEditorStub = {
          isNotDirty: false,
          content: 'not set',
          startContent: 'not set',
          focus: function() {
            return true;
          },
          isDirty: function() {
            return !this.isNotDirty;
          },
          setContent: function(x) {
            return this.content = x;
          },
          getContent: function() {
            return this.content;
          }
        };
        this.descriptor.showVisualEditor(visualEditorStub);
        expect(this.descriptor.showingVisualEditor).toEqual(true);
        expect(visualEditorStub.isDirty()).toEqual(false);
        expect(visualEditorStub.getContent()).toEqual('Advanced Editor Text with link /c4x/foo/bar/asset/dummy.jpg');
        return expect(visualEditorStub.startContent).toEqual('Advanced Editor Text with link /c4x/foo/bar/asset/dummy.jpg');
      });
    });
  });

}).call(this);
