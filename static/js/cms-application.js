(function() { // Generated by CoffeeScript 1.6.3
(function() {
  this.AjaxPrefix = {
    addAjaxPrefix: function(jQuery, prefix) {
      jQuery.postWithPrefix = function(url, data, callback, type) {
        return $.post("" + (prefix()) + url, data, callback, type);
      };
      jQuery.getWithPrefix = function(url, data, callback, type) {
        return $.get("" + (prefix()) + url, data, callback, type);
      };
      return jQuery.ajaxWithPrefix = function(url, settings) {
        if (settings != null) {
          return $.ajax("" + (prefix()) + url, settings);
        } else {
          settings = url;
          settings.url = "" + (prefix()) + settings.url;
          return $.ajax(settings);
        }
      };
    }
  };

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.Content = (function(_super) {
      __extends(Content, _super);

      function Content() {
        _ref = Content.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Content.contents = {};

      Content.contentInfos = {};

      Content.prototype.template = function() {
        return DiscussionUtil.getTemplate('_content');
      };

      Content.prototype.actions = {
        editable: '.admin-edit',
        can_reply: '.discussion-reply',
        can_endorse: '.admin-endorse',
        can_delete: '.admin-delete',
        can_openclose: '.admin-openclose'
      };

      Content.prototype.urlMappers = {};

      Content.prototype.urlFor = function(name) {
        return this.urlMappers[name].apply(this);
      };

      Content.prototype.can = function(action) {
        return (this.get('ability') || {})[action];
      };

      Content.prototype.updateInfo = function(info) {
        if (info) {
          this.set('ability', info.ability);
          this.set('voted', info.voted);
          return this.set('subscribed', info.subscribed);
        }
      };

      Content.prototype.addComment = function(comment, options) {
        var comments_count, model, thread;
        options || (options = {});
        if (!options.silent) {
          thread = this.get('thread');
          comments_count = parseInt(thread.get('comments_count'));
          thread.set('comments_count', comments_count + 1);
        }
        this.get('children').push(comment);
        model = new Comment($.extend({}, comment, {
          thread: this.get('thread')
        }));
        this.get('comments').add(model);
        this.trigger("comment:add");
        return model;
      };

      Content.prototype.removeComment = function(comment) {
        var comments_count, thread;
        thread = this.get('thread');
        comments_count = parseInt(thread.get('comments_count'));
        thread.set('comments_count', comments_count - 1 - comment.getCommentsCount());
        return this.trigger("comment:remove");
      };

      Content.prototype.resetComments = function(children) {
        var comment, _i, _len, _ref1, _results;
        this.set('children', []);
        this.set('comments', new Comments());
        _ref1 = children || [];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          comment = _ref1[_i];
          _results.push(this.addComment(comment, {
            silent: true
          }));
        }
        return _results;
      };

      Content.prototype.initialize = function() {
        Content.addContent(this.id, this);
        if (Content.getInfo(this.id)) {
          this.updateInfo(Content.getInfo(this.id));
        }
        this.set('user_url', DiscussionUtil.urlFor('user_profile', this.get('user_id')));
        return this.resetComments(this.get('children'));
      };

      Content.prototype.remove = function() {
        if (this.get('type') === 'comment') {
          this.get('thread').removeComment(this);
          return this.get('thread').trigger("comment:remove", this);
        } else {
          return this.trigger("thread:remove", this);
        }
      };

      Content.addContent = function(id, content) {
        return this.contents[id] = content;
      };

      Content.getContent = function(id) {
        return this.contents[id];
      };

      Content.getInfo = function(id) {
        return this.contentInfos[id];
      };

      Content.loadContentInfos = function(infos) {
        var id, info;
        for (id in infos) {
          info = infos[id];
          if (this.getContent(id)) {
            this.getContent(id).updateInfo(info);
          }
        }
        return $.extend(this.contentInfos, infos);
      };

      Content.prototype.pinThread = function() {
        var pinned;
        pinned = this.get("pinned");
        this.set("pinned", pinned);
        return this.trigger("change", this);
      };

      Content.prototype.unPinThread = function() {
        var pinned;
        pinned = this.get("pinned");
        this.set("pinned", pinned);
        return this.trigger("change", this);
      };

      Content.prototype.flagAbuse = function() {
        var temp_array;
        temp_array = this.get("abuse_flaggers");
        temp_array.push(window.user.get('id'));
        this.set("abuse_flaggers", temp_array);
        return this.trigger("change", this);
      };

      Content.prototype.unflagAbuse = function() {
        this.get("abuse_flaggers").pop(window.user.get('id'));
        return this.trigger("change", this);
      };

      return Content;

    })(Backbone.Model);
    this.Thread = (function(_super) {
      __extends(Thread, _super);

      function Thread() {
        _ref1 = Thread.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Thread.prototype.urlMappers = {
        'retrieve': function() {
          return DiscussionUtil.urlFor('retrieve_single_thread', this.discussion.id, this.id);
        },
        'reply': function() {
          return DiscussionUtil.urlFor('create_comment', this.id);
        },
        'unvote': function() {
          return DiscussionUtil.urlFor("undo_vote_for_" + (this.get('type')), this.id);
        },
        'upvote': function() {
          return DiscussionUtil.urlFor("upvote_" + (this.get('type')), this.id);
        },
        'downvote': function() {
          return DiscussionUtil.urlFor("downvote_" + (this.get('type')), this.id);
        },
        'close': function() {
          return DiscussionUtil.urlFor('openclose_thread', this.id);
        },
        'update': function() {
          return DiscussionUtil.urlFor('update_thread', this.id);
        },
        '_delete': function() {
          return DiscussionUtil.urlFor('delete_thread', this.id);
        },
        'follow': function() {
          return DiscussionUtil.urlFor('follow_thread', this.id);
        },
        'unfollow': function() {
          return DiscussionUtil.urlFor('unfollow_thread', this.id);
        },
        'flagAbuse': function() {
          return DiscussionUtil.urlFor("flagAbuse_" + (this.get('type')), this.id);
        },
        'unFlagAbuse': function() {
          return DiscussionUtil.urlFor("unFlagAbuse_" + (this.get('type')), this.id);
        },
        'pinThread': function() {
          return DiscussionUtil.urlFor("pin_thread", this.id);
        },
        'unPinThread': function() {
          return DiscussionUtil.urlFor("un_pin_thread", this.id);
        }
      };

      Thread.prototype.initialize = function() {
        this.set('thread', this);
        return Thread.__super__.initialize.call(this);
      };

      Thread.prototype.comment = function() {
        return this.set("comments_count", parseInt(this.get("comments_count")) + 1);
      };

      Thread.prototype.follow = function() {
        return this.set('subscribed', true);
      };

      Thread.prototype.unfollow = function() {
        return this.set('subscribed', false);
      };

      Thread.prototype.vote = function() {
        this.get("votes")["up_count"] = parseInt(this.get("votes")["up_count"]) + 1;
        return this.trigger("change", this);
      };

      Thread.prototype.unvote = function() {
        this.get("votes")["up_count"] = parseInt(this.get("votes")["up_count"]) - 1;
        return this.trigger("change", this);
      };

      Thread.prototype.display_body = function() {
        if (this.has("highlighted_body")) {
          return String(this.get("highlighted_body")).replace(/<highlight>/g, '<mark>').replace(/<\/highlight>/g, '</mark>');
        } else {
          return this.get("body");
        }
      };

      Thread.prototype.display_title = function() {
        if (this.has("highlighted_title")) {
          return String(this.get("highlighted_title")).replace(/<highlight>/g, '<mark>').replace(/<\/highlight>/g, '</mark>');
        } else {
          return this.get("title");
        }
      };

      Thread.prototype.toJSON = function() {
        var json_attributes;
        json_attributes = _.clone(this.attributes);
        return _.extend(json_attributes, {
          title: this.display_title(),
          body: this.display_body()
        });
      };

      Thread.prototype.created_at_date = function() {
        return new Date(this.get("created_at"));
      };

      Thread.prototype.created_at_time = function() {
        return new Date(this.get("created_at")).getTime();
      };

      return Thread;

    })(this.Content);
    this.Comment = (function(_super) {
      __extends(Comment, _super);

      function Comment() {
        _ref2 = Comment.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Comment.prototype.urlMappers = {
        'reply': function() {
          return DiscussionUtil.urlFor('create_sub_comment', this.id);
        },
        'unvote': function() {
          return DiscussionUtil.urlFor("undo_vote_for_" + (this.get('type')), this.id);
        },
        'upvote': function() {
          return DiscussionUtil.urlFor("upvote_" + (this.get('type')), this.id);
        },
        'downvote': function() {
          return DiscussionUtil.urlFor("downvote_" + (this.get('type')), this.id);
        },
        'endorse': function() {
          return DiscussionUtil.urlFor('endorse_comment', this.id);
        },
        'update': function() {
          return DiscussionUtil.urlFor('update_comment', this.id);
        },
        '_delete': function() {
          return DiscussionUtil.urlFor('delete_comment', this.id);
        },
        'flagAbuse': function() {
          return DiscussionUtil.urlFor("flagAbuse_" + (this.get('type')), this.id);
        },
        'unFlagAbuse': function() {
          return DiscussionUtil.urlFor("unFlagAbuse_" + (this.get('type')), this.id);
        }
      };

      Comment.prototype.getCommentsCount = function() {
        var count;
        count = 0;
        this.get('comments').each(function(comment) {
          return count += comment.getCommentsCount() + 1;
        });
        return count;
      };

      return Comment;

    })(this.Content);
    this.Comments = (function(_super) {
      __extends(Comments, _super);

      function Comments() {
        _ref3 = Comments.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Comments.prototype.model = Comment;

      Comments.prototype.initialize = function() {
        var _this = this;
        return this.bind("add", function(item) {
          return item.collection = _this;
        });
      };

      Comments.prototype.find = function(id) {
        return _.first(this.where({
          id: id
        }));
      };

      return Comments;

    })(Backbone.Collection);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.Discussion = (function(_super) {
      __extends(Discussion, _super);

      function Discussion() {
        _ref = Discussion.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Discussion.prototype.model = Thread;

      Discussion.prototype.initialize = function(models, options) {
        var _this = this;
        if (options == null) {
          options = {};
        }
        this.pages = options['pages'] || 1;
        this.current_page = 1;
        this.bind("add", function(item) {
          return item.discussion = _this;
        });
        this.comparator = this.sortByDateRecentFirst;
        return this.on("thread:remove", function(thread) {
          return _this.remove(thread);
        });
      };

      Discussion.prototype.find = function(id) {
        return _.first(this.where({
          id: id
        }));
      };

      Discussion.prototype.hasMorePages = function() {
        return this.current_page < this.pages;
      };

      Discussion.prototype.addThread = function(thread, options) {
        var model;
        if (!this.find(thread.id)) {
          options || (options = {});
          model = new Thread(thread);
          this.add(model);
          return model;
        }
      };

      Discussion.prototype.retrieveAnotherPage = function(mode, options, sort_options) {
        var data, url,
          _this = this;
        if (options == null) {
          options = {};
        }
        if (sort_options == null) {
          sort_options = {};
        }
        this.current_page += 1;
        data = {
          page: this.current_page
        };
        switch (mode) {
          case 'search':
            url = DiscussionUtil.urlFor('search');
            data['text'] = options.search_text;
            break;
          case 'commentables':
            url = DiscussionUtil.urlFor('search');
            data['commentable_ids'] = options.commentable_ids;
            break;
          case 'all':
            url = DiscussionUtil.urlFor('threads');
            break;
          case 'flagged':
            data['flagged'] = true;
            url = DiscussionUtil.urlFor('search');
            break;
          case 'followed':
            url = DiscussionUtil.urlFor('followed_threads', options.user_id);
        }
        if (options['group_id']) {
          data['group_id'] = options['group_id'];
        }
        data['sort_key'] = sort_options.sort_key || 'date';
        data['sort_order'] = sort_options.sort_order || 'desc';
        return DiscussionUtil.safeAjax({
          $elem: this.$el,
          url: url,
          data: data,
          dataType: 'json',
          success: function(response, textStatus) {
            var models, new_collection, new_threads;
            models = _this.models;
            new_threads = [
              (function() {
                var _i, _len, _ref1, _results;
                _ref1 = response.discussion_data;
                _results = [];
                for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                  data = _ref1[_i];
                  _results.push(new Thread(data));
                }
                return _results;
              })()
            ][0];
            new_collection = _.union(models, new_threads);
            Content.loadContentInfos(response.annotated_content_info);
            _this.reset(new_collection);
            _this.pages = response.num_pages;
            return _this.current_page = response.page;
          }
        });
      };

      Discussion.prototype.sortByDate = function(thread) {
        var today;
        if (thread.get('pinned')) {
          today = new Date();
          return new Date(today.getTime() + (24 * 60 * 60 * 1000));
        } else {
          return thread.get("created_at");
        }
      };

      Discussion.prototype.sortByDateRecentFirst = function(thread) {
        var today;
        if (thread.get('pinned')) {
          today = new Date();
          return -(new Date(today.getTime() + (24 * 60 * 60 * 1000)));
        } else {
          return -(new Date(thread.get("created_at")).getTime());
        }
      };

      Discussion.prototype.sortByVotes = function(thread1, thread2) {
        var thread1_count, thread2_count;
        thread1_count = parseInt(thread1.get("votes")['up_count']);
        thread2_count = parseInt(thread2.get("votes")['up_count']);
        if (thread2_count !== thread1_count) {
          return thread2_count - thread1_count;
        } else {
          return thread2.created_at_time() - thread1.created_at_time();
        }
      };

      Discussion.prototype.sortByComments = function(thread1, thread2) {
        var thread1_count, thread2_count;
        thread1_count = parseInt(thread1.get("comments_count"));
        thread2_count = parseInt(thread2.get("comments_count"));
        if (thread2_count !== thread1_count) {
          return thread2_count - thread1_count;
        } else {
          return thread2.created_at_time() - thread1.created_at_time();
        }
      };

      return Discussion;

    })(Backbone.Collection);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.DiscussionFilter = (function() {
    function DiscussionFilter() {}

    DiscussionFilter.filterDrop = function(e) {
      var $drop, $items, query;
      $drop = $(e.target).parents('.topic_menu_wrapper, .browse-topic-drop-menu-wrapper');
      query = $(e.target).val();
      $items = $drop.find('a');
      if (query.length === 0) {
        $items.removeClass('hidden');
        return;
      }
      $items.addClass('hidden');
      return $items.each(function(i) {
        var terms, test, thisText;
        thisText = $(this).not('.unread').text();
        $(this).parents('ul').siblings('a').not('.unread').each(function(i) {
          return thisText = thisText + ' ' + $(this).text();
        });
        test = true;
        terms = thisText.split(' ');
        if (thisText.toLowerCase().search(query.toLowerCase()) === -1) {
          test = false;
        }
        if (test) {
          $(this).removeClass('hidden');
          $(this).parent().find('a').removeClass('hidden');
          return $(this).parents('ul').siblings('a').removeClass('hidden');
        }
      });
    };

    return DiscussionFilter;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionModuleView = (function(_super) {
      __extends(DiscussionModuleView, _super);

      function DiscussionModuleView() {
        this.navigateToPage = __bind(this.navigateToPage, this);
        this.renderPagination = __bind(this.renderPagination, this);
        this.addThread = __bind(this.addThread, this);
        this.renderDiscussion = __bind(this.renderDiscussion, this);
        this.loadPage = __bind(this.loadPage, this);
        _ref = DiscussionModuleView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionModuleView.prototype.events = {
        "click .discussion-show": "toggleDiscussion",
        "click .new-post-btn": "toggleNewPost",
        "click .new-post-cancel": "hideNewPost",
        "click .discussion-paginator a": "navigateToPage"
      };

      DiscussionModuleView.prototype.paginationTemplate = function() {
        return DiscussionUtil.getTemplate("_pagination");
      };

      DiscussionModuleView.prototype.page_re = /\?discussion_page=(\d+)/;

      DiscussionModuleView.prototype.initialize = function() {
        var match;
        this.toggleDiscussionBtn = this.$(".discussion-show");
        match = this.page_re.exec(window.location.href);
        if (match) {
          return this.page = parseInt(match[1]);
        } else {
          return this.page = 1;
        }
      };

      DiscussionModuleView.prototype.toggleNewPost = function(event) {
        event.preventDefault();
        if (!this.newPostForm) {
          this.toggleDiscussion();
          this.isWaitingOnNewPost = true;
          return;
        }
        if (this.showed) {
          this.newPostForm.slideDown(300);
        } else {
          this.newPostForm.show();
        }
        this.toggleDiscussionBtn.addClass('shown');
        this.toggleDiscussionBtn.find('.button-text').html("Hide Discussion");
        this.$("section.discussion").slideDown();
        return this.showed = true;
      };

      DiscussionModuleView.prototype.hideNewPost = function(event) {
        event.preventDefault();
        return this.newPostForm.slideUp(300);
      };

      DiscussionModuleView.prototype.toggleDiscussion = function(event) {
        var $elem;
        if (this.showed) {
          this.$("section.discussion").slideUp();
          this.toggleDiscussionBtn.removeClass('shown');
          this.toggleDiscussionBtn.find('.button-text').html("Show Discussion");
          return this.showed = false;
        } else {
          this.toggleDiscussionBtn.addClass('shown');
          this.toggleDiscussionBtn.find('.button-text').html("Hide Discussion");
          if (this.retrieved) {
            this.$("section.discussion").slideDown();
            return this.showed = true;
          } else {
            $elem = this.toggleDiscussionBtn;
            return this.loadPage($elem);
          }
        }
      };

      DiscussionModuleView.prototype.loadPage = function($elem) {
        var discussionId, url,
          _this = this;
        discussionId = this.$el.data("discussion-id");
        url = DiscussionUtil.urlFor('retrieve_discussion', discussionId) + ("?page=" + this.page);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          $loading: $elem,
          url: url,
          type: "GET",
          dataType: 'json',
          success: function(response, textStatus, jqXHR) {
            return _this.renderDiscussion($elem, response, textStatus, discussionId);
          }
        });
      };

      DiscussionModuleView.prototype.renderDiscussion = function($elem, response, textStatus, discussionId) {
        var $discussion, allow_anonymous, allow_anonymous_to_peers, cohorts, source;
        window.user = new DiscussionUser(response.user_info);
        Content.loadContentInfos(response.annotated_content_info);
        DiscussionUtil.loadRoles(response.roles);
        allow_anonymous = response.allow_anonymous;
        allow_anonymous_to_peers = response.allow_anonymous_to_peers;
        cohorts = response.cohorts;
        this.discussion = new Discussion();
        this.discussion.reset(response.discussion_data, {
          silent: false
        });
        if (response.is_cohorted && response.is_moderator) {
          source = "script#_inline_discussion_cohorted";
        } else {
          source = "script#_inline_discussion";
        }
        $discussion = $(Mustache.render($(source).html(), {
          'threads': response.discussion_data,
          'discussionId': discussionId,
          'allow_anonymous_to_peers': allow_anonymous_to_peers,
          'allow_anonymous': allow_anonymous,
          'cohorts': cohorts
        }));
        if (this.$('section.discussion').length) {
          this.$('section.discussion').replaceWith($discussion);
        } else {
          this.$el.append($discussion);
        }
        this.newPostForm = $('.new-post-article');
        this.threadviews = this.discussion.map(function(thread) {
          return new DiscussionThreadInlineView({
            el: this.$("article#thread_" + thread.id),
            model: thread
          });
        });
        _.each(this.threadviews, function(dtv) {
          return dtv.render();
        });
        DiscussionUtil.bulkUpdateContentInfo(window.$$annotated_content_info);
        this.newPostView = new NewPostInlineView({
          el: this.$('.new-post-article'),
          collection: this.discussion
        });
        this.discussion.on("add", this.addThread);
        this.retrieved = true;
        this.showed = true;
        this.renderPagination(2, response.num_pages);
        if (this.isWaitingOnNewPost) {
          return this.newPostForm.show();
        }
      };

      DiscussionModuleView.prototype.addThread = function(thread, collection, options) {
        var article, threadView;
        article = $("<article class='discussion-thread' id='thread_" + thread.id + "'></article>");
        this.$('section.discussion > .threads').prepend(article);
        threadView = new DiscussionThreadInlineView({
          el: article,
          model: thread
        });
        threadView.render();
        return this.threadviews.unshift(threadView);
      };

      DiscussionModuleView.prototype.renderPagination = function(delta, numPages) {
        var maxPage, minPage, pageUrl, params, thing;
        minPage = Math.max(this.page - delta, 1);
        maxPage = Math.min(this.page + delta, numPages);
        pageUrl = function(number) {
          return "?discussion_page=" + number;
        };
        params = {
          page: this.page,
          lowPages: _.range(minPage, this.page).map(function(n) {
            return {
              number: n,
              url: pageUrl(n)
            };
          }),
          highPages: _.range(this.page + 1, maxPage + 1).map(function(n) {
            return {
              number: n,
              url: pageUrl(n)
            };
          }),
          previous: this.page - 1 >= 1 ? {
            url: pageUrl(this.page - 1),
            number: this.page - 1
          } : false,
          next: this.page + 1 <= numPages ? {
            url: pageUrl(this.page + 1),
            number: this.page + 1
          } : false,
          leftdots: minPage > 2,
          rightdots: maxPage < numPages - 1,
          first: minPage > 1 ? {
            url: pageUrl(1)
          } : false,
          last: maxPage < numPages ? {
            number: numPages,
            url: pageUrl(numPages)
          } : false
        };
        thing = Mustache.render(this.paginationTemplate(), params);
        return this.$('section.pagination').html(thing);
      };

      DiscussionModuleView.prototype.navigateToPage = function(event) {
        event.preventDefault();
        window.history.pushState({}, window.document.title, event.target.href);
        this.page = $(event.target).data('page-number');
        return this.loadPage($(event.target));
      };

      return DiscussionModuleView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionRouter = (function(_super) {
      __extends(DiscussionRouter, _super);

      function DiscussionRouter() {
        this.hideNewPost = __bind(this.hideNewPost, this);
        this.showNewPost = __bind(this.showNewPost, this);
        this.navigateToAllThreads = __bind(this.navigateToAllThreads, this);
        this.navigateToThread = __bind(this.navigateToThread, this);
        this.setActiveThread = __bind(this.setActiveThread, this);
        _ref = DiscussionRouter.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionRouter.prototype.routes = {
        "": "allThreads",
        ":forum_name/threads/:thread_id": "showThread"
      };

      DiscussionRouter.prototype.initialize = function(options) {
        this.discussion = options['discussion'];
        this.nav = new DiscussionThreadListView({
          collection: this.discussion,
          el: $(".sidebar")
        });
        this.nav.on("thread:selected", this.navigateToThread);
        this.nav.on("thread:removed", this.navigateToAllThreads);
        this.nav.on("threads:rendered", this.setActiveThread);
        this.nav.render();
        this.newPostView = new NewPostView({
          el: $(".new-post-article"),
          collection: this.discussion
        });
        this.nav.on("thread:created", this.navigateToThread);
        this.newPost = $('.new-post-article');
        $('.new-post-btn').bind("click", this.showNewPost);
        return $('.new-post-cancel').bind("click", this.hideNewPost);
      };

      DiscussionRouter.prototype.allThreads = function() {
        this.nav.updateSidebar();
        return this.nav.goHome();
      };

      DiscussionRouter.prototype.setActiveThread = function() {
        if (this.thread) {
          return this.nav.setActiveThread(this.thread.get("id"));
        } else {
          return this.nav.goHome;
        }
      };

      DiscussionRouter.prototype.showThread = function(forum_name, thread_id) {
        var _this = this;
        this.thread = this.discussion.get(thread_id);
        this.thread.set("unread_comments_count", 0);
        this.thread.set("read", true);
        this.setActiveThread();
        if (this.main) {
          this.main.cleanup();
          this.main.undelegateEvents();
        }
        this.main = new DiscussionThreadView({
          el: $(".discussion-column"),
          model: this.thread
        });
        this.main.render();
        this.main.on("thread:responses:rendered", function() {
          return _this.nav.updateSidebar();
        });
        return this.main.on("tag:selected", function(tag) {
          var search;
          search = "[" + tag + "]";
          return _this.nav.setAndSearchFor(search);
        });
      };

      DiscussionRouter.prototype.navigateToThread = function(thread_id) {
        var thread;
        thread = this.discussion.get(thread_id);
        return this.navigate("" + (thread.get("commentable_id")) + "/threads/" + thread_id, {
          trigger: true
        });
      };

      DiscussionRouter.prototype.navigateToAllThreads = function() {
        return this.navigate("", {
          trigger: true
        });
      };

      DiscussionRouter.prototype.showNewPost = function(event) {
        this.newPost.slideDown(300);
        return $('.new-post-title').focus();
      };

      DiscussionRouter.prototype.hideNewPost = function(event) {
        return this.newPost.slideUp(300);
      };

      return DiscussionRouter;

    })(Backbone.Router);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var DiscussionApp, DiscussionProfileApp;

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    DiscussionApp = {
      start: function(elem) {
        var content_info, discussion, element, thread_pages, threads, user_info;
        DiscussionUtil.loadRolesFromContainer();
        element = $(elem);
        window.$$course_id = element.data("course-id");
        user_info = element.data("user-info");
        threads = element.data("threads");
        thread_pages = element.data("thread-pages");
        content_info = element.data("content-info");
        window.user = new DiscussionUser(user_info);
        Content.loadContentInfos(content_info);
        discussion = new Discussion(threads, {
          pages: thread_pages
        });
        new DiscussionRouter({
          discussion: discussion
        });
        return Backbone.history.start({
          pushState: true,
          root: "/courses/" + $$course_id + "/discussion/forum/"
        });
      }
    };
    DiscussionProfileApp = {
      start: function(elem) {
        var element, threads, user_info;
        element = $(elem);
        window.$$course_id = element.data("course-id");
        threads = element.data("threads");
        user_info = element.data("user-info");
        window.user = new DiscussionUser(user_info);
        return new DiscussionUserProfileView({
          el: element,
          collection: threads
        });
      }
    };
    $(function() {
      $("section.discussion").each(function(index, elem) {
        return DiscussionApp.start(elem);
      });
      return $("section.discussion-user-threads").each(function(index, elem) {
        return DiscussionProfileApp.start(elem);
      });
    });
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUser = (function(_super) {
      __extends(DiscussionUser, _super);

      function DiscussionUser() {
        _ref = DiscussionUser.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionUser.prototype.following = function(thread) {
        return _.include(this.get('subscribed_thread_ids'), thread.id);
      };

      DiscussionUser.prototype.voted = function(thread) {
        return _.include(this.get('upvoted_ids'), thread.id);
      };

      DiscussionUser.prototype.vote = function(thread) {
        this.get('upvoted_ids').push(thread.id);
        return thread.vote();
      };

      DiscussionUser.prototype.unvote = function(thread) {
        this.set('upvoted_ids', _.without(this.get('upvoted_ids'), thread.id));
        return thread.unvote();
      };

      return DiscussionUser;

    })(Backbone.Model);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {


}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    return new TooltipManager;
  });

  this.TooltipManager = (function() {
    function TooltipManager() {
      this.hideTooltip = __bind(this.hideTooltip, this);
      this.moveTooltip = __bind(this.moveTooltip, this);
      this.showTooltip = __bind(this.showTooltip, this);
      this.$body = $('body');
      this.$tooltip = $('<div class="tooltip"></div>');
      this.$body.delegate('[data-tooltip]', {
        'mouseover': this.showTooltip,
        'mousemove': this.moveTooltip,
        'mouseout': this.hideTooltip,
        'click': this.hideTooltip
      });
    }

    TooltipManager.prototype.showTooltip = function(e) {
      var $target, tooltipCoords, tooltipText,
        _this = this;
      $target = $(e.target).closest('[data-tooltip]');
      tooltipText = $target.attr('data-tooltip');
      this.$tooltip.html(tooltipText);
      this.$body.append(this.$tooltip);
      tooltipCoords = {
        x: e.pageX - (this.$tooltip.outerWidth() / 2),
        y: e.pageY - (this.$tooltip.outerHeight() + 15)
      };
      this.$tooltip.css;
      ({
        'left': tooltipCoords.x,
        'top': tooltipCoords.y
      });
      return this.tooltipTimer = setTimeout(function() {
        _this.$tooltip.show().css('opacity', 1);
        return _this.tooltipTimer = setTimeout(function() {
          return _this.hideTooltip();
        }, 3000);
      }, 500);
    };

    TooltipManager.prototype.moveTooltip = function(e) {
      var tooltipCoords;
      tooltipCoords = {
        x: e.pageX - (this.$tooltip.outerWidth() / 2),
        y: e.pageY - (this.$tooltip.outerHeight() + 15)
      };
      return this.$tooltip.css({
        'left': tooltipCoords.x,
        'top': tooltipCoords.y
      });
    };

    TooltipManager.prototype.hideTooltip = function(e) {
      this.$tooltip.hide().css('opacity', 0);
      return clearTimeout(this.tooltipTimer);
    };

    return TooltipManager;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUserProfileView = (function(_super) {
      __extends(DiscussionUserProfileView, _super);

      function DiscussionUserProfileView() {
        _ref = DiscussionUserProfileView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionUserProfileView.prototype.toggleModeratorStatus = function(event) {
        var $elem, confirmValue, isModerator, url,
          _this = this;
        confirmValue = confirm("Are you sure?");
        if (!confirmValue) {
          return;
        }
        $elem = $(event.target);
        if ($elem.hasClass("sidebar-promote-moderator-button")) {
          isModerator = true;
        } else if ($elem.hasClass("sidebar-revoke-moderator-button")) {
          isModerator = false;
        } else {
          console.error("unrecognized moderator status");
          return;
        }
        url = DiscussionUtil.urlFor('update_moderator_status', $$profiled_user_id);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            is_moderator: isModerator
          },
          error: function(response, textStatus, e) {
            return console.log(e);
          },
          success: function(response, textStatus) {
            var parent, view;
            parent = _this.$el.parent();
            _this.$el.replaceWith(response.html);
            return view = new DiscussionUserProfileView({
              el: parent.children(".user-profile")
            });
          }
        });
      };

      DiscussionUserProfileView.prototype.events = {
        "click .sidebar-toggle-moderator-button": "toggleModeratorStatus"
      };

      return DiscussionUserProfileView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    if (!window.$$contents) {
      window.$$contents = {};
    }
    return $.fn.extend({
      loading: function() {
        this.$_loading = $("<div class='loading-animation'></div>");
        return $(this).after(this.$_loading);
      },
      loaded: function() {
        return this.$_loading.remove();
      }
    });
  });

  this.DiscussionUtil = (function() {
    function DiscussionUtil() {}

    DiscussionUtil.wmdEditors = {};

    DiscussionUtil.getTemplate = function(id) {
      return $("script#" + id).html();
    };

    DiscussionUtil.loadRoles = function(roles) {
      return this.roleIds = roles;
    };

    DiscussionUtil.loadFlagModerator = function(what) {
      return this.isFlagModerator = (what === "True") || (what === 1);
    };

    DiscussionUtil.loadRolesFromContainer = function() {
      this.loadRoles($("#discussion-container").data("roles"));
      return this.loadFlagModerator($("#discussion-container").data("flag-moderator"));
    };

    DiscussionUtil.isStaff = function(user_id) {
      var staff;
      staff = _.union(this.roleIds['Staff'], this.roleIds['Moderator'], this.roleIds['Administrator']);
      return _.include(staff, parseInt(user_id));
    };

    DiscussionUtil.isTA = function(user_id) {
      var ta;
      ta = _.union(this.roleIds['Community TA']);
      return _.include(ta, parseInt(user_id));
    };

    DiscussionUtil.bulkUpdateContentInfo = function(infos) {
      var id, info, _results;
      _results = [];
      for (id in infos) {
        info = infos[id];
        _results.push(Content.getContent(id).updateInfo(info));
      }
      return _results;
    };

    DiscussionUtil.generateDiscussionLink = function(cls, txt, handler) {
      return $("<a>").addClass("discussion-link").attr("href", "javascript:void(0)").addClass(cls).html(txt).click(function() {
        return handler(this);
      });
    };

    DiscussionUtil.urlFor = function(name, param, param1, param2) {
      return {
        follow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/follow",
        unfollow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/unfollow",
        create_thread: "/courses/" + $$course_id + "/discussion/" + param + "/threads/create",
        search_similar_threads: "/courses/" + $$course_id + "/discussion/" + param + "/threads/search_similar",
        update_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/update",
        create_comment: "/courses/" + $$course_id + "/discussion/threads/" + param + "/reply",
        delete_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/delete",
        flagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/flagAbuse",
        unFlagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unFlagAbuse",
        flagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/flagAbuse",
        unFlagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unFlagAbuse",
        upvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/upvote",
        downvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/downvote",
        pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/pin",
        un_pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unpin",
        undo_vote_for_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unvote",
        follow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/follow",
        unfollow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unfollow",
        update_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/update",
        endorse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/endorse",
        create_sub_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/reply",
        delete_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/delete",
        upvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/upvote",
        downvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/downvote",
        undo_vote_for_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unvote",
        upload: "/courses/" + $$course_id + "/discussion/upload",
        search: "/courses/" + $$course_id + "/discussion/forum/search",
        tags_autocomplete: "/courses/" + $$course_id + "/discussion/threads/tags/autocomplete",
        retrieve_discussion: "/courses/" + $$course_id + "/discussion/forum/" + param + "/inline",
        retrieve_single_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        update_moderator_status: "/courses/" + $$course_id + "/discussion/users/" + param + "/update_moderator_status",
        openclose_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/close",
        permanent_link_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        permanent_link_comment: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1 + "#" + param2,
        user_profile: "/courses/" + $$course_id + "/discussion/forum/users/" + param,
        followed_threads: "/courses/" + $$course_id + "/discussion/forum/users/" + param + "/followed",
        threads: "/courses/" + $$course_id + "/discussion/forum",
        "enable_notifications": "/notification_prefs/enable/",
        "disable_notifications": "/notification_prefs/disable/",
        "notifications_status": "/notification_prefs/status"
      }[name];
    };

    DiscussionUtil.safeAjax = function(params) {
      var $elem, request;
      $elem = params.$elem;
      if ($elem && $elem.attr("disabled")) {
        return;
      }
      params["url"] = URI(params["url"]).addSearch({
        ajax: 1
      });
      params["beforeSend"] = function() {
        if ($elem) {
          $elem.attr("disabled", "disabled");
        }
        if (params["$loading"]) {
          if (params["loadingCallback"] != null) {
            return params["loadingCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loading();
          }
        }
      };
      request = $.ajax(params).always(function() {
        if ($elem) {
          $elem.removeAttr("disabled");
        }
        if (params["$loading"]) {
          if (params["loadedCallback"] != null) {
            return params["loadedCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loaded();
          }
        }
      });
      return request;
    };

    DiscussionUtil.get = function($elem, url, data, success) {
      return this.safeAjax({
        $elem: $elem,
        url: url,
        type: "GET",
        dataType: "json",
        data: data,
        success: success
      });
    };

    DiscussionUtil.post = function($elem, url, data, success) {
      return this.safeAjax({
        $elem: $elem,
        url: url,
        type: "POST",
        dataType: "json",
        data: data,
        success: success
      });
    };

    DiscussionUtil.bindLocalEvents = function($local, eventsHandler) {
      var event, eventSelector, handler, selector, _ref, _results;
      _results = [];
      for (eventSelector in eventsHandler) {
        handler = eventsHandler[eventSelector];
        _ref = eventSelector.split(' '), event = _ref[0], selector = _ref[1];
        _results.push($local(selector).unbind(event)[event](handler));
      }
      return _results;
    };

    DiscussionUtil.processTag = function(text) {
      return text.toLowerCase();
    };

    DiscussionUtil.tagsInputOptions = function() {
      return {
        autocomplete_url: this.urlFor('tags_autocomplete'),
        autocomplete: {
          remoteDataType: 'json'
        },
        interactive: true,
        height: '30px',
        width: '100%',
        defaultText: "Tag your post: press enter after each tag",
        removeWithBackspace: true,
        preprocessTag: this.processTag
      };
    };

    DiscussionUtil.formErrorHandler = function(errorsField) {
      return function(xhr, textStatus, error) {
        var response, _i, _len, _ref, _results;
        response = JSON.parse(xhr.responseText);
        if ((response.errors != null) && response.errors.length > 0) {
          errorsField.empty();
          _ref = response.errors;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            error = _ref[_i];
            _results.push(errorsField.append($("<li>").addClass("new-post-form-error").html(error)).show());
          }
          return _results;
        }
      };
    };

    DiscussionUtil.clearFormErrors = function(errorsField) {
      return errorsField.empty();
    };

    DiscussionUtil.postMathJaxProcessor = function(text) {
      var RE_DISPLAYMATH, RE_INLINEMATH;
      RE_INLINEMATH = /^\$([^\$]*)\$/g;
      RE_DISPLAYMATH = /^\$\$([^\$]*)\$\$/g;
      return this.processEachMathAndCode(text, function(s, type) {
        if (type === 'display') {
          return s.replace(RE_DISPLAYMATH, function($0, $1) {
            return "\\[" + $1 + "\\]";
          });
        } else if (type === 'inline') {
          return s.replace(RE_INLINEMATH, function($0, $1) {
            return "\\(" + $1 + "\\)";
          });
        } else {
          return s;
        }
      });
    };

    DiscussionUtil.makeWmdEditor = function($content, $local, cls_identifier) {
      var appended_id, editor, elem, id, imageUploadUrl, placeholder, _processor;
      elem = $local("." + cls_identifier);
      placeholder = elem.data('placeholder');
      id = elem.attr("data-id");
      appended_id = "-" + cls_identifier + "-" + id;
      imageUploadUrl = this.urlFor('upload');
      _processor = function(_this) {
        return function(text) {
          return _this.postMathJaxProcessor(text);
        };
      };
      editor = Markdown.makeWmdEditor(elem, appended_id, imageUploadUrl, _processor(this));
      this.wmdEditors["" + cls_identifier + "-" + id] = editor;
      if (placeholder != null) {
        elem.find("#wmd-input" + appended_id).attr('placeholder', placeholder);
      }
      return editor;
    };

    DiscussionUtil.getWmdEditor = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return this.wmdEditors["" + cls_identifier + "-" + id];
    };

    DiscussionUtil.getWmdInput = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return $local("#wmd-input-" + cls_identifier + "-" + id);
    };

    DiscussionUtil.getWmdContent = function($content, $local, cls_identifier) {
      return this.getWmdInput($content, $local, cls_identifier).val();
    };

    DiscussionUtil.setWmdContent = function($content, $local, cls_identifier, text) {
      this.getWmdInput($content, $local, cls_identifier).val(text);
      return this.getWmdEditor($content, $local, cls_identifier).refreshPreview();
    };

    DiscussionUtil.subscriptionLink = function(type, id) {
      var followLink, handleFollow, handleUnfollow, unfollowLink;
      followLink = function() {
        return this.generateDiscussionLink("discussion-follow-" + type, "Follow", handleFollow);
      };
      unfollowLink = function() {
        return this.generateDiscussionLink("discussion-unfollow-" + type, "Unfollow", handleUnfollow);
      };
      handleFollow = function(elem) {
        return this.safeAjax({
          $elem: $(elem),
          url: this.urlFor("follow_" + type, id),
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === "success") {
              return $(elem).replaceWith(unfollowLink());
            }
          },
          dataType: 'json'
        });
      };
      handleUnfollow = function(elem) {
        return this.safeAjax({
          $elem: $(elem),
          url: this.urlFor("unfollow_" + type, id),
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === "success") {
              return $(elem).replaceWith(followLink());
            }
          },
          dataType: 'json'
        });
      };
      if (this.isSubscribed(id, type)) {
        return unfollowLink();
      } else {
        return followLink();
      }
    };

    DiscussionUtil.processEachMathAndCode = function(text, processor) {
      var $div, ESCAPED_BACKSLASH, ESCAPED_DOLLAR, RE_DISPLAYMATH, RE_INLINEMATH, cnt, codeArchive, processedText;
      codeArchive = [];
      RE_DISPLAYMATH = /^([^\$]*?)\$\$([^\$]*?)\$\$(.*)$/m;
      RE_INLINEMATH = /^([^\$]*?)\$([^\$]+?)\$(.*)$/m;
      ESCAPED_DOLLAR = '@@ESCAPED_D@@';
      ESCAPED_BACKSLASH = '@@ESCAPED_B@@';
      processedText = "";
      $div = $("<div>").html(text);
      $div.find("code").each(function(index, code) {
        codeArchive.push($(code).html());
        return $(code).html(codeArchive.length - 1);
      });
      text = $div.html();
      text = text.replace(/\\\$/g, ESCAPED_DOLLAR);
      while (true) {
        if (RE_INLINEMATH.test(text)) {
          text = text.replace(RE_INLINEMATH, function($0, $1, $2, $3) {
            processedText += $1 + processor("$" + $2 + "$", 'inline');
            return $3;
          });
        } else if (RE_DISPLAYMATH.test(text)) {
          text = text.replace(RE_DISPLAYMATH, function($0, $1, $2, $3) {
            processedText = processor("$$" + $2 + "$$", 'display') + processedText;
            processedText = $1 + processedText;
            return $3;
          });
        } else {
          processedText += text;
          break;
        }
      }
      text = processedText;
      text = text.replace(new RegExp(ESCAPED_DOLLAR, 'g'), '\\$');
      text = text.replace(/\\\\\\\\/g, ESCAPED_BACKSLASH);
      text = text.replace(/\\begin\{([a-z]*\*?)\}([\s\S]*?)\\end\{\1\}/img, function($0, $1, $2) {
        return processor(("\\begin{" + $1 + "}") + $2 + ("\\end{" + $1 + "}"));
      });
      text = text.replace(new RegExp(ESCAPED_BACKSLASH, 'g'), '\\\\\\\\');
      $div = $("<div>").html(text);
      cnt = 0;
      $div.find("code").each(function(index, code) {
        $(code).html(processor(codeArchive[cnt], 'code'));
        return cnt += 1;
      });
      text = $div.html();
      return text;
    };

    DiscussionUtil.unescapeHighlightTag = function(text) {
      return text.replace(/\&lt\;highlight\&gt\;/g, "<span class='search-highlight'>").replace(/\&lt\;\/highlight\&gt\;/g, "</span>");
    };

    DiscussionUtil.stripHighlight = function(text) {
      return text.replace(/\&(amp\;)?lt\;highlight\&(amp\;)?gt\;/g, "").replace(/\&(amp\;)?lt\;\/highlight\&(amp\;)?gt\;/g, "");
    };

    DiscussionUtil.stripLatexHighlight = function(text) {
      return this.processEachMathAndCode(text, this.stripHighlight);
    };

    DiscussionUtil.markdownWithHighlight = function(text) {
      var converter;
      text = text.replace(/^\&gt\;/gm, ">");
      converter = Markdown.getMathCompatibleConverter();
      text = this.unescapeHighlightTag(this.stripLatexHighlight(converter.makeHtml(text)));
      return text.replace(/^>/gm, "&gt;");
    };

    DiscussionUtil.abbreviateString = function(text, minLength) {
      if (text.length < minLength) {
        return text;
      } else {
        while (minLength < text.length && text[minLength] !== ' ') {
          minLength++;
        }
        return text.substr(0, minLength) + '...';
      }
    };

    return DiscussionUtil;

  })();

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionContentView = (function(_super) {
      __extends(DiscussionContentView, _super);

      function DiscussionContentView() {
        this.setWmdContent = __bind(this.setWmdContent, this);
        this.getWmdContent = __bind(this.getWmdContent, this);
        this.getWmdEditor = __bind(this.getWmdEditor, this);
        this.makeWmdEditor = __bind(this.makeWmdEditor, this);
        _ref = DiscussionContentView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionContentView.prototype.events = {
        "click .discussion-flag-abuse": "toggleFlagAbuse"
      };

      DiscussionContentView.prototype.attrRenderer = {
        endorsed: function(endorsed) {
          var _ref1;
          if (endorsed) {
            return this.$(".action-endorse").show().addClass("is-endorsed");
          } else {
            if ((_ref1 = this.model.get('ability')) != null ? _ref1.can_endorse : void 0) {
              this.$(".action-endorse").show();
            } else {
              this.$(".action-endorse").hide();
            }
            return this.$(".action-endorse").removeClass("is-endorsed");
          }
        },
        closed: function(closed) {
          if (!this.$(".action-openclose").length) {
            return;
          }
          if (!this.$(".post-status-closed").length) {
            return;
          }
          if (closed) {
            this.$(".post-status-closed").show();
            this.$(".action-openclose").html(this.$(".action-openclose").html().replace("Close", "Open"));
            return this.$(".discussion-reply-new").hide();
          } else {
            this.$(".post-status-closed").hide();
            this.$(".action-openclose").html(this.$(".action-openclose").html().replace("Open", "Close"));
            return this.$(".discussion-reply-new").show();
          }
        },
        voted: function(voted) {},
        votes_point: function(votes_point) {},
        comments_count: function(comments_count) {},
        subscribed: function(subscribed) {
          if (subscribed) {
            return this.$(".dogear").addClass("is-followed");
          } else {
            return this.$(".dogear").removeClass("is-followed");
          }
        },
        ability: function(ability) {
          var action, selector, _ref1, _results;
          _ref1 = this.abilityRenderer;
          _results = [];
          for (action in _ref1) {
            selector = _ref1[action];
            if (!ability[action]) {
              _results.push(selector.disable.apply(this));
            } else {
              _results.push(selector.enable.apply(this));
            }
          }
          return _results;
        }
      };

      DiscussionContentView.prototype.abilityRenderer = {
        editable: {
          enable: function() {
            return this.$(".action-edit").closest("li").show();
          },
          disable: function() {
            return this.$(".action-edit").closest("li").hide();
          }
        },
        can_delete: {
          enable: function() {
            return this.$(".action-delete").closest("li").show();
          },
          disable: function() {
            return this.$(".action-delete").closest("li").hide();
          }
        },
        can_endorse: {
          enable: function() {
            return this.$(".action-endorse").show().css("cursor", "auto");
          },
          disable: function() {
            this.$(".action-endorse").css("cursor", "default");
            if (!this.model.get('endorsed')) {
              return this.$(".action-endorse").hide();
            } else {
              return this.$(".action-endorse").show();
            }
          }
        },
        can_openclose: {
          enable: function() {
            return this.$(".action-openclose").closest("li").show();
          },
          disable: function() {
            return this.$(".action-openclose").closest("li").hide();
          }
        }
      };

      DiscussionContentView.prototype.renderPartialAttrs = function() {
        var attr, value, _ref1, _results;
        _ref1 = this.model.changedAttributes();
        _results = [];
        for (attr in _ref1) {
          value = _ref1[attr];
          if (this.attrRenderer[attr]) {
            _results.push(this.attrRenderer[attr].apply(this, [value]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      DiscussionContentView.prototype.renderAttrs = function() {
        var attr, value, _ref1, _results;
        _ref1 = this.model.attributes;
        _results = [];
        for (attr in _ref1) {
          value = _ref1[attr];
          if (this.attrRenderer[attr]) {
            _results.push(this.attrRenderer[attr].apply(this, [value]));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      DiscussionContentView.prototype.$ = function(selector) {
        return this.$local.find(selector);
      };

      DiscussionContentView.prototype.initLocal = function() {
        this.$local = this.$el.children(".local");
        if (!this.$local.length) {
          this.$local = this.$el;
        }
        return this.$delegateElement = this.$local;
      };

      DiscussionContentView.prototype.makeWmdEditor = function(cls_identifier) {
        if (!this.$el.find(".wmd-panel").length) {
          return DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), cls_identifier);
        }
      };

      DiscussionContentView.prototype.getWmdEditor = function(cls_identifier) {
        return DiscussionUtil.getWmdEditor(this.$el, $.proxy(this.$, this), cls_identifier);
      };

      DiscussionContentView.prototype.getWmdContent = function(cls_identifier) {
        return DiscussionUtil.getWmdContent(this.$el, $.proxy(this.$, this), cls_identifier);
      };

      DiscussionContentView.prototype.setWmdContent = function(cls_identifier, text) {
        return DiscussionUtil.setWmdContent(this.$el, $.proxy(this.$, this), cls_identifier, text);
      };

      DiscussionContentView.prototype.initialize = function() {
        this.initLocal();
        return this.model.bind('change', this.renderPartialAttrs, this);
      };

      DiscussionContentView.prototype.toggleFlagAbuse = function(event) {
        var _ref1;
        event.preventDefault();
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          return this.unFlagAbuse();
        } else {
          return this.flagAbuse();
        }
      };

      DiscussionContentView.prototype.flagAbuse = function() {
        var url,
          _this = this;
        url = this.model.urlFor("flagAbuse");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-flag-abuse"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            var temp_array;
            if (textStatus === 'success') {
              /*
              note, we have to clone the array in order to trigger a change event
              */

              temp_array = _.clone(_this.model.get('abuse_flaggers'));
              temp_array.push(window.user.id);
              return _this.model.set('abuse_flaggers', temp_array);
            }
          }
        });
      };

      DiscussionContentView.prototype.unFlagAbuse = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unFlagAbuse");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-flag-abuse"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            var temp_array;
            if (textStatus === 'success') {
              temp_array = _.clone(_this.model.get('abuse_flaggers'));
              temp_array.pop(window.user.id);
              if (DiscussionUtil.isFlagModerator) {
                temp_array = [];
              }
              return _this.model.set('abuse_flaggers', temp_array);
            }
          }
        });
      };

      return DiscussionContentView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadEditView = (function(_super) {
      __extends(DiscussionThreadEditView, _super);

      function DiscussionThreadEditView() {
        _ref = DiscussionThreadEditView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      DiscussionThreadEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadEditView.prototype.initialize = function() {
        return DiscussionThreadEditView.__super__.initialize.call(this);
      };

      DiscussionThreadEditView.prototype.render = function() {
        this.template = _.template($("#thread-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-post-body");
        this.$(".edit-post-tags").tagsInput(DiscussionUtil.tagsInputOptions());
        return this;
      };

      DiscussionThreadEditView.prototype.update = function(event) {
        return this.trigger("thread:update", event);
      };

      DiscussionThreadEditView.prototype.cancel_edit = function(event) {
        return this.trigger("thread:cancel_edit", event);
      };

      return DiscussionThreadEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadListView = (function(_super) {
      __extends(DiscussionThreadListView, _super);

      function DiscussionThreadListView() {
        this.updateEmailNotifications = __bind(this.updateEmailNotifications, this);
        this.retrieveFollowed = __bind(this.retrieveFollowed, this);
        this.toggleTopicDrop = __bind(this.toggleTopicDrop, this);
        this.threadRemoved = __bind(this.threadRemoved, this);
        this.threadSelected = __bind(this.threadSelected, this);
        this.renderThreadListItem = __bind(this.renderThreadListItem, this);
        this.renderThread = __bind(this.renderThread, this);
        this.renderThreads = __bind(this.renderThreads, this);
        this.updateSidebar = __bind(this.updateSidebar, this);
        this.addAndSelectThread = __bind(this.addAndSelectThread, this);
        this.reloadDisplayedCollection = __bind(this.reloadDisplayedCollection, this);
        _ref = DiscussionThreadListView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadListView.prototype.events = {
        "click .search": "showSearch",
        "click .home": "goHome",
        "click .browse": "toggleTopicDrop",
        "keydown .post-search-field": "performSearch",
        "click .sort-bar a": "sortThreads",
        "click .browse-topic-drop-menu": "filterTopic",
        "click .browse-topic-drop-search-input": "ignoreClick",
        "click .post-list .list-item a": "threadSelected",
        "click .post-list .more-pages a": "loadMorePages",
        "change .cohort-options": "chooseCohort",
        'keyup .browse-topic-drop-search-input': DiscussionFilter.filterDrop
      };

      DiscussionThreadListView.prototype.initialize = function() {
        var _this = this;
        this.displayedCollection = new Discussion(this.collection.models, {
          pages: this.collection.pages
        });
        this.collection.on("change", this.reloadDisplayedCollection);
        this.sortBy = "date";
        this.discussionIds = "";
        this.collection.on("reset", function(discussion) {
          var board;
          board = $(".current-board").html();
          _this.displayedCollection.current_page = discussion.current_page;
          _this.displayedCollection.pages = discussion.pages;
          return _this.displayedCollection.reset(discussion.models);
        });
        this.collection.on("add", this.addAndSelectThread);
        this.sidebar_padding = 10;
        this.sidebar_header_height = 87;
        this.boardName;
        this.template = _.template($("#thread-list-template").html());
        this.current_search = "";
        return this.mode = 'all';
      };

      DiscussionThreadListView.prototype.reloadDisplayedCollection = function(thread) {
        var active, content, current_el, thread_id;
        thread_id = thread.get('id');
        content = this.renderThread(thread);
        current_el = this.$("a[data-id=" + thread_id + "]");
        active = current_el.hasClass("active");
        current_el.replaceWith(content);
        if (active) {
          return this.setActiveThread(thread_id);
        }
      };

      DiscussionThreadListView.prototype.addAndSelectThread = function(thread) {
        var commentable, commentable_id,
          _this = this;
        commentable_id = thread.get("commentable_id");
        commentable = this.$(".board-name[data-discussion_id]").filter(function() {
          return $(this).data("discussion_id").id === commentable_id;
        });
        this.setTopicHack(commentable);
        return this.retrieveDiscussion(commentable_id, function() {
          return _this.trigger("thread:created", thread.get('id'));
        });
      };

      DiscussionThreadListView.prototype.updateSidebar = function() {
        var amount, discussionBody, discussionBottomOffset, discussionsBodyBottom, discussionsBodyTop, postListWrapper, scrollTop, sidebar, sidebarHeight, sidebarWidth, topOffset, windowHeight;
        scrollTop = $(window).scrollTop();
        windowHeight = $(window).height();
        discussionBody = $(".discussion-article");
        discussionsBodyTop = discussionBody[0] ? discussionBody.offset().top : void 0;
        discussionsBodyBottom = discussionsBodyTop + discussionBody.outerHeight();
        sidebar = $(".sidebar");
        if (scrollTop > discussionsBodyTop - this.sidebar_padding) {
          sidebar.addClass('fixed');
          sidebar.css('top', this.sidebar_padding);
        } else {
          sidebar.removeClass('fixed');
          sidebar.css('top', '0');
        }
        sidebarWidth = .31 * $(".discussion-body").width();
        sidebar.css('width', sidebarWidth + 'px');
        sidebarHeight = windowHeight - Math.max(discussionsBodyTop - scrollTop, this.sidebar_padding);
        topOffset = scrollTop + windowHeight;
        discussionBottomOffset = discussionsBodyBottom + this.sidebar_padding;
        amount = Math.max(topOffset - discussionBottomOffset, 0);
        sidebarHeight = sidebarHeight - this.sidebar_padding - amount;
        sidebarHeight = Math.min(sidebarHeight + 1, discussionBody.outerHeight());
        sidebar.css('height', sidebarHeight);
        postListWrapper = this.$('.post-list-wrapper');
        return postListWrapper.css('height', (sidebarHeight - this.sidebar_header_height - 4) + 'px');
      };

      DiscussionThreadListView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      DiscussionThreadListView.prototype.render = function() {
        this.timer = 0;
        this.$el.html(this.template());
        $(window).bind("scroll", this.updateSidebar);
        $(window).bind("resize", this.updateSidebar);
        this.displayedCollection.on("reset", this.renderThreads);
        this.displayedCollection.on("thread:remove", this.renderThreads);
        this.renderThreads();
        return this;
      };

      DiscussionThreadListView.prototype.renderThreads = function() {
        var content, rendered, thread, _i, _len, _ref1;
        this.$(".post-list").html("");
        rendered = $("<div></div>");
        _ref1 = this.displayedCollection.models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          thread = _ref1[_i];
          content = this.renderThread(thread);
          rendered.append(content);
          content.wrap("<li class='list-item' data-id='\"" + (thread.get('id')) + "\"' />");
        }
        this.$(".post-list").html(rendered.html());
        this.renderMorePages();
        this.updateSidebar();
        return this.trigger("threads:rendered");
      };

      DiscussionThreadListView.prototype.renderMorePages = function() {
        if (this.displayedCollection.hasMorePages()) {
          return this.$(".post-list").append("<li class='more-pages'><a href='#'>Load more</a></li>");
        }
      };

      DiscussionThreadListView.prototype.loadMorePages = function(event) {
        var options;
        if (event) {
          event.preventDefault();
        }
        this.$(".more-pages").html('<div class="loading-animation"></div>');
        this.$(".more-pages").addClass("loading");
        options = {};
        switch (this.mode) {
          case 'search':
            options.search_text = this.current_search;
            if (this.group_id) {
              options.group_id = this.group_id;
            }
            break;
          case 'followed':
            options.user_id = window.user.id;
            options.group_id = "all";
            break;
          case 'commentables':
            options.commentable_ids = this.discussionIds;
            if (this.group_id) {
              options.group_id = this.group_id;
            }
            break;
          case 'all':
            if (this.group_id) {
              options.group_id = this.group_id;
            }
        }
        return this.collection.retrieveAnotherPage(this.mode, options, {
          sort_key: this.sortBy
        });
      };

      DiscussionThreadListView.prototype.renderThread = function(thread) {
        var content;
        content = $(_.template($("#thread-list-item-template").html())(thread.toJSON()));
        if (thread.get('subscribed')) {
          content.addClass("followed");
        }
        if (thread.get('endorsed')) {
          content.addClass("resolved");
        }
        if (thread.get('read')) {
          content.addClass("read");
        }
        return this.highlight(content);
      };

      DiscussionThreadListView.prototype.highlight = function(el) {
        return el.html(el.html().replace(/&lt;mark&gt;/g, "<mark>").replace(/&lt;\/mark&gt;/g, "</mark>"));
      };

      DiscussionThreadListView.prototype.renderThreadListItem = function(thread) {
        var view;
        view = new ThreadListItemView({
          model: thread
        });
        view.on("thread:selected", this.threadSelected);
        view.on("thread:removed", this.threadRemoved);
        view.render();
        return this.$(".post-list").append(view.el);
      };

      DiscussionThreadListView.prototype.threadSelected = function(e) {
        var thread_id;
        thread_id = $(e.target).closest("a").attr("data-id");
        this.setActiveThread(thread_id);
        this.trigger("thread:selected", thread_id);
        return false;
      };

      DiscussionThreadListView.prototype.threadRemoved = function(thread_id) {
        return this.trigger("thread:removed", thread_id);
      };

      DiscussionThreadListView.prototype.setActiveThread = function(thread_id) {
        this.$(".post-list a[data-id!='" + thread_id + "']").removeClass("active");
        return this.$(".post-list a[data-id='" + thread_id + "']").addClass("active");
      };

      DiscussionThreadListView.prototype.showSearch = function() {
        this.$(".browse").removeClass('is-dropped');
        this.hideTopicDrop();
        this.$(".search").addClass('is-open');
        this.$(".browse").removeClass('is-open');
        return setTimeout((function() {
          return this.$(".post-search-field").focus();
        }), 200);
      };

      DiscussionThreadListView.prototype.goHome = function() {
        var thread_id, url,
          _this = this;
        this.template = _.template($("#discussion-home").html());
        $(".discussion-column").html(this.template);
        $(".post-list a").removeClass("active");
        $("input.email-setting").bind("click", this.updateEmailNotifications);
        url = DiscussionUtil.urlFor("notifications_status", window.user.get("id"));
        DiscussionUtil.safeAjax({
          url: url,
          type: "GET",
          success: function(response, textStatus) {
            if (response.status) {
              return $('input.email-setting').attr('checked', 'checked');
            } else {
              return $('input.email-setting').removeAttr('checked');
            }
          }
        });
        thread_id = null;
        return this.trigger("thread:removed");
      };

      DiscussionThreadListView.prototype.toggleTopicDrop = function(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.current_search !== "") {
          this.clearSearch();
        }
        this.$(".search").removeClass('is-open');
        this.$(".browse").addClass('is-open');
        this.$(".browse").toggleClass('is-dropped');
        if (this.$(".browse").hasClass('is-dropped')) {
          this.$(".browse-topic-drop-menu-wrapper").show();
          $(".browse-topic-drop-search-input").focus();
          $("body").bind("click", this.toggleTopicDrop);
          return $("body").bind("keydown", this.setActiveItem);
        } else {
          return this.hideTopicDrop();
        }
      };

      DiscussionThreadListView.prototype.hideTopicDrop = function() {
        this.$(".browse-topic-drop-menu-wrapper").hide();
        $("body").unbind("click", this.toggleTopicDrop);
        return $("body").unbind("keydown", this.setActiveItem);
      };

      DiscussionThreadListView.prototype.setTopicHack = function(boardNameContainer) {
        var boardName, item;
        item = $(boardNameContainer).closest('a');
        boardName = item.find(".board-name").html();
        _.each(item.parents('ul').not('.browse-topic-drop-menu'), function(parent) {
          return boardName = $(parent).siblings('a').find('.board-name').html() + ' / ' + boardName;
        });
        return this.$(".current-board").html(this.fitName(boardName));
      };

      DiscussionThreadListView.prototype.setTopic = function(event) {
        var boardName, item;
        item = $(event.target).closest('a');
        boardName = item.find(".board-name").html();
        _.each(item.parents('ul').not('.browse-topic-drop-menu'), function(parent) {
          return boardName = $(parent).siblings('a').find('.board-name').html() + ' / ' + boardName;
        });
        return this.$(".current-board").html(this.fitName(boardName));
      };

      DiscussionThreadListView.prototype.setSelectedTopic = function(name) {
        return this.$(".current-board").html(this.fitName(name));
      };

      DiscussionThreadListView.prototype.getNameWidth = function(name) {
        var test, width;
        test = $("<div>");
        test.css({
          "font-size": this.$(".current-board").css('font-size'),
          opacity: 0,
          position: 'absolute',
          left: -1000,
          top: -1000
        });
        $("body").append(test);
        test.html(name);
        width = test.width();
        test.remove();
        return width;
      };

      DiscussionThreadListView.prototype.fitName = function(name) {
        var partialName, path, rawName, width, x;
        this.maxNameWidth = (this.$el.width() * .8) - 50;
        width = this.getNameWidth(name);
        if (width < this.maxNameWidth) {
          return name;
        }
        path = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = name.split("/");
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            x = _ref1[_i];
            _results.push(x.replace(/^\s+|\s+$/g, ""));
          }
          return _results;
        })();
        while (path.length > 1) {
          path.shift();
          partialName = "…/" + path.join("/");
          if (this.getNameWidth(partialName) < this.maxNameWidth) {
            return partialName;
          }
        }
        rawName = path[0];
        name = "…/" + rawName;
        while (this.getNameWidth(name) > this.maxNameWidth) {
          rawName = rawName.slice(0, rawName.length - 1);
          name = "…/" + rawName + "…";
        }
        return name;
      };

      DiscussionThreadListView.prototype.filterTopic = function(event) {
        var discussionId, discussionIds, item;
        if (this.current_search !== "") {
          this.setTopic(event);
          return this.clearSearch(this.filterTopic, event);
        } else {
          this.setTopic(event);
          item = $(event.target).closest('li');
          discussionId = item.find("span.board-name").data("discussion_id");
          if (discussionId === "#all") {
            this.discussionIds = "";
            this.$(".post-search-field").val("");
            this.$('.cohort').show();
            return this.retrieveAllThreads();
          } else if (discussionId === "#flagged") {
            this.discussionIds = "";
            this.$(".post-search-field").val("");
            this.$('.cohort').hide();
            return this.retrieveFlaggedThreads();
          } else if (discussionId === "#following") {
            this.retrieveFollowed(event);
            return this.$('.cohort').hide();
          } else {
            discussionIds = _.map(item.find(".board-name[data-discussion_id]"), function(board) {
              return $(board).data("discussion_id").id;
            });
            if ($(event.target).attr('cohorted') === "True") {
              return this.retrieveDiscussions(discussionIds, "function(){$('.cohort').show();}");
            } else {
              return this.retrieveDiscussions(discussionIds, "function(){$('.cohort').hide();}");
            }
          }
        }
      };

      DiscussionThreadListView.prototype.chooseCohort = function(event) {
        this.group_id = this.$('.cohort-options :selected').val();
        this.collection.current_page = 0;
        this.collection.reset();
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.retrieveDiscussion = function(discussion_id, callback) {
        var url,
          _this = this;
        if (callback == null) {
          callback = null;
        }
        url = DiscussionUtil.urlFor("retrieve_discussion", discussion_id);
        return DiscussionUtil.safeAjax({
          url: url,
          type: "GET",
          success: function(response, textStatus) {
            _this.collection.current_page = response.page;
            _this.collection.pages = response.num_pages;
            _this.collection.reset(response.discussion_data);
            Content.loadContentInfos(response.annotated_content_info);
            _this.displayedCollection.reset(_this.collection.models);
            if (callback != null) {
              return callback();
            }
          }
        });
      };

      DiscussionThreadListView.prototype.retrieveDiscussions = function(discussion_ids) {
        this.discussionIds = discussion_ids.join(',');
        this.mode = 'commentables';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.retrieveAllThreads = function() {
        this.mode = 'all';
        return this.retrieveFirstPage();
      };

      DiscussionThreadListView.prototype.retrieveFirstPage = function(event) {
        this.collection.current_page = 0;
        this.collection.reset();
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.retrieveFlaggedThreads = function(event) {
        this.collection.current_page = 0;
        this.collection.reset();
        this.mode = 'flagged';
        return this.loadMorePages(event);
      };

      DiscussionThreadListView.prototype.sortThreads = function(event) {
        this.$(".sort-bar a").removeClass("active");
        $(event.target).addClass("active");
        this.sortBy = $(event.target).data("sort");
        this.displayedCollection.comparator = (function() {
          switch (this.sortBy) {
            case 'date':
              return this.displayedCollection.sortByDateRecentFirst;
            case 'votes':
              return this.displayedCollection.sortByVotes;
            case 'comments':
              return this.displayedCollection.sortByComments;
          }
        }).call(this);
        return this.retrieveFirstPage(event);
      };

      DiscussionThreadListView.prototype.performSearch = function(event) {
        var text;
        if (event.which === 13) {
          event.preventDefault();
          text = this.$(".post-search-field").val();
          return this.searchFor(text);
        }
      };

      DiscussionThreadListView.prototype.setAndSearchFor = function(text) {
        this.showSearch();
        this.$(".post-search-field").val(text);
        return this.searchFor(text);
      };

      DiscussionThreadListView.prototype.searchFor = function(text, callback, value) {
        var url,
          _this = this;
        this.mode = 'search';
        this.current_search = text;
        url = DiscussionUtil.urlFor("search");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".post-search-field"),
          data: {
            text: text
          },
          url: url,
          type: "GET",
          $loading: $,
          loadingCallback: function() {
            return _this.$(".post-list").html('<li class="loading"><div class="loading-animation"></div></li>');
          },
          loadedCallback: function() {
            if (callback) {
              return callback.apply(_this, [value]);
            }
          },
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              _this.collection.reset(response.discussion_data);
              Content.loadContentInfos(response.annotated_content_info);
              _this.collection.current_page = response.page;
              _this.collection.pages = response.num_pages;
              return _this.displayedCollection.reset(_this.collection.models);
            }
          }
        });
      };

      DiscussionThreadListView.prototype.clearSearch = function(callback, value) {
        this.$(".post-search-field").val("");
        return this.searchFor("", callback, value);
      };

      DiscussionThreadListView.prototype.setActiveItem = function(event) {
        var index, itemFromTop, itemTop, items, scrollTarget, scrollTop;
        if (event.which === 13) {
          $(".browse-topic-drop-menu-wrapper .focused").click();
          return;
        }
        if (event.which !== 40 && event.which !== 38) {
          return;
        }
        event.preventDefault();
        items = $.makeArray($(".browse-topic-drop-menu-wrapper a").not(".hidden"));
        index = items.indexOf($('.browse-topic-drop-menu-wrapper .focused')[0]);
        if (event.which === 40) {
          index = Math.min(index + 1, items.length - 1);
        }
        if (event.which === 38) {
          index = Math.max(index - 1, 0);
        }
        $(".browse-topic-drop-menu-wrapper .focused").removeClass("focused");
        $(items[index]).addClass("focused");
        itemTop = $(items[index]).parent().offset().top;
        scrollTop = $(".browse-topic-drop-menu").scrollTop();
        itemFromTop = $(".browse-topic-drop-menu").offset().top - itemTop;
        scrollTarget = Math.min(scrollTop - itemFromTop, scrollTop);
        scrollTarget = Math.max(scrollTop - itemFromTop - $(".browse-topic-drop-menu").height() + $(items[index]).height(), scrollTarget);
        return $(".browse-topic-drop-menu").scrollTop(scrollTarget);
      };

      DiscussionThreadListView.prototype.retrieveFollowed = function(event) {
        this.mode = 'followed';
        return this.retrieveFirstPage(event);
      };

      DiscussionThreadListView.prototype.updateEmailNotifications = function() {
        var _this = this;
        if ($('input.email-setting').attr('checked')) {
          return DiscussionUtil.safeAjax({
            url: DiscussionUtil.urlFor("enable_notifications"),
            type: "POST",
            error: function() {
              return $('input.email-setting').removeAttr('checked');
            }
          });
        } else {
          return DiscussionUtil.safeAjax({
            url: DiscussionUtil.urlFor("disable_notifications"),
            type: "POST",
            error: function() {
              return $('input.email-setting').attr('checked', 'checked');
            }
          });
        }
      };

      return DiscussionThreadListView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadProfileView = (function(_super) {
      var expanded;

      __extends(DiscussionThreadProfileView, _super);

      function DiscussionThreadProfileView() {
        this.addComment = __bind(this.addComment, this);
        this.renderResponse = __bind(this.renderResponse, this);
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderVoted = __bind(this.renderVoted, this);
        _ref = DiscussionThreadProfileView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      expanded = false;

      DiscussionThreadProfileView.prototype.events = {
        "click .discussion-vote": "toggleVote",
        "click .action-follow": "toggleFollowing",
        "click .expand-post": "expandPost",
        "click .collapse-post": "collapsePost"
      };

      DiscussionThreadProfileView.prototype.initLocal = function() {
        this.$local = this.$el.children(".discussion-article").children(".local");
        return this.$delegateElement = this.$local;
      };

      DiscussionThreadProfileView.prototype.initialize = function() {
        DiscussionThreadProfileView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      DiscussionThreadProfileView.prototype.render = function() {
        var params;
        this.template = DiscussionUtil.getTemplate("_profile_thread");
        if (!this.model.has('abbreviatedBody')) {
          this.abbreviateBody();
        }
        params = $.extend(this.model.toJSON(), {
          expanded: this.expanded,
          permalink: this.model.urlFor('retrieve')
        });
        if (!this.model.get('anonymous')) {
          params = $.extend(params, {
            user: {
              username: this.model.username,
              user_url: this.model.user_url
            }
          });
        }
        this.$el.html(Mustache.render(this.template, params));
        this.initLocal();
        this.delegateEvents();
        this.renderDogear();
        this.renderVoted();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.convertMath();
        if (this.expanded) {
          this.renderResponses();
        }
        return this;
      };

      DiscussionThreadProfileView.prototype.renderDogear = function() {
        if (window.user.following(this.model)) {
          return this.$(".dogear").addClass("is-followed");
        }
      };

      DiscussionThreadProfileView.prototype.renderVoted = function() {
        if (window.user.voted(this.model)) {
          return this.$("[data-role=discussion-vote]").addClass("is-cast");
        } else {
          return this.$("[data-role=discussion-vote]").removeClass("is-cast");
        }
      };

      DiscussionThreadProfileView.prototype.updateModelDetails = function() {
        this.renderVoted();
        return this.$("[data-role=discussion-vote] .votes-count-number").html(this.model.get("votes")["up_count"]);
      };

      DiscussionThreadProfileView.prototype.convertMath = function() {
        var element;
        element = this.$(".post-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      DiscussionThreadProfileView.prototype.renderResponses = function() {
        var _this = this;
        return DiscussionUtil.safeAjax({
          url: "/courses/" + $$course_id + "/discussion/forum/" + (this.model.get('commentable_id')) + "/threads/" + this.model.id,
          $loading: this.$el,
          success: function(data, textStatus, xhr) {
            var comments;
            _this.$el.find(".loading").remove();
            Content.loadContentInfos(data['annotated_content_info']);
            comments = new Comments(data['content']['children']);
            comments.each(_this.renderResponse);
            return _this.trigger("thread:responses:rendered");
          }
        });
      };

      DiscussionThreadProfileView.prototype.renderResponse = function(response) {
        var view;
        response.set('thread', this.model);
        view = new ThreadResponseView({
          model: response
        });
        view.on("comment:add", this.addComment);
        view.render();
        return this.$el.find(".responses").append(view.el);
      };

      DiscussionThreadProfileView.prototype.addComment = function() {
        return this.model.comment();
      };

      DiscussionThreadProfileView.prototype.toggleVote = function(event) {
        event.preventDefault();
        if (window.user.voted(this.model)) {
          return this.unvote();
        } else {
          return this.vote();
        }
      };

      DiscussionThreadProfileView.prototype.toggleFollowing = function(event) {
        var $elem, url;
        $elem = $(event.target);
        url = null;
        if (!this.model.get('subscribed')) {
          this.model.follow();
          url = this.model.urlFor("follow");
        } else {
          this.model.unfollow();
          url = this.model.urlFor("unfollow");
        }
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST"
        });
      };

      DiscussionThreadProfileView.prototype.vote = function() {
        var url,
          _this = this;
        window.user.vote(this.model);
        url = this.model.urlFor("upvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      DiscussionThreadProfileView.prototype.unvote = function() {
        var url,
          _this = this;
        window.user.unvote(this.model);
        url = this.model.urlFor("unvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      DiscussionThreadProfileView.prototype.edit = function() {};

      DiscussionThreadProfileView.prototype.abbreviateBody = function() {
        var abbreviated;
        abbreviated = DiscussionUtil.abbreviateString(this.model.get('body'), 140);
        return this.model.set('abbreviatedBody', abbreviated);
      };

      DiscussionThreadProfileView.prototype.expandPost = function(event) {
        this.expanded = true;
        this.$el.addClass('expanded');
        this.$el.find('.post-body').html(this.model.get('body'));
        this.convertMath();
        this.$el.find('.expand-post').css('display', 'none');
        this.$el.find('.collapse-post').css('display', 'block');
        this.$el.find('.post-extended-content').show();
        if (this.$el.find('.loading').length) {
          return this.renderResponses();
        }
      };

      DiscussionThreadProfileView.prototype.collapsePost = function(event) {
        this.expanded = false;
        this.$el.removeClass('expanded');
        this.$el.find('.post-body').html(this.model.get('abbreviatedBody'));
        this.convertMath();
        this.$el.find('.collapse-post').css('display', 'none');
        this.$el.find('.post-extended-content').hide();
        return this.$el.find('.expand-post').css('display', 'block');
      };

      return DiscussionThreadProfileView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadShowView = (function(_super) {
      __extends(DiscussionThreadShowView, _super);

      function DiscussionThreadShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderPinned = __bind(this.renderPinned, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        this.renderVoted = __bind(this.renderVoted, this);
        _ref = DiscussionThreadShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadShowView.prototype.events = {
        "click .discussion-vote": "toggleVote",
        "click .discussion-flag-abuse": "toggleFlagAbuse",
        "click .admin-pin": "togglePin",
        "click .action-follow": "toggleFollowing",
        "click .action-edit": "edit",
        "click .action-delete": "_delete",
        "click .action-openclose": "toggleClosed"
      };

      DiscussionThreadShowView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadShowView.prototype.initialize = function() {
        DiscussionThreadShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      DiscussionThreadShowView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-show-template").html());
        return this.template(this.model.toJSON());
      };

      DiscussionThreadShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderDogear();
        this.renderVoted();
        this.renderFlagged();
        this.renderPinned();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.convertMath();
        this.highlight(this.$(".post-body"));
        this.highlight(this.$("h1,h3"));
        return this;
      };

      DiscussionThreadShowView.prototype.renderDogear = function() {
        if (window.user.following(this.model)) {
          return this.$(".dogear").addClass("is-followed");
        }
      };

      DiscussionThreadShowView.prototype.renderVoted = function() {
        if (window.user.voted(this.model)) {
          return this.$("[data-role=discussion-vote]").addClass("is-cast");
        } else {
          return this.$("[data-role=discussion-vote]").removeClass("is-cast");
        }
      };

      DiscussionThreadShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Misuse Reported");
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Report Misuse");
        }
      };

      DiscussionThreadShowView.prototype.renderPinned = function() {
        if (this.model.get("pinned")) {
          this.$("[data-role=thread-pin]").addClass("pinned");
          this.$("[data-role=thread-pin]").removeClass("notpinned");
          return this.$(".discussion-pin .pin-label").html("Pinned");
        } else {
          this.$("[data-role=thread-pin]").removeClass("pinned");
          this.$("[data-role=thread-pin]").addClass("notpinned");
          return this.$(".discussion-pin .pin-label").html("Pin Thread");
        }
      };

      DiscussionThreadShowView.prototype.updateModelDetails = function() {
        this.renderVoted();
        this.renderFlagged();
        this.renderPinned();
        return this.$("[data-role=discussion-vote] .votes-count-number").html(this.model.get("votes")["up_count"]);
      };

      DiscussionThreadShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".post-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      DiscussionThreadShowView.prototype.toggleVote = function(event) {
        event.preventDefault();
        if (window.user.voted(this.model)) {
          return this.unvote();
        } else {
          return this.vote();
        }
      };

      DiscussionThreadShowView.prototype.toggleFollowing = function(event) {
        var $elem, url;
        $elem = $(event.target);
        url = null;
        if (!this.model.get('subscribed')) {
          this.model.follow();
          url = this.model.urlFor("follow");
        } else {
          this.model.unfollow();
          url = this.model.urlFor("unfollow");
        }
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST"
        });
      };

      DiscussionThreadShowView.prototype.vote = function() {
        var url,
          _this = this;
        window.user.vote(this.model);
        url = this.model.urlFor("upvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response, {
                silent: true
              });
            }
          }
        });
      };

      DiscussionThreadShowView.prototype.unvote = function() {
        var url,
          _this = this;
        window.user.unvote(this.model);
        url = this.model.urlFor("unvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response, {
                silent: true
              });
            }
          }
        });
      };

      DiscussionThreadShowView.prototype.edit = function(event) {
        return this.trigger("thread:edit", event);
      };

      DiscussionThreadShowView.prototype._delete = function(event) {
        return this.trigger("thread:_delete", event);
      };

      DiscussionThreadShowView.prototype.togglePin = function(event) {
        event.preventDefault();
        if (this.model.get('pinned')) {
          return this.unPin();
        } else {
          return this.pin();
        }
      };

      DiscussionThreadShowView.prototype.pin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("pinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', true);
            }
          },
          error: function() {
            return $('.admin-pin').text("Pinning not currently available");
          }
        });
      };

      DiscussionThreadShowView.prototype.unPin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unPinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', false);
            }
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleClosed = function(event) {
        var $elem, closed, data, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('close');
        closed = this.model.get('closed');
        data = {
          closed: !closed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            _this.model.set('closed', !closed);
            return _this.model.set('ability', response.ability);
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            return _this.model.set('endorsed', !endorsed);
          }
        });
      };

      DiscussionThreadShowView.prototype.highlight = function(el) {
        if (el.html()) {
          return el.html(el.html().replace(/&lt;mark&gt;/g, "<mark>").replace(/&lt;\/mark&gt;/g, "</mark>"));
        }
      };

      return DiscussionThreadShowView;

    })(DiscussionContentView);
    this.DiscussionThreadInlineShowView = (function(_super) {
      __extends(DiscussionThreadInlineShowView, _super);

      function DiscussionThreadInlineShowView() {
        _ref1 = DiscussionThreadInlineShowView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      DiscussionThreadInlineShowView.prototype.renderTemplate = function() {
        var params;
        this.template = DiscussionUtil.getTemplate('_inline_thread_show');
        params = this.model.toJSON();
        if (this.model.get('username') != null) {
          params = $.extend(params, {
            user: {
              username: this.model.username,
              user_url: this.model.user_url
            }
          });
        }
        return Mustache.render(this.template, params);
      };

      return DiscussionThreadInlineShowView;

    })(DiscussionThreadShowView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadView = (function(_super) {
      __extends(DiscussionThreadView, _super);

      function DiscussionThreadView() {
        this._delete = __bind(this._delete, this);
        this.cancelEdit = __bind(this.cancelEdit, this);
        this.update = __bind(this.update, this);
        this.edit = __bind(this.edit, this);
        this.endorseThread = __bind(this.endorseThread, this);
        this.addComment = __bind(this.addComment, this);
        this.renderResponse = __bind(this.renderResponse, this);
        _ref = DiscussionThreadView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadView.prototype.events = {
        "click .discussion-submit-post": "submitComment"
      };

      DiscussionThreadView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadView.prototype.initialize = function() {
        DiscussionThreadView.__super__.initialize.call(this);
        return this.createShowView();
      };

      DiscussionThreadView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-template").html());
        return this.template(this.model.toJSON());
      };

      DiscussionThreadView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.$el.find(".loading").hide();
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.makeWmdEditor("reply-body");
        this.renderResponses();
        return this;
      };

      DiscussionThreadView.prototype.cleanup = function() {
        if (this.responsesRequest != null) {
          return this.responsesRequest.abort();
        }
      };

      DiscussionThreadView.prototype.renderResponses = function() {
        var _this = this;
        setTimeout(function() {
          return _this.$el.find(".loading").show();
        }, 200);
        return this.responsesRequest = DiscussionUtil.safeAjax({
          url: DiscussionUtil.urlFor('retrieve_single_thread', this.model.get('commentable_id'), this.model.id),
          success: function(data, textStatus, xhr) {
            var comments;
            _this.responsesRequest = null;
            _this.$el.find(".loading").remove();
            Content.loadContentInfos(data['annotated_content_info']);
            comments = new Comments(data['content']['children']);
            comments.each(_this.renderResponse);
            return _this.trigger("thread:responses:rendered");
          }
        });
      };

      DiscussionThreadView.prototype.renderResponse = function(response) {
        var view;
        response.set('thread', this.model);
        view = new ThreadResponseView({
          model: response
        });
        view.on("comment:add", this.addComment);
        view.on("comment:endorse", this.endorseThread);
        view.render();
        this.$el.find(".responses").append(view.el);
        return view.afterInsert();
      };

      DiscussionThreadView.prototype.addComment = function() {
        return this.model.comment();
      };

      DiscussionThreadView.prototype.endorseThread = function(endorsed) {
        var is_endorsed;
        is_endorsed = this.$el.find(".is-endorsed").length;
        return this.model.set('endorsed', is_endorsed);
      };

      DiscussionThreadView.prototype.submitComment = function(event) {
        var body, comment, url,
          _this = this;
        event.preventDefault();
        url = this.model.urlFor('reply');
        body = this.getWmdContent("reply-body");
        if (!body.trim().length) {
          return;
        }
        this.setWmdContent("reply-body", "");
        comment = new Comment({
          body: body,
          created_at: (new Date()).toISOString(),
          username: window.user.get("username"),
          votes: {
            up_count: 0
          },
          abuse_flaggers: [],
          endorsed: false,
          user_id: window.user.get("id")
        });
        comment.set('thread', this.model.get('thread'));
        this.renderResponse(comment);
        this.model.addComment();
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: body
          },
          success: function(data, textStatus) {
            comment.updateInfo(data.annotated_content_info);
            return comment.set(data.content);
          }
        });
      };

      DiscussionThreadView.prototype.edit = function(event) {
        this.createEditView();
        return this.renderEditView();
      };

      DiscussionThreadView.prototype.update = function(event) {
        var newBody, newTitle, url,
          _this = this;
        newTitle = this.editView.$(".edit-post-title").val();
        newBody = this.editView.$(".edit-post-body textarea").val();
        url = DiscussionUtil.urlFor('update_thread', this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            title: newTitle,
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-post-form-errors")),
          success: function(response, textStatus) {
            _this.editView.$(".edit-post-title").val("").attr("prev-text", "");
            _this.editView.$(".edit-post-body textarea").val("").attr("prev-text", "");
            _this.editView.$(".edit-post-tags").val("");
            _this.editView.$(".edit-post-tags").importTags("");
            _this.editView.$(".wmd-preview p").html("");
            _this.model.set({
              title: newTitle,
              body: newBody,
              tags: response.content.tags
            });
            _this.createShowView();
            return _this.renderShowView();
          }
        });
      };

      DiscussionThreadView.prototype.createEditView = function() {
        if (this.showView != null) {
          this.showView.undelegateEvents();
          this.showView.$el.empty();
          this.showView = null;
        }
        this.editView = new DiscussionThreadEditView({
          model: this.model
        });
        this.editView.bind("thread:update", this.update);
        return this.editView.bind("thread:cancel_edit", this.cancelEdit);
      };

      DiscussionThreadView.prototype.renderSubView = function(view) {
        view.setElement(this.$('.thread-content-wrapper'));
        view.render();
        return view.delegateEvents();
      };

      DiscussionThreadView.prototype.renderEditView = function() {
        return this.renderSubView(this.editView);
      };

      DiscussionThreadView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        this.showView = new DiscussionThreadShowView({
          model: this.model
        });
        this.showView.bind("thread:_delete", this._delete);
        return this.showView.bind("thread:edit", this.edit);
      };

      DiscussionThreadView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      DiscussionThreadView.prototype.cancelEdit = function(event) {
        event.preventDefault();
        this.createShowView();
        return this.renderShowView();
      };

      DiscussionThreadView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        url = this.model.urlFor('_delete');
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm("Are you sure to delete thread \"" + (this.model.get('title')) + "\"?")) {
          return;
        }
        this.model.remove();
        this.showView.undelegateEvents();
        this.undelegateEvents();
        this.$el.empty();
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {}
        });
      };

      return DiscussionThreadView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadInlineView = (function(_super) {
      var expanded;

      __extends(DiscussionThreadInlineView, _super);

      function DiscussionThreadInlineView() {
        this.expandPost = __bind(this.expandPost, this);
        _ref = DiscussionThreadInlineView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      expanded = false;

      DiscussionThreadInlineView.prototype.events = {
        "click .discussion-submit-post": "submitComment",
        "click .expand-post": "expandPost",
        "click .collapse-post": "collapsePost"
      };

      DiscussionThreadInlineView.prototype.initialize = function() {
        return DiscussionThreadInlineView.__super__.initialize.call(this);
      };

      DiscussionThreadInlineView.prototype.initLocal = function() {
        this.$local = this.$el.children(".discussion-article").children(".local");
        if (!this.$local.length) {
          this.$local = this.$el;
        }
        return this.$delegateElement = this.$local;
      };

      DiscussionThreadInlineView.prototype.render = function() {
        var params;
        if (this.model.has('group_id')) {
          this.template = DiscussionUtil.getTemplate("_inline_thread_cohorted");
        } else {
          this.template = DiscussionUtil.getTemplate("_inline_thread");
        }
        if (!this.model.has('abbreviatedBody')) {
          this.abbreviateBody();
        }
        params = this.model.toJSON();
        this.$el.html(Mustache.render(this.template, params));
        this.initLocal();
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.$el.find('.post-extended-content').hide();
        if (this.expanded) {
          this.makeWmdEditor("reply-body");
          this.renderResponses();
        }
        return this;
      };

      DiscussionThreadInlineView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        this.showView = new DiscussionThreadInlineShowView({
          model: this.model
        });
        this.showView.bind("thread:_delete", this._delete);
        return this.showView.bind("thread:edit", this.edit);
      };

      DiscussionThreadInlineView.prototype.renderResponses = function() {
        var _this = this;
        return DiscussionUtil.safeAjax({
          url: "/courses/" + $$course_id + "/discussion/forum/" + (this.model.get('commentable_id')) + "/threads/" + this.model.id,
          $loading: this.$el,
          success: function(data, textStatus, xhr) {
            var comments;
            Content.loadContentInfos(data['annotated_content_info']);
            comments = new Comments(data['content']['children']);
            comments.each(_this.renderResponse);
            _this.trigger("thread:responses:rendered");
            return _this.$('.loading').remove();
          }
        });
      };

      DiscussionThreadInlineView.prototype.toggleClosed = function(event) {
        var $elem, closed, data, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('close');
        closed = this.model.get('closed');
        data = {
          closed: !closed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            _this.model.set('closed', !closed);
            return _this.model.set('ability', response.ability);
          }
        });
      };

      DiscussionThreadInlineView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            return _this.model.set('endorsed', !endorsed);
          }
        });
      };

      DiscussionThreadInlineView.prototype.abbreviateBody = function() {
        var abbreviated;
        abbreviated = DiscussionUtil.abbreviateString(this.model.get('body'), 140);
        return this.model.set('abbreviatedBody', abbreviated);
      };

      DiscussionThreadInlineView.prototype.expandPost = function(event) {
        this.expanded = true;
        this.$el.addClass('expanded');
        this.$el.find('.post-body').html(this.model.get('body'));
        this.showView.convertMath();
        this.$el.find('.expand-post').css('display', 'none');
        this.$el.find('.collapse-post').css('display', 'block');
        this.$el.find('.post-extended-content').show();
        this.makeWmdEditor("reply-body");
        this.renderAttrs();
        if (this.$el.find('.loading').length) {
          return this.renderResponses();
        }
      };

      DiscussionThreadInlineView.prototype.collapsePost = function(event) {
        this.expanded = false;
        this.$el.removeClass('expanded');
        this.$el.find('.post-body').html(this.model.get('abbreviatedBody'));
        this.showView.convertMath();
        this.$el.find('.collapse-post').css('display', 'none');
        this.$el.find('.post-extended-content').hide();
        return this.$el.find('.expand-post').css('display', 'block');
      };

      DiscussionThreadInlineView.prototype.createEditView = function() {
        DiscussionThreadInlineView.__super__.createEditView.call(this);
        this.editView.bind("thread:update", this.expandPost);
        this.editView.bind("thread:update", this.abbreviateBody);
        return this.editView.bind("thread:cancel_edit", this.expandPost);
      };

      return DiscussionThreadInlineView;

    })(DiscussionThreadView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUserProfileView = (function(_super) {
      __extends(DiscussionUserProfileView, _super);

      function DiscussionUserProfileView() {
        this.addThread = __bind(this.addThread, this);
        this.renderThreads = __bind(this.renderThreads, this);
        _ref = DiscussionUserProfileView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionUserProfileView.prototype.initialize = function(options) {
        return this.renderThreads(this.$el, this.collection);
      };

      DiscussionUserProfileView.prototype.renderThreads = function($elem, threads) {
        var $discussion;
        this.discussion = new Discussion();
        this.discussion.reset(threads, {
          silent: false
        });
        $discussion = $(Mustache.render($("script#_user_profile").html(), {
          'threads': threads
        }));
        $elem.append($discussion);
        this.threadviews = this.discussion.map(function(thread) {
          return new DiscussionThreadProfileView({
            el: this.$("article#thread_" + thread.id),
            model: thread
          });
        });
        return _.each(this.threadviews, function(dtv) {
          return dtv.render();
        });
      };

      DiscussionUserProfileView.prototype.addThread = function(thread, collection, options) {
        var article, threadView;
        article = $("<article class='discussion-thread' id='thread_" + thread.id + "'></article>");
        this.$('section.discussion > .threads').prepend(article);
        threadView = new DiscussionThreadInlineView({
          el: article,
          model: thread
        });
        threadView.render();
        return this.threadviews.unshift(threadView);
      };

      return DiscussionUserProfileView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.NewPostInlineView = (function(_super) {
      __extends(NewPostInlineView, _super);

      function NewPostInlineView() {
        _ref = NewPostInlineView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NewPostInlineView.prototype.initialize = function() {
        this.topicId = this.$(".topic").first().data("discussion-id");
        this.maxNameWidth = 100;
        return DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "new-post-body");
      };

      NewPostInlineView.prototype.events = {
        "submit .new-post-form": "createPost"
      };

      NewPostInlineView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      NewPostInlineView.prototype.createPost = function(event) {
        var anonymous, anonymous_to_peers, body, follow, group, title, url,
          _this = this;
        event.preventDefault();
        title = this.$(".new-post-title").val();
        body = this.$(".new-post-body").find(".wmd-input").val();
        group = this.$(".new-post-group option:selected").attr("value");
        anonymous = false || this.$("input.discussion-anonymous").is(":checked");
        anonymous_to_peers = false || this.$("input.discussion-anonymous-to-peers").is(":checked");
        follow = false || this.$("input.discussion-follow").is(":checked");
        url = DiscussionUtil.urlFor('create_thread', this.topicId);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            title: title,
            body: body,
            group_id: group,
            anonymous: anonymous,
            anonymous_to_peers: anonymous_to_peers,
            auto_subscribe: follow
          },
          error: DiscussionUtil.formErrorHandler(this.$(".new-post-form-errors")),
          success: function(response, textStatus) {
            var thread;
            thread = new Thread(response['content']);
            DiscussionUtil.clearFormErrors(_this.$(".new-post-form-errors"));
            _this.$el.hide();
            _this.$(".new-post-title").val("").attr("prev-text", "");
            _this.$(".new-post-body textarea").val("").attr("prev-text", "");
            return _this.collection.add(thread);
          }
        });
      };

      return NewPostInlineView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.NewPostView = (function(_super) {
      __extends(NewPostView, _super);

      function NewPostView() {
        this.hideTopicDropdown = __bind(this.hideTopicDropdown, this);
        _ref = NewPostView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      NewPostView.prototype.initialize = function() {
        this.dropdownButton = this.$(".topic_dropdown_button");
        this.topicMenu = this.$(".topic_menu_wrapper");
        this.menuOpen = this.dropdownButton.hasClass('dropped');
        this.topicId = this.$(".topic").first().data("discussion_id");
        this.topicText = this.getFullTopicName(this.$(".topic").first());
        this.maxNameWidth = 100;
        this.setSelectedTopic();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "new-post-body");
        this.$(".new-post-tags").tagsInput(DiscussionUtil.tagsInputOptions());
        if (this.$($(".topic_menu li a")[0]).attr('cohorted') !== "True") {
          return $('.choose-cohort').hide();
        }
      };

      NewPostView.prototype.events = {
        "submit .new-post-form": "createPost",
        "click  .topic_dropdown_button": "toggleTopicDropdown",
        "click  .topic_menu_wrapper": "setTopic",
        "click  .topic_menu_search": "ignoreClick",
        "keyup .form-topic-drop-search-input": DiscussionFilter.filterDrop
      };

      NewPostView.prototype.ignoreClick = function(event) {
        return event.stopPropagation();
      };

      NewPostView.prototype.toggleTopicDropdown = function(event) {
        event.stopPropagation();
        if (this.menuOpen) {
          return this.hideTopicDropdown();
        } else {
          return this.showTopicDropdown();
        }
      };

      NewPostView.prototype.showTopicDropdown = function() {
        this.menuOpen = true;
        this.dropdownButton.addClass('dropped');
        this.topicMenu.show();
        $(".form-topic-drop-search-input").focus();
        $("body").bind("keydown", this.setActiveItem);
        $("body").bind("click", this.hideTopicDropdown);
        return this.maxNameWidth = this.dropdownButton.width() * 0.9;
      };

      NewPostView.prototype.hideTopicDropdown = function() {
        this.menuOpen = false;
        this.dropdownButton.removeClass('dropped');
        this.topicMenu.hide();
        $("body").unbind("keydown", this.setActiveItem);
        return $("body").unbind("click", this.hideTopicDropdown);
      };

      NewPostView.prototype.setTopic = function(event) {
        var $target;
        $target = $(event.target);
        if ($target.data('discussion_id')) {
          this.topicText = $target.html();
          this.topicText = this.getFullTopicName($target);
          this.topicId = $target.data('discussion_id');
          this.setSelectedTopic();
          if ($target.attr('cohorted') === "True") {
            return $('.choose-cohort').show();
          } else {
            return $('.choose-cohort').hide();
          }
        }
      };

      NewPostView.prototype.setSelectedTopic = function() {
        return this.dropdownButton.html(this.fitName(this.topicText) + ' <span class="drop-arrow">▾</span>');
      };

      NewPostView.prototype.getFullTopicName = function(topicElement) {
        var name;
        name = topicElement.html();
        topicElement.parents('ul').not('.topic_menu').each(function() {
          return name = $(this).siblings('a').html() + ' / ' + name;
        });
        return name;
      };

      NewPostView.prototype.getNameWidth = function(name) {
        var test, width;
        test = $("<div>");
        test.css({
          "font-size": this.dropdownButton.css('font-size'),
          opacity: 0,
          position: 'absolute',
          left: -1000,
          top: -1000
        });
        $("body").append(test);
        test.html(name);
        width = test.width();
        test.remove();
        return width;
      };

      NewPostView.prototype.fitName = function(name) {
        var partialName, path, rawName, width, x;
        width = this.getNameWidth(name);
        if (width < this.maxNameWidth) {
          return name;
        }
        path = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = name.split("/");
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            x = _ref1[_i];
            _results.push(x.replace(/^\s+|\s+$/g, ""));
          }
          return _results;
        })();
        while (path.length > 1) {
          path.shift();
          partialName = "... / " + path.join(" / ");
          if (this.getNameWidth(partialName) < this.maxNameWidth) {
            return partialName;
          }
        }
        rawName = path[0];
        name = "... / " + rawName;
        while (this.getNameWidth(name) > this.maxNameWidth) {
          rawName = rawName.slice(0, rawName.length - 1);
          name = "... / " + rawName + " ...";
        }
        return name;
      };

      NewPostView.prototype.createPost = function(event) {
        var anonymous, anonymous_to_peers, body, follow, group, tags, title, url,
          _this = this;
        event.preventDefault();
        title = this.$(".new-post-title").val();
        body = this.$(".new-post-body").find(".wmd-input").val();
        tags = this.$(".new-post-tags").val();
        group = this.$(".new-post-group option:selected").attr("value");
        anonymous = false || this.$("input.discussion-anonymous").is(":checked");
        anonymous_to_peers = false || this.$("input.discussion-anonymous-to-peers").is(":checked");
        follow = false || this.$("input.discussion-follow").is(":checked");
        url = DiscussionUtil.urlFor('create_thread', this.topicId);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            title: title,
            body: body,
            tags: tags,
            anonymous: anonymous,
            anonymous_to_peers: anonymous_to_peers,
            auto_subscribe: follow,
            group_id: group
          },
          error: DiscussionUtil.formErrorHandler(this.$(".new-post-form-errors")),
          success: function(response, textStatus) {
            var thread;
            thread = new Thread(response['content']);
            DiscussionUtil.clearFormErrors(_this.$(".new-post-form-errors"));
            _this.$el.hide();
            _this.$(".new-post-title").val("").attr("prev-text", "");
            _this.$(".new-post-body textarea").val("").attr("prev-text", "");
            _this.$(".new-post-tags").val("");
            _this.$(".new-post-tags").importTags("");
            _this.$(".wmd-preview p").html("");
            return _this.collection.add(thread);
          }
        });
      };

      NewPostView.prototype.setActiveItem = function(event) {
        var index, itemFromTop, itemTop, items, scrollTarget, scrollTop;
        if (event.which === 13) {
          $(".topic_menu_wrapper .focused").click();
          return;
        }
        if (event.which !== 40 && event.which !== 38) {
          return;
        }
        event.preventDefault();
        items = $.makeArray($(".topic_menu_wrapper a").not(".hidden"));
        index = items.indexOf($('.topic_menu_wrapper .focused')[0]);
        if (event.which === 40) {
          index = Math.min(index + 1, items.length - 1);
        }
        if (event.which === 38) {
          index = Math.max(index - 1, 0);
        }
        $(".topic_menu_wrapper .focused").removeClass("focused");
        $(items[index]).addClass("focused");
        itemTop = $(items[index]).parent().offset().top;
        scrollTop = $(".topic_menu").scrollTop();
        itemFromTop = $(".topic_menu").offset().top - itemTop;
        scrollTarget = Math.min(scrollTop - itemFromTop, scrollTop);
        scrollTarget = Math.max(scrollTop - itemFromTop - $(".topic_menu").height() + $(items[index]).height() + 20, scrollTarget);
        return $(".topic_menu").scrollTop(scrollTarget);
      };

      return NewPostView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentShowView = (function(_super) {
      __extends(ResponseCommentShowView, _super);

      function ResponseCommentShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        _ref = ResponseCommentShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentShowView.prototype.events = {
        "click .discussion-flag-abuse": "toggleFlagAbuse"
      };

      ResponseCommentShowView.prototype.tagName = "li";

      ResponseCommentShowView.prototype.initialize = function() {
        ResponseCommentShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      ResponseCommentShowView.prototype.render = function() {
        var params;
        this.template = _.template($("#response-comment-show-template").html());
        params = this.model.toJSON();
        this.$el.html(this.template(params));
        this.initLocal();
        this.delegateEvents();
        this.renderAttrs();
        this.renderFlagged();
        this.markAsStaff();
        this.$el.find(".timeago").timeago();
        this.convertMath();
        this.addReplyLink();
        return this;
      };

      ResponseCommentShowView.prototype.addReplyLink = function() {
        var html, name, p, _ref1;
        if (this.model.hasOwnProperty('parent')) {
          name = (_ref1 = this.model.parent.get('username')) != null ? _ref1 : "anonymous";
          html = "<a href='#comment_" + this.model.parent.id + "'>@" + name + "</a>:  ";
          p = this.$('.response-body p:first');
          return p.prepend(html);
        }
      };

      ResponseCommentShowView.prototype.convertMath = function() {
        var body;
        body = this.$el.find(".response-body");
        body.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(body.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, body[0]]);
      };

      ResponseCommentShowView.prototype.markAsStaff = function() {
        if (DiscussionUtil.isStaff(this.model.get("user_id"))) {
          return this.$el.find("a.profile-link").after('<span class="staff-label">staff</span>');
        } else if (DiscussionUtil.isTA(this.model.get("user_id"))) {
          return this.$el.find("a.profile-link").after('<span class="community-ta-label">Community&nbsp;&nbsp;TA</span>');
        }
      };

      ResponseCommentShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          return this.$("[data-role=thread-flag]").removeClass("notflagged");
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          return this.$("[data-role=thread-flag]").addClass("notflagged");
        }
      };

      ResponseCommentShowView.prototype.updateModelDetails = function() {
        return this.renderFlagged();
      };

      return ResponseCommentShowView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentView = (function(_super) {
      __extends(ResponseCommentView, _super);

      function ResponseCommentView() {
        _ref = ResponseCommentView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentView.prototype.tagName = "li";

      ResponseCommentView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ResponseCommentView.prototype.initialize = function() {
        ResponseCommentView.__super__.initialize.call(this);
        return this.createShowView();
      };

      ResponseCommentView.prototype.render = function() {
        this.renderShowView();
        return this;
      };

      ResponseCommentView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        return this.showView = new ResponseCommentShowView({
          model: this.model
        });
      };

      ResponseCommentView.prototype.renderSubView = function(view) {
        view.setElement(this.$el);
        view.render();
        return view.delegateEvents();
      };

      ResponseCommentView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      return ResponseCommentView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseEditView = (function(_super) {
      __extends(ThreadResponseEditView, _super);

      function ThreadResponseEditView() {
        _ref = ThreadResponseEditView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseEditView.prototype.events = {
        "click .post-update": "update",
        "click .post-cancel": "cancel_edit"
      };

      ThreadResponseEditView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseEditView.prototype.initialize = function() {
        return ThreadResponseEditView.__super__.initialize.call(this);
      };

      ThreadResponseEditView.prototype.render = function() {
        this.template = _.template($("#thread-response-edit-template").html());
        this.$el.html(this.template(this.model.toJSON()));
        this.delegateEvents();
        DiscussionUtil.makeWmdEditor(this.$el, $.proxy(this.$, this), "edit-post-body");
        return this;
      };

      ThreadResponseEditView.prototype.update = function(event) {
        return this.trigger("response:update", event);
      };

      ThreadResponseEditView.prototype.cancel_edit = function(event) {
        return this.trigger("response:cancel_edit", event);
      };

      return ThreadResponseEditView;

    })(Backbone.View);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseShowView = (function(_super) {
      __extends(ThreadResponseShowView, _super);

      function ThreadResponseShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        _ref = ThreadResponseShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseShowView.prototype.events = {
        "click .vote-btn": "toggleVote",
        "click .action-endorse": "toggleEndorse",
        "click .action-delete": "_delete",
        "click .action-edit": "edit",
        "click .discussion-flag-abuse": "toggleFlagAbuse"
      };

      ThreadResponseShowView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseShowView.prototype.initialize = function() {
        ThreadResponseShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      ThreadResponseShowView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-response-show-template").html());
        return this.template(this.model.toJSON());
      };

      ThreadResponseShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        if (window.user.voted(this.model)) {
          this.$(".vote-btn").addClass("is-cast");
        }
        this.renderAttrs();
        this.renderFlagged();
        this.$el.find(".posted-details").timeago();
        this.convertMath();
        this.markAsStaff();
        return this;
      };

      ThreadResponseShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".response-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      ThreadResponseShowView.prototype.markAsStaff = function() {
        if (DiscussionUtil.isStaff(this.model.get("user_id"))) {
          this.$el.addClass("staff");
          return this.$el.prepend('<div class="staff-banner">staff</div>');
        } else if (DiscussionUtil.isTA(this.model.get("user_id"))) {
          this.$el.addClass("community-ta");
          return this.$el.prepend('<div class="community-ta-banner">Community TA</div>');
        }
      };

      ThreadResponseShowView.prototype.toggleVote = function(event) {
        event.preventDefault();
        this.$(".vote-btn").toggleClass("is-cast");
        if (this.$(".vote-btn").hasClass("is-cast")) {
          return this.vote();
        } else {
          return this.unvote();
        }
      };

      ThreadResponseShowView.prototype.vote = function() {
        var url,
          _this = this;
        url = this.model.urlFor("upvote");
        this.$(".votes-count-number").html(parseInt(this.$(".votes-count-number").html()) + 1);
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      ThreadResponseShowView.prototype.unvote = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unvote");
        this.$(".votes-count-number").html(parseInt(this.$(".votes-count-number").html()) - 1);
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      ThreadResponseShowView.prototype.edit = function(event) {
        return this.trigger("response:edit", event);
      };

      ThreadResponseShowView.prototype._delete = function(event) {
        return this.trigger("response:_delete", event);
      };

      ThreadResponseShowView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url;
        event.preventDefault();
        if (!this.model.can('can_endorse')) {
          return;
        }
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        this.model.set('endorsed', !endorsed);
        this.trigger("comment:endorse", !endorsed);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST"
        });
      };

      ThreadResponseShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Misuse Reported");
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Report Misuse");
        }
      };

      ThreadResponseShowView.prototype.updateModelDetails = function() {
        return this.renderFlagged();
      };

      return ThreadResponseShowView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseView = (function(_super) {
      __extends(ThreadResponseView, _super);

      function ThreadResponseView() {
        this.update = __bind(this.update, this);
        this.edit = __bind(this.edit, this);
        this.cancelEdit = __bind(this.cancelEdit, this);
        this._delete = __bind(this._delete, this);
        this.renderComment = __bind(this.renderComment, this);
        _ref = ThreadResponseView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseView.prototype.tagName = "li";

      ThreadResponseView.prototype.events = {
        "click .discussion-submit-comment": "submitComment",
        "focus .wmd-input": "showEditorChrome"
      };

      ThreadResponseView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseView.prototype.initialize = function() {
        return this.createShowView();
      };

      ThreadResponseView.prototype.renderTemplate = function() {
        var templateData, _ref1;
        this.template = _.template($("#thread-response-template").html());
        templateData = this.model.toJSON();
        templateData.wmdId = (_ref1 = this.model.id) != null ? _ref1 : (new Date()).getTime();
        return this.template(templateData);
      };

      ThreadResponseView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderShowView();
        this.renderAttrs();
        this.renderComments();
        return this;
      };

      ThreadResponseView.prototype.afterInsert = function() {
        this.makeWmdEditor("comment-body");
        return this.hideEditorChrome();
      };

      ThreadResponseView.prototype.hideEditorChrome = function() {
        this.$('.wmd-button-row').hide();
        this.$('.wmd-preview').hide();
        this.$('.wmd-input').css({
          height: '35px',
          padding: '5px'
        });
        return this.$('.comment-post-control').hide();
      };

      ThreadResponseView.prototype.showEditorChrome = function() {
        this.$('.wmd-button-row').show();
        this.$('.wmd-preview').show();
        this.$('.comment-post-control').show();
        return this.$('.wmd-input').css({
          height: '125px',
          padding: '10px'
        });
      };

      ThreadResponseView.prototype.renderComments = function() {
        var collectComments, comments,
          _this = this;
        comments = new Comments();
        comments.comparator = function(comment) {
          return comment.get('created_at');
        };
        collectComments = function(comment) {
          var children;
          comments.add(comment);
          children = new Comments(comment.get('children'));
          return children.each(function(child) {
            child.parent = comment;
            return collectComments(child);
          });
        };
        this.model.get('comments').each(collectComments);
        return comments.each(function(comment) {
          return _this.renderComment(comment, false, null);
        });
      };

      ThreadResponseView.prototype.renderComment = function(comment) {
        var view;
        comment.set('thread', this.model.get('thread'));
        view = new ResponseCommentView({
          model: comment
        });
        view.render();
        this.$el.find(".comments .new-comment").before(view.el);
        return view;
      };

      ThreadResponseView.prototype.submitComment = function(event) {
        var body, comment, url, view;
        event.preventDefault();
        url = this.model.urlFor('reply');
        body = this.getWmdContent("comment-body");
        if (!body.trim().length) {
          return;
        }
        this.setWmdContent("comment-body", "");
        comment = new Comment({
          body: body,
          created_at: (new Date()).toISOString(),
          username: window.user.get("username"),
          abuse_flaggers: [],
          user_id: window.user.get("id"),
          id: "unsaved"
        });
        view = this.renderComment(comment);
        this.hideEditorChrome();
        this.trigger("comment:add", comment);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          url: url,
          type: "POST",
          dataType: 'json',
          data: {
            body: body
          },
          success: function(response, textStatus) {
            comment.set(response.content);
            return view.render();
          }
        });
      };

      ThreadResponseView.prototype._delete = function(event) {
        var $elem, url,
          _this = this;
        event.preventDefault();
        if (!this.model.can('can_delete')) {
          return;
        }
        if (!confirm("Are you sure to delete this response? ")) {
          return;
        }
        url = this.model.urlFor('_delete');
        this.model.remove();
        this.$el.remove();
        $elem = $(event.target);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST",
          success: function(response, textStatus) {}
        });
      };

      ThreadResponseView.prototype.createEditView = function() {
        if (this.showView != null) {
          this.showView.undelegateEvents();
          this.showView.$el.empty();
          this.showView = null;
        }
        this.editView = new ThreadResponseEditView({
          model: this.model
        });
        this.editView.bind("response:update", this.update);
        return this.editView.bind("response:cancel_edit", this.cancelEdit);
      };

      ThreadResponseView.prototype.renderSubView = function(view) {
        view.setElement(this.$('.discussion-response'));
        view.render();
        return view.delegateEvents();
      };

      ThreadResponseView.prototype.renderEditView = function() {
        return this.renderSubView(this.editView);
      };

      ThreadResponseView.prototype.hideCommentForm = function() {
        return this.$('.comment-form').closest('li').hide();
      };

      ThreadResponseView.prototype.showCommentForm = function() {
        return this.$('.comment-form').closest('li').show();
      };

      ThreadResponseView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        this.showView = new ThreadResponseShowView({
          model: this.model
        });
        this.showView.bind("response:_delete", this._delete);
        return this.showView.bind("response:edit", this.edit);
      };

      ThreadResponseView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      ThreadResponseView.prototype.cancelEdit = function(event) {
        event.preventDefault();
        this.createShowView();
        this.renderShowView();
        return this.showCommentForm();
      };

      ThreadResponseView.prototype.edit = function(event) {
        this.createEditView();
        this.renderEditView();
        return this.hideCommentForm();
      };

      ThreadResponseView.prototype.update = function(event) {
        var newBody, url,
          _this = this;
        newBody = this.editView.$(".edit-post-body textarea").val();
        url = DiscussionUtil.urlFor('update_comment', this.model.id);
        return DiscussionUtil.safeAjax({
          $elem: $(event.target),
          $loading: event ? $(event.target) : void 0,
          url: url,
          type: "POST",
          dataType: 'json',
          async: false,
          data: {
            body: newBody
          },
          error: DiscussionUtil.formErrorHandler(this.$(".edit-post-form-errors")),
          success: function(response, textStatus) {
            _this.editView.$(".edit-post-body textarea").val("").attr("prev-text", "");
            _this.editView.$(".wmd-preview p").html("");
            _this.model.set({
              body: newBody
            });
            _this.createShowView();
            _this.renderShowView();
            return _this.showCommentForm();
          }
        });
      };

      return ThreadResponseView;

    })(DiscussionContentView);
  }

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  this.Logger = (function() {
    var listeners;

    function Logger() {}

    listeners = {};

    Logger.log = function(event_type, data, element) {
      var callback, _i, _j, _len, _len1, _ref, _ref1;
      if (element == null) {
        element = null;
      }
      if (event_type in listeners) {
        if (null in listeners[event_type]) {
          _ref = listeners[event_type][null];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            callback = _ref[_i];
            callback(event_type, data, element);
          }
        } else if (element in listeners[event_type]) {
          _ref1 = listeners[event_type][element];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            callback = _ref1[_j];
            callback(event_type, data, element);
          }
        }
      }
      return $.postWithPrefix('/event', {
        event_type: event_type,
        event: JSON.stringify(data),
        page: window.location.href
      });
    };

    Logger.listen = function(event_type, element, callback) {
      if (!(event_type in listeners)) {
        listeners[event_type] = {};
      }
      if (!(element in listeners[event_type])) {
        return listeners[event_type][element] = [callback];
      } else {
        return listeners[event_type][element].push(callback);
      }
    };

    Logger.bind = function() {
      return window.onunload = function() {
        return $.ajaxWithPrefix({
          url: "/event",
          data: {
            event_type: 'page_close',
            event: '',
            page: window.location.href
          },
          async: false
        });
      };
    };

    return Logger;

  })();

  this.log_event = Logger.log;

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  AjaxPrefix.addAjaxPrefix(jQuery, function() {
    return CMS.prefix;
  });

  this.CMS = {
    Models: {},
    Views: {},
    Collections: {},
    URL: {},
    prefix: $("meta[name='path_prefix']").attr('content')
  };

  _.extend(CMS, Backbone.Events);

  $(function() {
    Backbone.emulateHTTP = true;
    $.ajaxSetup({
      headers: {
        'X-CSRFToken': $.cookie('csrftoken')
      },
      dataType: 'json'
    });
    $(document).ajaxError(function(event, jqXHR, ajaxSettings, thrownError) {
      var error, message, msg;
      if (ajaxSettings.notifyOnError === false) {
        return;
      }
      if (jqXHR.responseText) {
        try {
          message = JSON.parse(jqXHR.responseText).error;
        } catch (_error) {
          error = _error;
          message = _.str.truncate(jqXHR.responseText, 300);
        }
      } else {
        message = gettext("This may be happening because of an error with our server or your internet connection. Try refreshing the page or making sure you are online.");
      }
      msg = new CMS.Views.Notification.Error({
        "title": gettext("Studio's having trouble saving your work"),
        "message": message
      });
      return msg.show();
    });
    window.onTouchBasedDevice = function() {
      return navigator.userAgent.match(/iPhone|iPod|iPad/i);
    };
    if (onTouchBasedDevice()) {
      return $('body').addClass('touch-based-device');
    }
  });

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CMS.Models.Module = (function(_super) {
    __extends(Module, _super);

    function Module() {
      _ref = Module.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Module.prototype.url = '/save_item';

    return Module;

  })(Backbone.Model);

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CMS.Views.ModuleEdit = (function(_super) {
    __extends(ModuleEdit, _super);

    function ModuleEdit() {
      this.hideDataEditor = __bind(this.hideDataEditor, this);
      this.selectMode = __bind(this.selectMode, this);
      this.hasDataEditor = __bind(this.hasDataEditor, this);
      this.clickSaveButton = __bind(this.clickSaveButton, this);
      this.$component_editor = __bind(this.$component_editor, this);
      _ref = ModuleEdit.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ModuleEdit.prototype.tagName = 'li';

    ModuleEdit.prototype.className = 'component';

    ModuleEdit.prototype.editorMode = 'editor-mode';

    ModuleEdit.prototype.events = {
      "click .component-editor .cancel-button": 'clickCancelButton',
      "click .component-editor .save-button": 'clickSaveButton',
      "click .component-actions .edit-button": 'clickEditButton',
      "click .component-actions .delete-button": 'onDelete',
      "click .mode a": 'clickModeButton'
    };

    ModuleEdit.prototype.initialize = function() {
      this.onDelete = this.options.onDelete;
      return this.render();
    };

    ModuleEdit.prototype.$component_editor = function() {
      return this.$el.find('.component-editor');
    };

    ModuleEdit.prototype.loadDisplay = function() {
      return XModule.loadModule(this.$el.find('.xmodule_display'));
    };

    ModuleEdit.prototype.loadEdit = function() {
      var key, metadataData, metadataEditor, models, title;
      if (!this.module) {
        this.module = XModule.loadModule(this.$el.find('.xmodule_edit'));
        metadataEditor = this.$el.find('.metadata_edit');
        metadataData = metadataEditor.data('metadata');
        models = [];
        for (key in metadataData) {
          models.push(metadataData[key]);
        }
        this.metadataEditor = new CMS.Views.Metadata.Editor({
          el: metadataEditor,
          collection: new CMS.Models.MetadataCollection(models)
        });
        if (this.hasDataEditor()) {
          this.selectMode(this.editorMode);
        } else {
          this.hideDataEditor();
        }
        title = interpolate(gettext('<em>Editing:</em> %s'), [this.metadataEditor.getDisplayName()]);
        return this.$el.find('.component-name').html(title);
      }
    };

    ModuleEdit.prototype.customMetadata = function() {
      var el, _i, _len, _metadata, _ref1;
      _metadata = {};
      _ref1 = $('[data-metadata-name]', this.$component_editor());
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        _metadata[$(el).data("metadata-name")] = el.value;
      }
      return _metadata;
    };

    ModuleEdit.prototype.changedMetadata = function() {
      return _.extend(this.metadataEditor.getModifiedMetadataValues(), this.customMetadata());
    };

    ModuleEdit.prototype.createItem = function(parent, payload) {
      var _this = this;
      payload.parent_location = parent;
      return $.post("/create_item", payload, function(data) {
        _this.model.set({
          id: data.id
        });
        _this.$el.data('id', data.id);
        return _this.render();
      });
    };

    ModuleEdit.prototype.render = function() {
      var _this = this;
      if (this.model.id) {
        return this.$el.load("/preview_component/" + this.model.id, function() {
          _this.loadDisplay();
          return _this.delegateEvents();
        });
      }
    };

    ModuleEdit.prototype.clickSaveButton = function(event) {
      var data, saving,
        _this = this;
      event.preventDefault();
      data = this.module.save();
      analytics.track("Saved Module", {
        course: course_location_analytics,
        id: _this.model.id
      });
      data.metadata = _.extend(data.metadata || {}, this.changedMetadata());
      this.hideModal();
      saving = new CMS.Views.Notification.Mini({
        title: gettext('Saving') + '&hellip;'
      });
      saving.show();
      return this.model.save(data).done(function() {
        _this.module = null;
        _this.render();
        _this.$el.removeClass('editing');
        return saving.hide();
      }).fail(function() {
        return showToastMessage(gettext("There was an error saving your changes. Please try again."), null, 3);
      });
    };

    ModuleEdit.prototype.clickCancelButton = function(event) {
      event.preventDefault();
      this.$el.removeClass('editing');
      this.$component_editor().slideUp(150);
      return this.hideModal();
    };

    ModuleEdit.prototype.hideModal = function() {
      $modalCover.hide();
      return $modalCover.removeClass('is-fixed');
    };

    ModuleEdit.prototype.clickEditButton = function(event) {
      event.preventDefault();
      this.$el.addClass('editing');
      $modalCover.show().addClass('is-fixed');
      this.$component_editor().slideDown(150);
      return this.loadEdit();
    };

    ModuleEdit.prototype.clickModeButton = function(event) {
      event.preventDefault();
      if (!this.hasDataEditor()) {
        return;
      }
      return this.selectMode(event.currentTarget.parentElement.id);
    };

    ModuleEdit.prototype.hasDataEditor = function() {
      return this.$el.find('.wrapper-comp-editor').length > 0;
    };

    ModuleEdit.prototype.selectMode = function(mode) {
      var dataEditor, editorModeButton, settingsEditor, settingsModeButton;
      dataEditor = this.$el.find('.wrapper-comp-editor');
      settingsEditor = this.$el.find('.wrapper-comp-settings');
      editorModeButton = this.$el.find('#editor-mode').find("a");
      settingsModeButton = this.$el.find('#settings-mode').find("a");
      if (mode === this.editorMode) {
        dataEditor.removeClass('is-inactive');
        editorModeButton.addClass('is-set');
        settingsEditor.removeClass('is-active');
        return settingsModeButton.removeClass('is-set');
      } else {
        dataEditor.addClass('is-inactive');
        editorModeButton.removeClass('is-set');
        settingsEditor.addClass('is-active');
        return settingsModeButton.addClass('is-set');
      }
    };

    ModuleEdit.prototype.hideDataEditor = function() {
      var editorModeButtonParent;
      editorModeButtonParent = this.$el.find('#editor-mode');
      editorModeButtonParent.addClass('inactive-mode');
      editorModeButtonParent.removeClass('active-mode');
      this.$el.find('.wrapper-comp-settings').addClass('is-active');
      return this.$el.find('#settings-mode').find("a").addClass('is-set');
    };

    return ModuleEdit;

  })(Backbone.View);

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CMS.Views.TabsEdit = (function(_super) {
    __extends(TabsEdit, _super);

    function TabsEdit() {
      this.deleteTab = __bind(this.deleteTab, this);
      this.addNewTab = __bind(this.addNewTab, this);
      this.tabMoved = __bind(this.tabMoved, this);
      this.initialize = __bind(this.initialize, this);
      _ref = TabsEdit.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    TabsEdit.prototype.initialize = function() {
      var _this = this;
      this.$('.component').each(function(idx, element) {
        return new CMS.Views.ModuleEdit({
          el: element,
          onDelete: _this.deleteTab,
          model: new CMS.Models.Module({
            id: $(element).data('id')
          })
        });
      });
      this.options.mast.find('.new-tab').on('click', this.addNewTab);
      return this.$('.components').sortable({
        handle: '.drag-handle',
        update: this.tabMoved,
        helper: 'clone',
        opacity: '0.5',
        placeholder: 'component-placeholder',
        forcePlaceholderSize: true,
        axis: 'y',
        items: '> .component'
      });
    };

    TabsEdit.prototype.tabMoved = function(event, ui) {
      var tabs,
        _this = this;
      tabs = [];
      this.$('.component').each(function(idx, element) {
        return tabs.push($(element).data('id'));
      });
      analytics.track("Reordered Static Pages", {
        course: course_location_analytics
      });
      return $.ajax({
        type: 'POST',
        url: '/reorder_static_tabs',
        data: JSON.stringify({
          tabs: tabs
        }),
        contentType: 'application/json'
      });
    };

    TabsEdit.prototype.addNewTab = function(event) {
      var editor,
        _this = this;
      event.preventDefault();
      editor = new CMS.Views.ModuleEdit({
        onDelete: this.deleteTab,
        model: new CMS.Models.Module()
      });
      $('.new-component-item').before(editor.$el);
      editor.$el.addClass('new');
      setTimeout(function() {
        return editor.$el.removeClass('new');
      }, 500);
      editor.createItem(this.model.get('id'), {
        category: 'static_tab'
      });
      return analytics.track("Added Static Page", {
        course: course_location_analytics
      });
    };

    TabsEdit.prototype.deleteTab = function(event) {
      var confirm;
      confirm = new CMS.Views.Prompt.Warning({
        title: gettext('Delete Component Confirmation'),
        message: gettext('Are you sure you want to delete this component? This action cannot be undone.'),
        actions: {
          primary: {
            text: gettext("OK"),
            click: function(view) {
              var $component, deleting,
                _this = this;
              view.hide();
              $component = $(event.currentTarget).parents('.component');
              analytics.track("Deleted Static Page", {
                course: course_location_analytics,
                id: $component.data('id')
              });
              deleting = new CMS.Views.Notification.Mini({
                title: gettext('Deleting') + '&hellip;'
              });
              deleting.show();
              return $.post('/delete_item', {
                id: $component.data('id')
              }, function() {
                $component.remove();
                return deleting.hide();
              });
            }
          },
          secondary: [
            {
              text: gettext('Cancel'),
              click: function(view) {
                return view.hide();
              }
            }
          ]
        }
      });
      return confirm.show();
    };

    return TabsEdit;

  })(Backbone.View);

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1, _ref2, _ref3,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CMS.Views.UnitEdit = (function(_super) {
    __extends(UnitEdit, _super);

    function UnitEdit() {
      this.deleteComponent = __bind(this.deleteComponent, this);
      this.saveDraft = __bind(this.saveDraft, this);
      this.render = __bind(this.render, this);
      this.wait = __bind(this.wait, this);
      this.components = __bind(this.components, this);
      this.saveNewComponent = __bind(this.saveNewComponent, this);
      this.closeNewComponent = __bind(this.closeNewComponent, this);
      this.showComponentTemplates = __bind(this.showComponentTemplates, this);
      this.initialize = __bind(this.initialize, this);
      _ref = UnitEdit.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    UnitEdit.prototype.events = {
      'click .new-component .new-component-type a.multiple-templates': 'showComponentTemplates',
      'click .new-component .new-component-type a.single-template': 'saveNewComponent',
      'click .new-component .cancel-button': 'closeNewComponent',
      'click .new-component-templates .new-component-template a': 'saveNewComponent',
      'click .new-component-templates .cancel-button': 'closeNewComponent',
      'click .delete-draft': 'deleteDraft',
      'click .create-draft': 'createDraft',
      'click .publish-draft': 'publishDraft',
      'change .visibility-select': 'setVisibility'
    };

    UnitEdit.prototype.initialize = function() {
      var _this = this;
      this.visibilityView = new CMS.Views.UnitEdit.Visibility({
        el: this.$('.visibility-select'),
        model: this.model
      });
      this.locationView = new CMS.Views.UnitEdit.LocationState({
        el: this.$('.section-item.editing a'),
        model: this.model
      });
      this.nameView = new CMS.Views.UnitEdit.NameEdit({
        el: this.$('.unit-name-input'),
        model: this.model
      });
      this.model.on('change:state', this.render);
      this.$newComponentItem = this.$('.new-component-item');
      this.$newComponentTypePicker = this.$('.new-component');
      this.$newComponentTemplatePickers = this.$('.new-component-templates');
      this.$newComponentButton = this.$('.new-component-button');
      this.$('.components').sortable({
        handle: '.drag-handle',
        update: function(event, ui) {
          var options, payload, saving;
          analytics.track("Reordered Components", {
            course: course_location_analytics,
            id: unit_location_analytics
          });
          payload = {
            children: _this.components()
          };
          saving = new CMS.Views.Notification.Mini({
            title: gettext('Saving') + '&hellip;'
          });
          saving.show();
          options = {
            success: function() {
              _this.model.unset('children');
              return saving.hide();
            }
          };
          return _this.model.save(payload, options);
        },
        helper: 'clone',
        opacity: '0.5',
        placeholder: 'component-placeholder',
        forcePlaceholderSize: true,
        axis: 'y',
        items: '> .component'
      });
      return this.$('.component').each(function(idx, element) {
        return new CMS.Views.ModuleEdit({
          el: element,
          onDelete: _this.deleteComponent,
          model: new CMS.Models.Module({
            id: $(element).data('id')
          })
        });
      });
    };

    UnitEdit.prototype.showComponentTemplates = function(event) {
      var type;
      event.preventDefault();
      type = $(event.currentTarget).data('type');
      this.$newComponentTypePicker.slideUp(250);
      this.$(".new-component-" + type).slideDown(250);
      return $('html, body').animate({
        scrollTop: this.$(".new-component-" + type).offset().top
      }, 500);
    };

    UnitEdit.prototype.closeNewComponent = function(event) {
      event.preventDefault();
      this.$newComponentTypePicker.slideDown(250);
      this.$newComponentTemplatePickers.slideUp(250);
      this.$newComponentItem.removeClass('adding');
      return this.$newComponentItem.find('.rendered-component').remove();
    };

    UnitEdit.prototype.saveNewComponent = function(event) {
      var editor;
      event.preventDefault();
      editor = new CMS.Views.ModuleEdit({
        onDelete: this.deleteComponent,
        model: new CMS.Models.Module()
      });
      this.$newComponentItem.before(editor.$el);
      editor.createItem(this.$el.data('id'), $(event.currentTarget).data());
      analytics.track("Added a Component", {
        course: course_location_analytics,
        unit_id: unit_location_analytics,
        type: $(event.currentTarget).data('location')
      });
      return this.closeNewComponent(event);
    };

    UnitEdit.prototype.components = function() {
      return this.$('.component').map(function(idx, el) {
        return $(el).data('id');
      }).get();
    };

    UnitEdit.prototype.wait = function(value) {
      return this.$('.unit-body').toggleClass("waiting", value);
    };

    UnitEdit.prototype.render = function() {
      if (this.model.hasChanged('state')) {
        this.$el.toggleClass("edit-state-" + (this.model.previous('state')) + " edit-state-" + (this.model.get('state')));
        return this.wait(false);
      }
    };

    UnitEdit.prototype.saveDraft = function() {
      return this.model.save();
    };

    UnitEdit.prototype.deleteComponent = function(event) {
      var msg,
        _this = this;
      event.preventDefault();
      msg = new CMS.Views.Prompt.Warning({
        title: gettext('Delete this component?'),
        message: gettext('Deleting this component is permanent and cannot be undone.'),
        actions: {
          primary: {
            text: gettext('Yes, delete this component'),
            click: function(view) {
              var $component, deleting;
              view.hide();
              deleting = new CMS.Views.Notification.Mini({
                title: gettext('Deleting') + '&hellip;'
              });
              deleting.show();
              $component = $(event.currentTarget).parents('.component');
              return $.post('/delete_item', {
                id: $component.data('id')
              }, function() {
                deleting.hide();
                analytics.track("Deleted a Component", {
                  course: course_location_analytics,
                  unit_id: unit_location_analytics,
                  id: $component.data('id')
                });
                $component.remove();
                return _this.model.save({children: _this.components()},
                {success: function(model) {
                model.unset('children');
                }}
              );;
              });
            }
          },
          secondary: {
            text: gettext('Cancel'),
            click: function(view) {
              return view.hide();
            }
          }
        }
      });
      return msg.show();
    };

    UnitEdit.prototype.deleteDraft = function(event) {
      var _this = this;
      this.wait(true);
      return $.post('/delete_item', {
        id: this.$el.data('id'),
        delete_children: true
      }, function() {
        analytics.track("Deleted Draft", {
          course: course_location_analytics,
          unit_id: unit_location_analytics
        });
        return window.location.reload();
      });
    };

    UnitEdit.prototype.createDraft = function(event) {
      var _this = this;
      this.wait(true);
      return $.post('/create_draft', {
        id: this.$el.data('id')
      }, function() {
        analytics.track("Created Draft", {
          course: course_location_analytics,
          unit_id: unit_location_analytics
        });
        return _this.model.set('state', 'draft');
      });
    };

    UnitEdit.prototype.publishDraft = function(event) {
      var _this = this;
      this.wait(true);
      this.saveDraft();
      return $.post('/publish_draft', {
        id: this.$el.data('id')
      }, function() {
        analytics.track("Published Draft", {
          course: course_location_analytics,
          unit_id: unit_location_analytics
        });
        return _this.model.set('state', 'public');
      });
    };

    UnitEdit.prototype.setVisibility = function(event) {
      var target_url, visibility,
        _this = this;
      if (this.$('.visibility-select').val() === 'private') {
        target_url = '/unpublish_unit';
        visibility = "private";
      } else {
        target_url = '/publish_draft';
        visibility = "public";
      }
      this.wait(true);
      return $.post(target_url, {
        id: this.$el.data('id')
      }, function() {
        analytics.track("Set Unit Visibility", {
          course: course_location_analytics,
          unit_id: unit_location_analytics,
          visibility: visibility
        });
        return _this.model.set('state', _this.$('.visibility-select').val());
      });
    };

    return UnitEdit;

  })(Backbone.View);

  CMS.Views.UnitEdit.NameEdit = (function(_super) {
    __extends(NameEdit, _super);

    function NameEdit() {
      this.saveName = __bind(this.saveName, this);
      this.setEnabled = __bind(this.setEnabled, this);
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      _ref1 = NameEdit.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    NameEdit.prototype.events = {
      'change .unit-display-name-input': 'saveName'
    };

    NameEdit.prototype.initialize = function() {
      this.model.on('change:metadata', this.render);
      this.model.on('change:state', this.setEnabled);
      this.setEnabled();
      this.saveName;
      return this.$spinner = $('<span class="spinner-in-field-icon"></span>');
    };

    NameEdit.prototype.render = function() {
      return this.$('.unit-display-name-input').val(this.model.get('metadata').display_name);
    };

    NameEdit.prototype.setEnabled = function() {
      var disabled;
      disabled = this.model.get('state') === 'public';
      if (disabled) {
        return this.$('.unit-display-name-input').attr('disabled', true);
      } else {
        return this.$('.unit-display-name-input').removeAttr('disabled');
      }
    };

    NameEdit.prototype.saveName = function() {
      var metadata;
      metadata = $.extend({}, this.model.get('metadata'));
      metadata.display_name = this.$('.unit-display-name-input').val();
      this.model.save({
        metadata: metadata
      });
      $('.unit-location .editing .unit-name').html(metadata.display_name);
      return analytics.track("Edited Unit Name", {
        course: course_location_analytics,
        unit_id: unit_location_analytics,
        display_name: metadata.display_name
      });
    };

    return NameEdit;

  })(Backbone.View);

  CMS.Views.UnitEdit.LocationState = (function(_super) {
    __extends(LocationState, _super);

    function LocationState() {
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      _ref2 = LocationState.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    LocationState.prototype.initialize = function() {
      return this.model.on('change:state', this.render);
    };

    LocationState.prototype.render = function() {
      return this.$el.toggleClass("" + (this.model.previous('state')) + "-item " + (this.model.get('state')) + "-item");
    };

    return LocationState;

  })(Backbone.View);

  CMS.Views.UnitEdit.Visibility = (function(_super) {
    __extends(Visibility, _super);

    function Visibility() {
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      _ref3 = Visibility.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Visibility.prototype.initialize = function() {
      this.model.on('change:state', this.render);
      return this.render();
    };

    Visibility.prototype.render = function() {
      return this.$el.val(this.model.get('state'));
    };

    return Visibility;

  })(Backbone.View);

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var XProblemDisplay, XProblemGenerator, XProblemGrader, root;

  XProblemGenerator = (function() {
    function XProblemGenerator(seed, parameters) {
      this.parameters = parameters != null ? parameters : {};
      this.random = new MersenneTwister(seed);
      this.problemState = {};
    }

    XProblemGenerator.prototype.generate = function() {
      return console.error("Abstract method called: XProblemGenerator.generate");
    };

    return XProblemGenerator;

  })();

  XProblemDisplay = (function() {
    function XProblemDisplay(state, submission, evaluation, container, submissionField, parameters) {
      this.state = state;
      this.submission = submission;
      this.evaluation = evaluation;
      this.container = container;
      this.submissionField = submissionField;
      this.parameters = parameters != null ? parameters : {};
    }

    XProblemDisplay.prototype.render = function() {
      return console.error("Abstract method called: XProblemDisplay.render");
    };

    XProblemDisplay.prototype.updateSubmission = function() {
      return this.submissionField.val(JSON.stringify(this.getCurrentSubmission()));
    };

    XProblemDisplay.prototype.getCurrentSubmission = function() {
      return console.error("Abstract method called: XProblemDisplay.getCurrentSubmission");
    };

    return XProblemDisplay;

  })();

  XProblemGrader = (function() {
    function XProblemGrader(submission, problemState, parameters) {
      this.submission = submission;
      this.problemState = problemState;
      this.parameters = parameters != null ? parameters : {};
      this.solution = null;
      this.evaluation = {};
    }

    XProblemGrader.prototype.solve = function() {
      return console.error("Abstract method called: XProblemGrader.solve");
    };

    XProblemGrader.prototype.grade = function() {
      return console.error("Abstract method called: XProblemGrader.grade");
    };

    return XProblemGrader;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.XProblemGenerator = XProblemGenerator;

  root.XProblemDisplay = XProblemDisplay;

  root.XProblemGrader = XProblemGrader;

}).call(this);

/*
 * Create a HesitateEvent and assign it as the event to execute:
 *   $(el).on('mouseEnter', CMS.HesitateEvent( expand, 'mouseLeave').trigger);
 *   It calls the executeOnTimeOut function with the event.currentTarget after the configurable timeout IFF the cancelSelector event
 *   did not occur on the event.currentTarget.
 *
 *   More specifically, when trigger is called (triggered by the event you bound it to), it starts a timer
 *   which the cancelSelector event will cancel or if the timer finished, it executes the executeOnTimeOut function
 *   passing it the original event (whose currentTarget s/b the specific ele). It never accumulates events; however, it doesn't hurt for your
 *   code to minimize invocations of trigger by binding to mouseEnter v mouseOver and such.
 *
 *   NOTE: if something outside of this wants to cancel the event, invoke cachedhesitation.untrigger(null | anything);
 */

CMS.HesitateEvent = function(executeOnTimeOut, cancelSelector, onlyOnce) {
	this.executeOnTimeOut = executeOnTimeOut;
	this.cancelSelector = cancelSelector;
	this.timeoutEventId = null;
	this.originalEvent = null;
	this.onlyOnce = (onlyOnce === true);
};

CMS.HesitateEvent.DURATION = 800;

CMS.HesitateEvent.prototype.trigger = function(event) {
	if (event.data.timeoutEventId == null) {
		event.data.timeoutEventId = window.setTimeout(
				function() { event.data.fireEvent(event); },
				CMS.HesitateEvent.DURATION);
		event.data.originalEvent = event;
		$(event.data.originalEvent.delegateTarget).on(event.data.cancelSelector, event.data, event.data.untrigger);
	}
};

CMS.HesitateEvent.prototype.fireEvent = function(event) {
	event.data.timeoutEventId = null;
	$(event.data.originalEvent.delegateTarget).off(event.data.cancelSelector, event.data.untrigger);
	if (event.data.onlyOnce) $(event.data.originalEvent.delegateTarget).off(event.data.originalEvent.type, event.data.trigger);
	event.data.executeOnTimeOut(event.data.originalEvent);
};

CMS.HesitateEvent.prototype.untrigger = function(event) {
	if (event.data.timeoutEventId) {
		window.clearTimeout(event.data.timeoutEventId);
		$(event.data.originalEvent.delegateTarget).off(event.data.cancelSelector, event.data.untrigger);
	}
	event.data.timeoutEventId = null;
};

if (!window.CmsUtils) window.CmsUtils = {};

var $body;
var $modal;
var $modalCover;
var $newComponentItem;
var $changedInput;
var $spinner;
var $newComponentTypePicker;
var $newComponentTemplatePickers;
var $newComponentButton;

$(document).ready(function() {
    $body = $('body');
    $modal = $('.history-modal');
    $modalCover = $('<div class="modal-cover">');
    // cdodge: this looks funny, but on AWS instances, this base.js get's wrapped in a separate scope as part of Django static
    // pipelining (note, this doesn't happen on local runtimes). So if we set it on window, when we can access it from other
    // scopes (namely the course-info tab)
    window.$modalCover = $modalCover;

    $body.append($modalCover);
    $newComponentItem = $('.new-component-item');
    $newComponentTypePicker = $('.new-component');
    $newComponentTemplatePickers = $('.new-component-templates');
    $newComponentButton = $('.new-component-button');
    $spinner = $('<span class="spinner-in-field-icon"></span>');

    $('.expand-collapse-icon').bind('click', toggleSubmodules);
    $('.visibility-options').bind('change', setVisibility);

    $modal.bind('click', hideModal);
    $modalCover.bind('click', hideModal);

    $body.on('click', '.embeddable-xml-input', function() {
        $(this).select();
    });

    $('body').addClass('js');

    $('.unit .item-actions .delete-button').bind('click', deleteUnit);
    $('.new-unit-item').bind('click', createNewUnit);

    // lean/simple modal
    $('a[rel*=modal]').leanModal({
        overlay: 0.80,
        closeButton: '.action-modal-close'
    });
    $('a.action-modal-close').click(function(e) {
        (e).preventDefault();
    });

    // alerts/notifications - manual close
    $('.action-alert-close, .alert.has-actions .nav-actions a').bind('click', hideAlert);
    $('.action-notification-close').bind('click', hideNotification);

    // nav - dropdown related
    $body.click(function(e) {
        $('.nav-dd .nav-item .wrapper-nav-sub').removeClass('is-shown');
        $('.nav-dd .nav-item .title').removeClass('is-selected');
    });

    $('.nav-dd .nav-item').click(function(e) {

        $subnav = $(this).find('.wrapper-nav-sub');
        $title = $(this).find('.title');

        if ($subnav.hasClass('is-shown')) {
            $subnav.removeClass('is-shown');
            $title.removeClass('is-selected');
        } else {
            $('.nav-dd .nav-item .title').removeClass('is-selected');
            $('.nav-dd .nav-item .wrapper-nav-sub').removeClass('is-shown');
            $title.addClass('is-selected');
            $subnav.addClass('is-shown');
            // if propogation is not stopped, the event will bubble up to the
            // body element, which will close the dropdown.
            e.stopPropagation();
        }
    });

    // general link management - new window/tab
    $('a[rel="external"]').attr('title', gettext('This link will open in a new browser window/tab')).bind('click', linkNewWindow);

    // general link management - lean modal window
    $('a[rel="modal"]').attr('title', gettext('This link will open in a modal window')).leanModal({
        overlay: 0.50,
        closeButton: '.action-modal-close'
    });
    $('.action-modal-close').click(function(e) {
        (e).preventDefault();
    });

    // general link management - smooth scrolling page links
    $('a[rel*="view"][href^="#"]').bind('click', smoothScrollLink);

    // tender feedback window scrolling
    $('a.show-tender').bind('click', window.CmsUtils.smoothScrollTop);

    // toggling footer additional support
    $('.cta-show-sock').bind('click', toggleSock);

    // toggling overview section details
    $(function() {
        if ($('.courseware-section').length > 0) {
            $('.toggle-button-sections').addClass('is-shown');
        }
    });
    $('.toggle-button-sections').bind('click', toggleSections);

    // autosave when leaving input field
    $body.on('change', '.subsection-display-name-input', saveSubsection);
    $('.subsection-display-name-input').each(function() {
        this.val = $(this).val();
    });
    $("#start_date, #start_time, #due_date, #due_time").bind('change', autosaveInput);
    $('.sync-date, .remove-date').bind('click', autosaveInput);

    // expand/collapse methods for optional date setters
    $('.set-date').bind('click', showDateSetter);
    $('.remove-date').bind('click', removeDateSetter);
    // add new/delete section
    $('.new-courseware-section-button').bind('click', addNewSection);
    $('.delete-section-button').bind('click', deleteSection);

    // add new/delete subsection
    $('.new-subsection-item').bind('click', addNewSubsection);
    $('.delete-subsection-button').bind('click', deleteSubsection);

    $('.sync-date').bind('click', syncReleaseDate);

    // import form setup
    $('.import .file-input').bind('change', showImportSubmit);
    $('.import .choose-file-button, .import .choose-file-button-inline').bind('click', function(e) {
        e.preventDefault();
        $('.import .file-input').click();
    });

    $('.new-course-button').bind('click', addNewCourse);

    // section date setting
    $('.set-publish-date').bind('click', setSectionScheduleDate);
    $('.edit-section-start-cancel').bind('click', cancelSetSectionScheduleDate);
    $('.edit-section-start-save').bind('click', saveSetSectionScheduleDate);

    $body.on('click', '.section-published-date .edit-button', editSectionPublishDate);
    $body.on('click', '.section-published-date .schedule-button', editSectionPublishDate);
    $body.on('click', '.edit-subsection-publish-settings .save-button', saveSetSectionScheduleDate);
    $body.on('click', '.edit-subsection-publish-settings .cancel-button', hideModal);
    $body.on('change', '.edit-subsection-publish-settings .start-date', function() {
        if ($('.edit-subsection-publish-settings').find('.start-time').val() == '') {
            $('.edit-subsection-publish-settings').find('.start-time').val('12:00am');
        }
    });
    $('.edit-subsection-publish-settings').on('change', '.start-date, .start-time', function() {
        $('.edit-subsection-publish-settings').find('.save-button').show();
    });
});

function smoothScrollLink(e) {
    (e).preventDefault();

    $.smoothScroll({
        offset: -200,
        easing: 'swing',
        speed: 1000,
        scrollElement: null,
        scrollTarget: $(this).attr('href')
    });
}

// On AWS instances, this base.js gets wrapped in a separate scope as part of Django static
// pipelining (note, this doesn't happen on local runtimes). So if we set it on window,
//  when we can access it from other scopes (namely Course Advanced Settings).
window.CmsUtils.smoothScrollTop = function(e) {
    (e).preventDefault();

    $.smoothScroll({
        offset: -200,
        easing: 'swing',
        speed: 1000,
        scrollElement: null,
        scrollTarget: $('#view-top')
    });
}

function linkNewWindow(e) {
    window.open($(e.target).attr('href'));
    e.preventDefault();
}

// On AWS instances, base.js gets wrapped in a separate scope as part of Django static
// pipelining (note, this doesn't happen on local runtimes). So if we set it on window,
// when we can access it from other scopes (namely the checklists)
window.cmsLinkNewWindow = linkNewWindow;

function toggleSections(e) {
    e.preventDefault();

    $section = $('.courseware-section');
    sectionCount = $section.length;
    $button = $(this);
    $labelCollapsed = $('<i class="icon-arrow-up"></i> <span class="label">' +
        gettext('Collapse All Sections') + '</span>');
    $labelExpanded = $('<i class="icon-arrow-down"></i> <span class="label">' +
        gettext('Expand All Sections') + '</span>');

    var buttonLabel = $button.hasClass('is-activated') ? $labelCollapsed : $labelExpanded;
    $button.toggleClass('is-activated').html(buttonLabel);

    if ($button.hasClass('is-activated')) {
        $section.addClass('collapsed');
        // first child in order to avoid the icons on the subsection lists which are not in the first child
        $section.find('header .expand-collapse-icon').removeClass('collapse').addClass('expand');
    } else {
        $section.removeClass('collapsed');
        // first child in order to avoid the icons on the subsection lists which are not in the first child
        $section.find('header .expand-collapse-icon').removeClass('expand').addClass('collapse');
    }
}

function editSectionPublishDate(e) {
    e.preventDefault();
    $modal = $('.edit-subsection-publish-settings').show();
    $modal.attr('data-id', $(this).attr('data-id'));
    $modal.find('.start-date').val($(this).attr('data-date'));
    $modal.find('.start-time').val($(this).attr('data-time'));
    if ($modal.find('.start-date').val() == '' && $modal.find('.start-time').val() == '') {
        $modal.find('.save-button').hide();
    }
    $modal.find('.section-name').html('"' + $(this).closest('.courseware-section').find('.section-name-span').text() + '"');
    $modalCover.show();
}

function showImportSubmit(e) {
    var filepath = $(this).val();
    if (filepath.substr(filepath.length - 6, 6) == 'tar.gz') {
        $('.error-block').hide();
        $('.file-name').html($(this).val().replace('C:\\fakepath\\', ''));
        $('.file-name-block').show();
        $('.import .choose-file-button').hide();
        $('.submit-button').show();
        $('.progress').show();
    } else {
        $('.error-block').html(gettext('File format not supported. Please upload a file with a <code>tar.gz</code> extension.')).show();
    }
}

function syncReleaseDate(e) {
    e.preventDefault();
    $(this).closest('.notice').hide();
    $("#start_date").val("");
    $("#start_time").val("");
}

function getDatetime(datepickerInput, timepickerInput) {
    // given a pair of inputs (datepicker and timepicker), return a JS Date
    // object that corresponds to the datetime that they represent. Assume
    // UTC timezone, NOT the timezone of the user's browser.
    var date = $(datepickerInput).datepicker("getDate");
    var time = $(timepickerInput).timepicker("getTime");
    if(date && time) {
        return new Date(Date.UTC(
            date.getFullYear(), date.getMonth(), date.getDate(),
            time.getHours(), time.getMinutes()
        ));
    } else {
        return null;
    }
}

function autosaveInput(e) {
    var self = this;
    if (this.saveTimer) {
        clearTimeout(this.saveTimer);
    }

    this.saveTimer = setTimeout(function() {
        $changedInput = $(e.target);
        saveSubsection();
        self.saveTimer = null;
    }, 500);
}

function saveSubsection() {
    // Spinner is no longer used by subsection name, but is still used by date and time pickers on the right.
    if ($changedInput && !$changedInput.hasClass('no-spinner')) {
        $spinner.css({
            'position': 'absolute',
            'top': Math.floor($changedInput.position().top + ($changedInput.outerHeight() / 2) + 3),
            'left': $changedInput.position().left + $changedInput.outerWidth() - 24,
            'margin-top': '-10px'
        });
        $changedInput.after($spinner);
        $spinner.show();
    }

    var id = $('.subsection-body').data('id');

    // pull all 'normalized' metadata editable fields on page
    var metadata_fields = $('input[data-metadata-name]');

    var metadata = {};
    for (var i = 0; i < metadata_fields.length; i++) {
        var el = metadata_fields[i];
        metadata[$(el).data("metadata-name")] = el.value;
    }

    // get datetimes for start and due, stick into metadata
    _(["start", "due"]).each(function(name) {

        var datetime = getDatetime(
            document.getElementById(name+"_date"),
            document.getElementById(name+"_time")
        );
        // if datetime is null, we want to set that in metadata anyway;
        // its an indication to the server to clear the datetime in the DB
        metadata[name] = datetime;
    });

    $.ajax({
        url: "/save_item",
        type: "POST",
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify({
            'id': id,
            'metadata': metadata
        }),
        success: function() {
            $spinner.delay(500).fadeOut(150);
            $changedInput = null;
        },
        error: function() {
            showToastMessage(gettext('There has been an error while saving your changes.'));
        }
    });
}


function createNewUnit(e) {
    e.preventDefault();

    var parent = $(this).data('parent');
    var category = $(this).data('category');

    analytics.track('Created a Unit', {
        'course': course_location_analytics,
        'parent_location': parent
    });


    $.post('/create_item', {
        'parent_location': parent,
        'category': category,
        'display_name': 'New Unit'
    },

    function(data) {
        // redirect to the edit page
        window.location = "/edit/" + data['id'];
    });
}

function deleteUnit(e) {
    e.preventDefault();
    _deleteItem($(this).parents('li.leaf'), 'Unit');
}

function deleteSubsection(e) {
    e.preventDefault();
    _deleteItem($(this).parents('li.branch'), 'Subsection');
}

function deleteSection(e) {
    e.preventDefault();
    _deleteItem($(this).parents('section.branch'), 'Section');
}

function _deleteItem($el, type) {
    var confirm = new CMS.Views.Prompt.Warning({
        title: gettext('Delete this ' + type + '?'),
        message: gettext('Deleting this ' + type + ' is permanent and cannot be undone.'),
        actions: {
            primary: {
                text: gettext('Yes, delete this ' + type),
                click: function(view) {
                    view.hide();

                    var id = $el.data('id');

                    analytics.track('Deleted an Item', {
                        'course': course_location_analytics,
                        'id': id
                    });

                    var deleting = new CMS.Views.Notification.Mini({
                        title: gettext('Deleting') + '&hellip;'
                    });
                    deleting.show();

                    $.post('/delete_item',
                           {'id': id,
                            'delete_children': true,
                            'delete_all_versions': true},
                           function(data) {
                               $el.remove();
                               deleting.hide();
                           }
                          );
                }
            },
            secondary: {
                text: gettext('Cancel'),
                click: function(view) {
                    view.hide();
                }
            }
        }
    });
    confirm.show();
}

function markAsLoaded() {
    $('.upload-modal .copy-button').css('display', 'inline-block');
    $('.upload-modal .progress-bar').addClass('loaded');
}

function hideModal(e) {
    if (e) {
        e.preventDefault();
    }
    // Unit editors do not want the modal cover to hide when users click outside
    // of the editor. Users must press Cancel or Save to exit the editor.
    // module_edit adds and removes the "is-fixed" class.
    if (!$modalCover.hasClass("is-fixed")) {
        $('.file-input').unbind('change', startUpload);
        $modal.hide();
        $modalCover.hide();
    }
}

function toggleSock(e) {
    e.preventDefault();

    var $btnLabel = $(this).find('.copy');
    var $sock = $('.wrapper-sock');
    var $sockContent = $sock.find('.wrapper-inner');

    $sock.toggleClass('is-shown');
    $sockContent.toggle('fast');

    $.smoothScroll({
        offset: -200,
        easing: 'swing',
        speed: 1000,
        scrollElement: null,
        scrollTarget: $sock
    });

    if ($sock.hasClass('is-shown')) {
        $btnLabel.text(gettext('Hide Studio Help'));
    } else {
        $btnLabel.text(gettext('Looking for Help with Studio?'));
    }
}

function toggleSubmodules(e) {
    e.preventDefault();
    $(this).toggleClass('expand').toggleClass('collapse');
    $(this).closest('.branch, .window').toggleClass('collapsed');
}

function setVisibility(e) {
    $(this).find('.checked').removeClass('checked');
    $(e.target).closest('.option').addClass('checked');
}

function editComponent(e) {
    e.preventDefault();
    $(this).closest('.xmodule_edit').addClass('editing').find('.component-editor').slideDown(150);
}

function closeComponentEditor(e) {
    e.preventDefault();
    $(this).closest('.xmodule_edit').removeClass('editing').find('.component-editor').slideUp(150);
}

function showDateSetter(e) {
    e.preventDefault();
    var $block = $(this).closest('.due-date-input');
    $(this).hide();
    $block.find('.date-setter').show();
}

function removeDateSetter(e) {
    e.preventDefault();
    var $block = $(this).closest('.due-date-input');
    $block.find('.date-setter').hide();
    $block.find('.set-date').show();
    // clear out the values
    $block.find('.date').val('');
    $block.find('.time').val('');
}


function hideNotification(e) {
    (e).preventDefault();
    $(this).closest('.wrapper-notification').removeClass('is-shown').addClass('is-hiding').attr('aria-hidden', 'true');
}

function hideAlert(e) {
    (e).preventDefault();
    $(this).closest('.wrapper-alert').removeClass('is-shown');
}

function showToastMessage(message, $button, lifespan) {
    var $toast = $('<div class="toast-notification"></div>');
    var $closeBtn = $('<a href="#" class="close-button">×</a>');
    $toast.append($closeBtn);
    var $content = $('<div class="notification-content"></div>');
    $content.html(message);
    $toast.append($content);
    if ($button) {
        $button.addClass('action-button');
        $button.bind('click', hideToastMessage);
        $content.append($button);
    }
    $closeBtn.bind('click', hideToastMessage);

    if ($('.toast-notification')[0]) {
        var targetY = $('.toast-notification').offset().top + $('.toast-notification').outerHeight();
        $toast.css('top', (targetY + 10) + 'px');
    }

    $body.prepend($toast);
    $toast.fadeIn(200);

    if (lifespan) {
        $toast.timer = setTimeout(function() {
            $toast.fadeOut(300);
        }, lifespan * 1000);
    }
}

function hideToastMessage(e) {
    e.preventDefault();
    $(this).closest('.toast-notification').remove();
}

function addNewSection(e, isTemplate) {
    e.preventDefault();

    $(e.target).addClass('disabled');

    var $newSection = $($('#new-section-template').html());
    var $cancelButton = $newSection.find('.new-section-name-cancel');
    $('.courseware-overview').prepend($newSection);
    $newSection.find('.new-section-name').focus().select();
    $newSection.find('.section-name-form').bind('submit', saveNewSection);
    $cancelButton.bind('click', cancelNewSection);
    $body.bind('keyup', {
        $cancelButton: $cancelButton
    }, checkForCancel);
}

function checkForCancel(e) {
    if (e.which == 27) {
        $body.unbind('keyup', checkForCancel);
        e.data.$cancelButton.click();
    }
}


function saveNewSection(e) {
    e.preventDefault();

    var $saveButton = $(this).find('.new-section-name-save');
    var parent = $saveButton.data('parent');
    var category = $saveButton.data('category');
    var display_name = $(this).find('.new-section-name').val();

    analytics.track('Created a Section', {
        'course': course_location_analytics,
        'display_name': display_name
    });

    $.post('/create_item', {
        'parent_location': parent,
        'category': category,
        'display_name': display_name,
    },

    function(data) {
        if (data.id != undefined) location.reload();
    });
}

function cancelNewSection(e) {
    e.preventDefault();
    $('.new-courseware-section-button').removeClass('disabled');
    $(this).parents('section.new-section').remove();
}

function addNewCourse(e) {
    e.preventDefault();
    $('.new-course-button').addClass('is-disabled');
    $('.new-course-save').addClass('is-disabled');
    var $newCourse = $('.wrapper-create-course').addClass('is-shown');
    var $cancelButton = $newCourse.find('.new-course-cancel');
    var $courseName = $('.new-course-name');
    $courseName.focus().select();
    $('.new-course-save').on('click', saveNewCourse);
    $cancelButton.bind('click', cancelNewCourse);
    $body.bind('keyup', {
        $cancelButton: $cancelButton
    }, checkForCancel);

    // Check that a course (org, number, run) doesn't use any special characters
    var validateCourseItemEncoding = function(item) {
        var required = validateRequiredField(item);
        if(required) {
            return required;
        }
        if(item !== encodeURIComponent(item)) {
            return gettext('Please do not use any spaces or special characters in this field.');
        }
        return '';
    }

    // Ensure that all items are less than 80 characters.
    var validateTotalCourseItemsLength = function() {
        var totalLength = _.reduce(
            ['.new-course-name', '.new-course-org', '.new-course-number', '.new-course-run'],
            function(sum, ele) {
                return sum + $(ele).val().length;
        }, 0
        );
        if(totalLength > 80) {
            $('.wrap-error').addClass('is-shown');
            $('#course_creation_error').html('<p>' + gettext('Course fields must have a combined length of no more than 80 characters.') + '</p>');
            $('.new-course-save').addClass('is-disabled');
        }
        else {
            $('.wrap-error').removeClass('is-shown');
        }
    }

    // Handle validation asynchronously
    _.each(
        ['.new-course-org', '.new-course-number', '.new-course-run'],
        function(ele) {
            var $ele = $(ele);
            $ele.on('keyup', function(event) {
                // Don't bother showing "required field" error when
                // the user tabs into a new field; this is distracting
                // and unnecessary
                if(event.keyCode === 9) {
                    return;
                }
                var error = validateCourseItemEncoding($ele.val());
                setNewCourseFieldInErr($ele.parent('li'), error);
                validateTotalCourseItemsLength();
            });
        }
    );
    var $name = $('.new-course-name');
    $name.on('keyup', function() {
        var error = validateRequiredField($name.val());
        setNewCourseFieldInErr($name.parent('li'), error);
        validateTotalCourseItemsLength();
    });
}

function validateRequiredField(msg) {
    return msg.length === 0 ? gettext('Required field.') : '';
}

function setNewCourseFieldInErr(el, msg) {
    if(msg) {
        el.addClass('error');
        el.children('span.tip-error').addClass('is-showing').removeClass('is-hiding').text(msg);
        $('.new-course-save').addClass('is-disabled');
    }
    else {
        el.removeClass('error');
        el.children('span.tip-error').addClass('is-hiding').removeClass('is-showing');
        // One "error" div is always present, but hidden or shown
        if($('.error').length === 1) {
            $('.new-course-save').removeClass('is-disabled');
        }
    }
};

function saveNewCourse(e) {
    e.preventDefault();

    // One final check for empty values
    var errors = _.reduce(
        ['.new-course-name', '.new-course-org', '.new-course-number', '.new-course-run'],
        function(acc, ele) {
            var $ele = $(ele);
            var error = validateRequiredField($ele.val());
            setNewCourseFieldInErr($ele.parent('li'), error);
            return error ? true : acc;
        },
        false
    );

    if(errors) {
        return;
    }

    var $newCourseForm = $(this).closest('#create-course-form');
    var display_name = $newCourseForm.find('.new-course-name').val();
    var org = $newCourseForm.find('.new-course-org').val();
    var number = $newCourseForm.find('.new-course-number').val();
    var run = $newCourseForm.find('.new-course-run').val();

    analytics.track('Created a Course', {
        'org': org,
        'number': number,
        'display_name': display_name,
        'run': run
    });

    $.post('/create_new_course', {
            'org': org,
            'number': number,
            'display_name': display_name,
            'run': run
        },
        function(data) {
            if (data.id !== undefined) {
                window.location = '/' + data.id.replace(/.*:\/\//, '');
            } else if (data.ErrMsg !== undefined) {
                $('.wrap-error').addClass('is-shown');
                $('#course_creation_error').html('<p>' + data.ErrMsg + '</p>');
                $('.new-course-save').addClass('is-disabled');
            }
        }
    );
}

function cancelNewCourse(e) {
    e.preventDefault();
    $('.new-course-button').removeClass('is-disabled');
    $('.wrapper-create-course').removeClass('is-shown');
    // Clear out existing fields and errors
    _.each(
        ['.new-course-name', '.new-course-org', '.new-course-number', '.new-course-run'],
        function(field) {
            $(field).val('');
        }
    );
    $('#course_creation_error').html('');
    $('.wrap-error').removeClass('is-shown');
    $('.new-course-save').off('click');
}

function addNewSubsection(e) {
    e.preventDefault();
    var $section = $(this).closest('.courseware-section');
    var $newSubsection = $($('#new-subsection-template').html());
    $section.find('.subsection-list > ol').append($newSubsection);
    $section.find('.new-subsection-name-input').focus().select();

    var $saveButton = $newSubsection.find('.new-subsection-name-save');
    var $cancelButton = $newSubsection.find('.new-subsection-name-cancel');

    var parent = $(this).parents("section.branch").data("id");

    $saveButton.data('parent', parent);
    $saveButton.data('category', $(this).data('category'));

    $newSubsection.find('.new-subsection-form').bind('submit', saveNewSubsection);
    $cancelButton.bind('click', cancelNewSubsection);
    $body.bind('keyup', {
        $cancelButton: $cancelButton
    }, checkForCancel);
}

function saveNewSubsection(e) {
    e.preventDefault();

    var parent = $(this).find('.new-subsection-name-save').data('parent');
    var category = $(this).find('.new-subsection-name-save').data('category');
    var display_name = $(this).find('.new-subsection-name-input').val();

    analytics.track('Created a Subsection', {
        'course': course_location_analytics,
        'display_name': display_name
    });


    $.post('/create_item', {
        'parent_location': parent,
        'category': category,
        'display_name': display_name
    },

    function(data) {
        if (data.id != undefined) {
            location.reload();
        }
    });
}

function cancelNewSubsection(e) {
    e.preventDefault();
    $(this).parents('li.branch').remove();
}

function setSectionScheduleDate(e) {
    e.preventDefault();
    $(this).closest("h4").hide();
    $(this).parent().siblings(".datepair").show();
}

function cancelSetSectionScheduleDate(e) {
    e.preventDefault();
    $(this).closest(".datepair").hide();
    $(this).parent().siblings("h4").show();
}

function saveSetSectionScheduleDate(e) {
    e.preventDefault();

    var datetime = getDatetime(
        $('.edit-subsection-publish-settings .start-date'),
        $('.edit-subsection-publish-settings .start-time')
    );

    var id = $modal.attr('data-id');

    analytics.track('Edited Section Release Date', {
        'course': course_location_analytics,
        'id': id,
        'start': datetime
    });

    var saving = new CMS.Views.Notification.Mini({
        title: gettext("Saving") + "&hellip;"
    });
    saving.show();
    // call into server to commit the new order
    $.ajax({
        url: "/save_item",
        type: "POST",
        dataType: "json",
        contentType: "application/json",
        data: JSON.stringify({
            'id': id,
            'metadata': {
                'start': datetime
            }
        })
    }).success(function() {
        var pad2 = function(number) {
            // pad a number to two places: useful for formatting months, days, hours, etc
            // when displaying a date/time
            return (number < 10 ? '0' : '') + number;
        };

        var $thisSection = $('.courseware-section[data-id="' + id + '"]');
        var html = _.template(
            '<span class="published-status">' +
                '<strong>' + gettext("Will Release:") + '&nbsp;</strong>' +
                gettext("{month}/{day}/{year} at {hour}:{minute} UTC") +
            '</span>' +
            '<a href="#" class="edit-button" data-date="{month}/{day}/{year}" data-time="{hour}:{minute}" data-id="{id}">' +
                gettext("Edit") +
            '</a>',
            {year: datetime.getUTCFullYear(), month: pad2(datetime.getUTCMonth() + 1), day: pad2(datetime.getUTCDate()),
             hour: pad2(datetime.getUTCHours()), minute: pad2(datetime.getUTCMinutes()),
             id: id},
            {interpolate: /\{(.+?)\}/g});
        $thisSection.find('.section-published-date').html(html);
        hideModal();
        saving.hide();
    });
}

CMS.Views.SystemFeedback = Backbone.View.extend({
    options: {
        title: "",
        message: "",
        intent: null,  // "warning", "confirmation", "error", "announcement", "step-required", etc
        type: null, // "alert", "notification", or "prompt": set by subclass
        shown: true,  // is this view currently being shown?
        icon: true,  // should we render an icon related to the message intent?
        closeIcon: true,  // should we render a close button in the top right corner?
        minShown: 0,  // length of time after this view has been shown before it can be hidden (milliseconds)
        maxShown: Infinity  // length of time after this view has been shown before it will be automatically hidden (milliseconds)

        /* Could also have an "actions" hash: here is an example demonstrating
           the expected structure. For each action, by default the framework
           will call preventDefault on the click event before the function is
           run; to make it not do that, just pass `preventDefault: false` in
           the action object.

        actions: {
            primary: {
                "text": "Save",
                "class": "action-save",
                "click": function(view) {
                    // do something when Save is clicked
                }
            },
            secondary: [
                {
                    "text": "Cancel",
                    "class": "action-cancel",
                    "click": function(view) {}
                }, {
                    "text": "Discard Changes",
                    "class": "action-discard",
                    "click": function(view) {}
                }
            ]
        }
        */
    },
    initialize: function() {
        if(!this.options.type) {
            throw "SystemFeedback: type required (given " +
                JSON.stringify(this.options) + ")";
        }
        if(!this.options.intent) {
            throw "SystemFeedback: intent required (given " +
                JSON.stringify(this.options) + ")";
        }
        var tpl = $("#system-feedback-tpl").text();
        if(!tpl) {
            console.error("Couldn't load system-feedback template");
        }
        this.template = _.template(tpl);
        this.setElement($("#page-"+this.options.type));
        // handle single "secondary" action
        if (this.options.actions && this.options.actions.secondary &&
            !_.isArray(this.options.actions.secondary)) {
            this.options.actions.secondary = [this.options.actions.secondary];
        }
        return this;
    },
    // public API: show() and hide()
    show: function() {
        clearTimeout(this.hideTimeout);
        this.options.shown = true;
        this.shownAt = new Date();
        this.render();
        if($.isNumeric(this.options.maxShown)) {
            this.hideTimeout = setTimeout(_.bind(this.hide, this),
                this.options.maxShown);
        }
        return this;
    },
    hide: function() {
        if(this.shownAt && $.isNumeric(this.options.minShown) &&
           this.options.minShown > new Date() - this.shownAt)
        {
            clearTimeout(this.hideTimeout);
            this.hideTimeout = setTimeout(_.bind(this.hide, this),
                this.options.minShown - (new Date() - this.shownAt));
        } else {
            this.options.shown = false;
            delete this.shownAt;
            this.render();
        }
        return this;
    },
    // the rest of the API should be considered semi-private
    events: {
        "click .action-close": "hide",
        "click .action-primary": "primaryClick",
        "click .action-secondary": "secondaryClick"
    },
    render: function() {
        // there can be only one active view of a given type at a time: only
        // one alert, only one notification, only one prompt. Therefore, we'll
        // use a singleton approach.
        var parent = CMS.Views[_.str.capitalize(this.options.type)];
        if(parent && parent.active && parent.active !== this) {
            parent.active.stopListening();
            parent.active.undelegateEvents();
        }
        this.$el.html(this.template(this.options));
        parent.active = this;
        return this;
    },
    primaryClick: function(event) {
        var actions = this.options.actions;
        if(!actions) { return; }
        var primary = actions.primary;
        if(!primary) { return; }
        if(primary.preventDefault !== false) {
            event.preventDefault();
        }
        if(primary.click) {
            primary.click.call(event.target, this, event);
        }
    },
    secondaryClick: function(event) {
        var actions = this.options.actions;
        if(!actions) { return; }
        var secondaryList = actions.secondary;
        if(!secondaryList) { return; }
        // which secondary action was clicked?
        var i = 0;  // default to the first secondary action (easier for testing)
        if(event && event.target) {
            i = _.indexOf(this.$(".action-secondary"), event.target);
        }
        var secondary = secondaryList[i];
        if(secondary.preventDefault !== false) {
            event.preventDefault();
        }
        if(secondary.click) {
            secondary.click.call(event.target, this, event);
        }
    }
});

CMS.Views.Alert = CMS.Views.SystemFeedback.extend({
    options: $.extend({}, CMS.Views.SystemFeedback.prototype.options, {
        type: "alert"
    }),
    slide_speed: 900,
    show: function() {
        CMS.Views.SystemFeedback.prototype.show.apply(this, arguments);
        this.$el.hide();
        this.$el.slideDown(this.slide_speed);
        return this;
    },
    hide: function () {
        this.$el.slideUp({
            duration: this.slide_speed
        });
        setTimeout(_.bind(CMS.Views.SystemFeedback.prototype.hide, this, arguments),
                   this.slideSpeed);
    }
});
CMS.Views.Notification = CMS.Views.SystemFeedback.extend({
    options: $.extend({}, CMS.Views.SystemFeedback.prototype.options, {
        type: "notification",
        closeIcon: false
    })
});
CMS.Views.Prompt = CMS.Views.SystemFeedback.extend({
    options: $.extend({}, CMS.Views.SystemFeedback.prototype.options, {
        type: "prompt",
        closeIcon: false,
        icon: false
    }),
    render: function() {
        if(!window.$body) { window.$body = $(document.body); }
        if(this.options.shown) {
            $body.addClass('prompt-is-shown');
        } else {
            $body.removeClass('prompt-is-shown');
        }
        // super() in Javascript has awkward syntax :(
        return CMS.Views.SystemFeedback.prototype.render.apply(this, arguments);
    }
});

// create CMS.Views.Alert.Warning, CMS.Views.Notification.Confirmation,
// CMS.Views.Prompt.StepRequired, etc
var capitalCamel, types, intents;
capitalCamel = _.compose(_.str.capitalize, _.str.camelize);
types = ["alert", "notification", "prompt"];
intents = ["warning", "error", "confirmation", "announcement", "step-required", "help", "mini"];
_.each(types, function(type) {
    _.each(intents, function(intent) {
        // "class" is a reserved word in Javascript, so use "klass" instead
        var klass, subklass;
        klass = CMS.Views[capitalCamel(type)];
        subklass = klass.extend({
            options: $.extend({}, klass.prototype.options, {
                type: type,
                intent: intent
            })
        });
        klass[capitalCamel(intent)] = subklass;
    });
});

// set more sensible defaults for Notification-Mini views
var miniOptions = CMS.Views.Notification.Mini.prototype.options;
miniOptions.minShown = 1250;
miniOptions.closeIcon = false;

CMS.Models.Course = Backbone.Model.extend({
    defaults: {
        "name": ""
    },
    validate: function(attrs, options) {
        if (!attrs.name) {
            return gettext("You must specify a name");
        }
    }
});

CMS.Models.Section = Backbone.Model.extend({
    defaults: {
        "name": ""
    },
    validate: function(attrs, options) {
        if (!attrs.name) {
            return gettext("You must specify a name");
        }
    },
    url: "/save_item",
    toJSON: function() {
        return {
            id: this.get("id"),
            metadata: {
                display_name: this.get("name")
            }
        };
    },
    initialize: function() {
        this.listenTo(this, "request", this.showNotification);
        this.listenTo(this, "sync", this.hideNotification);
    },
    showNotification: function() {
        if(!this.msg) {
            this.msg = new CMS.Views.Notification.Mini({
                title: gettext("Saving") + "&hellip;"
            });
        }
        this.msg.show();
    },
    hideNotification: function() {
        if(!this.msg) { return; }
        this.msg.hide();
    }
});

CMS.Views.SectionShow = Backbone.View.extend({
    template: _.template('<span data-tooltip="<%= gettext("Edit this section\'s name") %>" class="section-name-span"><%= name %></span>'),
    render: function() {
        var attrs = {
            name: this.model.escape('name')
        };
        this.$el.html(this.template(attrs));
        this.delegateEvents();
        return this;
    },
    events: {
        "click": "switchToEditView"
    },
    switchToEditView: function() {
        if(!this.editView) {
            this.editView = new CMS.Views.SectionEdit({
                model: this.model, el: this.el, showView: this});
        }
        this.undelegateEvents();
        this.editView.render();
    }
});

CMS.Views.SectionEdit = Backbone.View.extend({
    render: function() {
        var attrs = {
            name: this.model.escape('name')
        };
        this.$el.html(this.template(attrs));
        this.delegateEvents();
        return this;
    },
    initialize: function() {
        this.template = _.template($("#section-name-edit-tpl").text());
        this.listenTo(this.model, "invalid", this.showInvalidMessage);
        this.render();
    },
    events: {
        "click .save-button": "saveName",
        "submit": "saveName",
        "click .cancel-button": "switchToShowView"
    },
    saveName: function(e) {
        if (e) { e.preventDefault(); }
        var name = this.$("input[type=text]").val();
        var that = this;
        this.model.save("name", name, {
            success: function() {
                analytics.track('Edited Section Name', {
                    'course': course_location_analytics,
                    'display_name': that.model.get('name'),
                    'id': that.model.get('id')
                });
                that.switchToShowView();
            }
        });
    },
    switchToShowView: function() {
        if(!this.showView) {
            this.showView = new CMS.Views.SectionShow({
                model: this.model, el: this.el, editView: this});
        }
        this.undelegateEvents();
        this.stopListening();
        this.showView.render();
    },
    showInvalidMessage: function(model, error, options) {
        model.set("name", model.previous("name"));
        var that = this;
        var prompt = new CMS.Views.Prompt.Error({
            title: gettext("Your change could not be saved"),
            message: error,
            actions: {
                primary: {
                    text: gettext("Return and resolve this issue"),
                    click: function(view) {
                        view.hide();
                        that.$("input[type=text]").focus();
                    }
                }
            }
        });
        prompt.show();
    }
});

/**
 * Model used for metadata setting editors. This model does not do its own saving,
 * as that is done by module_edit.coffee.
 */
CMS.Models.Metadata = Backbone.Model.extend({

    defaults: {
        "field_name": null,
        "display_name": null,
        "value" : null,
        "explicitly_set": null,
        "default_value" : null,
        "options" : null,
        "type" : null
    },

    initialize: function() {
        this.original_value = this.get('value');
        this.original_explicitly_set = this.get('explicitly_set');
    },

    /**
     * Returns true if the stored value is different, or if the "explicitly_set"
     * property has changed.
     */
    isModified : function() {
        if (!this.get('explicitly_set') && !this.original_explicitly_set) {
            return false;
        }
        if (this.get('explicitly_set') && this.original_explicitly_set) {
            return this.get('value') !== this.original_value;
        }
        return true;
    },

    /**
     * Returns true if a non-default/non-inherited value has been set.
     */
    isExplicitlySet: function() {
        return this.get('explicitly_set');
    },

    /**
     * The value, as shown in the UI. This may be an inherited or default value.
     */
    getDisplayValue : function () {
        return this.get('value');
    },

    /**
     * The value, as should be returned to the server. if 'isExplicitlySet'
     * returns false, this method returns null to indicate that the value
     * is not set at this level.
     */
    getValue: function() {
        return this.get('explicitly_set') ? this.get('value') : null;
    },

    /**
     * Sets the displayed value.
     */
    setValue: function (value) {
        this.set({
            explicitly_set: true,
            value: value
        });
    },

    /**
     * Returns the field name, which should be used for persisting the metadata
     * field to the server.
     */
    getFieldName: function () {
        return this.get('field_name');
    },

    /**
     * Returns the options. This may be a array of possible values, or an object
     * with properties like "max", "min" and "step".
     */
    getOptions: function () {
        return this.get('options');
    },

    /**
     * Returns the type of this metadata field. Possible values are SELECT_TYPE,
     * INTEGER_TYPE, and FLOAT_TYPE, GENERIC_TYPE.
     */
    getType: function() {
        return this.get('type');
    },

    /**
     * Reverts the value to the default_value specified at construction, and updates the
     * explicitly_set property.
     */
    clear: function() {
        this.set({
            explicitly_set: false,
            value: this.get('default_value')
        });
    }
});

CMS.Models.MetadataCollection = Backbone.Collection.extend({
    model : CMS.Models.Metadata,
    comparator: "display_name"
});

CMS.Models.Metadata.SELECT_TYPE = "Select";
CMS.Models.Metadata.INTEGER_TYPE = "Integer";
CMS.Models.Metadata.FLOAT_TYPE = "Float";
CMS.Models.Metadata.GENERIC_TYPE = "Generic";
CMS.Models.Metadata.LIST_TYPE = "List";

if (!CMS.Views['Metadata']) CMS.Views.Metadata = {};

CMS.Views.Metadata.Editor = Backbone.View.extend({

    // Model is CMS.Models.MetadataCollection,
    initialize : function() {
        var tpl = $("#metadata-editor-tpl").text();
        if(!tpl) {
            console.error("Couldn't load metadata editor template");
        }
        this.template = _.template(tpl);

        this.$el.html(this.template({numEntries: this.collection.length}));
        var counter = 0;

        var self = this;
        this.collection.each(
            function (model) {
                var data = {
                    el: self.$el.find('.metadata_entry')[counter++],
                    model: model
                };
                if (model.getType() === CMS.Models.Metadata.SELECT_TYPE) {
                    new CMS.Views.Metadata.Option(data);
                }
                else if (model.getType() === CMS.Models.Metadata.INTEGER_TYPE ||
                    model.getType() === CMS.Models.Metadata.FLOAT_TYPE) {
                    new CMS.Views.Metadata.Number(data);
                }
                else if(model.getType() === CMS.Models.Metadata.LIST_TYPE) {
                    new CMS.Views.Metadata.List(data);
                }
                else {
                    // Everything else is treated as GENERIC_TYPE, which uses String editor.
                    new CMS.Views.Metadata.String(data);
                }
            });
    },

    /**
     * Returns the just the modified metadata values, in the format used to persist to the server.
     */
    getModifiedMetadataValues: function () {
        var modified_values = {};
        this.collection.each(
            function (model) {
                if (model.isModified()) {
                    modified_values[model.getFieldName()] = model.getValue();
                }
            }
        );
        return modified_values;
    },

    /**
     * Returns a display name for the component related to this metadata. This method looks to see
     * if there is a metadata entry called 'display_name', and if so, it returns its value. If there
     * is no such entry, or if display_name does not have a value set, it returns an empty string.
     */
    getDisplayName: function () {
        var displayName = '';
        this.collection.each(
            function (model) {
                if (model.get('field_name') === 'display_name') {
                    var displayNameValue = model.get('value');
                    // It is possible that there is no display name value set. In that case, return empty string.
                    displayName = displayNameValue ? displayNameValue : '';
                }
            }
        );
        return displayName;
    }
});

CMS.Views.Metadata.AbstractEditor = Backbone.View.extend({

    // Model is CMS.Models.Metadata.
    initialize : function() {
        var self = this;
        var templateName = _.result(this, 'templateName');
        // Backbone model cid is only unique within the collection.
        this.uniqueId = _.uniqueId(templateName + "_");

        var tpl = document.getElementById(templateName).text;
        if(!tpl) {
            console.error("Couldn't load template: " + templateName);
        }
        this.template = _.template(tpl);
        this.$el.html(this.template({model: this.model, uniqueId: this.uniqueId}));
        this.listenTo(this.model, 'change', this.render);
        this.render();
    },

    /**
     * The ID/name of the template. Subclasses must override this.
     */
    templateName: '',

    /**
     * Returns the value currently displayed in the editor/view. Subclasses should implement this method.
     */
    getValueFromEditor : function () {},

    /**
     * Sets the value currently displayed in the editor/view. Subclasses should implement this method.
     */
    setValueInEditor : function (value) {},

    /**
     * Sets the value in the model, using the value currently displayed in the view.
     */
    updateModel: function () {
        this.model.setValue(this.getValueFromEditor());
    },

    /**
     * Clears the value currently set in the model (reverting to the default).
     */
    clear: function () {
        this.model.clear();
    },

    /**
     * Shows the clear button, if it is not already showing.
     */
    showClearButton: function() {
        if (!this.$el.hasClass('is-set')) {
            this.$el.addClass('is-set');
            this.getClearButton().removeClass('inactive');
            this.getClearButton().addClass('active');
        }
    },

    /**
     * Returns the clear button.
     */
    getClearButton: function () {
        return this.$el.find('.setting-clear');
    },

    /**
     * Renders the editor, updating the value displayed in the view, as well as the state of
     * the clear button.
     */
    render: function () {
        if (!this.template) return;

        this.setValueInEditor(this.model.getDisplayValue());

        if (this.model.isExplicitlySet()) {
            this.showClearButton();
        }
        else {
            this.$el.removeClass('is-set');
            this.getClearButton().addClass('inactive');
            this.getClearButton().removeClass('active');
        }

        return this;
    }
});

CMS.Views.Metadata.String = CMS.Views.Metadata.AbstractEditor.extend({

    events : {
        "change input" : "updateModel",
        "keypress .setting-input" : "showClearButton"  ,
        "click .setting-clear" : "clear"
    },

    templateName: "metadata-string-entry",

    getValueFromEditor : function () {
        return this.$el.find('#' + this.uniqueId).val();
    },

    setValueInEditor : function (value) {
        this.$el.find('input').val(value);
    }
});

CMS.Views.Metadata.Number = CMS.Views.Metadata.AbstractEditor.extend({

    events : {
        "change input" : "updateModel",
        "keypress .setting-input" : "keyPressed",
        "change .setting-input" : "changed",
        "click .setting-clear" : "clear"
    },

    render: function () {
        CMS.Views.Metadata.AbstractEditor.prototype.render.apply(this);
        if (!this.initialized) {
            var numToString = function (val) {
                return val.toFixed(4);
            };
            var min = "min";
            var max = "max";
            var step = "step";
            var options = this.model.getOptions();
            if (options.hasOwnProperty(min)) {
                this.min = Number(options[min]);
                this.$el.find('input').attr(min, numToString(this.min));
            }
            if (options.hasOwnProperty(max)) {
                this.max = Number(options[max]);
                this.$el.find('input').attr(max, numToString(this.max));
            }
            var stepValue = undefined;
            if (options.hasOwnProperty(step)) {
                // Parse step and convert to String. Polyfill doesn't like float values like ".1" (expects "0.1").
                stepValue = numToString(Number(options[step]));
            }
            else if (this.isIntegerField()) {
                stepValue = "1";
            }
            if (stepValue !== undefined) {
                this.$el.find('input').attr(step, stepValue);
            }

            // Manually runs polyfill for input number types to correct for Firefox non-support.
            // inputNumber will be undefined when unit test is running.
            if ($.fn.inputNumber) {
                this.$el.find('.setting-input-number').inputNumber();
            }

            this.initialized = true;
        }

        return this;
    },

    templateName: "metadata-number-entry",

    getValueFromEditor : function () {
        return this.$el.find('#' + this.uniqueId).val();
    },

    setValueInEditor : function (value) {
        this.$el.find('input').val(value);
    },

    /**
     * Returns true if this view is restricted to integers, as opposed to floating points values.
     */
    isIntegerField : function () {
        return this.model.getType() === 'Integer';
    },

    keyPressed: function (e) {
        this.showClearButton();
        // This first filtering if statement is take from polyfill to prevent
        // non-numeric input (for browsers that don't use polyfill because they DO have a number input type).
        var _ref, _ref1;
        if (((_ref = e.keyCode) !== 8 && _ref !== 9 && _ref !== 35 && _ref !== 36 && _ref !== 37 && _ref !== 39) &&
            ((_ref1 = e.which) !== 45 && _ref1 !== 46 && _ref1 !== 48 && _ref1 !== 49 && _ref1 !== 50 && _ref1 !== 51
                && _ref1 !== 52 && _ref1 !== 53 && _ref1 !== 54 && _ref1 !== 55 && _ref1 !== 56 && _ref1 !== 57)) {
            e.preventDefault();
        }
        // For integers, prevent decimal points.
        if (this.isIntegerField() && e.keyCode === 46) {
            e.preventDefault();
        }
    },

    changed: function () {
        // Limit value to the range specified by min and max (necessary for browsers that aren't using polyfill).
        var value = this.getValueFromEditor();
        if ((this.max !== undefined) && value > this.max) {
            value = this.max;
        } else if ((this.min != undefined) && value < this.min) {
            value = this.min;
        }
        this.setValueInEditor(value);
        this.updateModel();
    }

});

CMS.Views.Metadata.Option = CMS.Views.Metadata.AbstractEditor.extend({

    events : {
        "change select" : "updateModel",
        "click .setting-clear" : "clear"
    },

    templateName: "metadata-option-entry",

    getValueFromEditor : function () {
        var selectedText = this.$el.find('#' + this.uniqueId).find(":selected").text();
        var selectedValue;
        _.each(this.model.getOptions(), function (modelValue) {
            if (modelValue === selectedText) {
                selectedValue = modelValue;
            }
            else if (modelValue['display_name'] === selectedText) {
                selectedValue = modelValue['value'];
            }
        });
        return selectedValue;
    },

    setValueInEditor : function (value) {
        // Value here is the json value as used by the field. The choice may instead be showing display names.
        // Find the display name matching the value passed in.
        _.each(this.model.getOptions(), function (modelValue) {
            if (modelValue['value'] === value) {
                value = modelValue['display_name'];
            }
        });
        this.$el.find('#' + this.uniqueId + " option").filter(function() {
            return $(this).text() === value;
        }).prop('selected', true);
    }
});

CMS.Views.Metadata.List = CMS.Views.Metadata.AbstractEditor.extend({

    events : {
        "click .setting-clear" : "clear",
        "keypress .setting-input" : "showClearButton",
        "change input" : "updateModel",
        "input input" : "enableAdd",
        "click .create-setting" : "addEntry",
        "click .remove-setting" : "removeEntry"
    },

    templateName: "metadata-list-entry",

    getValueFromEditor: function () {
        return _.map(
            this.$el.find('li input'),
            function (ele) { return ele.value.trim(); }
        ).filter(_.identity);
    },

    setValueInEditor: function (value) {
        var list = this.$el.find('ol');
        list.empty();
        _.each(value, function(ele, index) {
            var template = _.template(
                '<li class="list-settings-item">' +
                    '<input type="text" class="input" value="<%= ele %>">' +
                    '<a href="#" class="remove-action remove-setting" data-index="<%= index %>"><i class="icon-remove-sign"></i><span class="sr">Remove</span></a>' +
                '</li>'
            );
            list.append($(template({'ele': ele, 'index': index})));
        });
    },

    addEntry: function(event) {
        event.preventDefault();
        // We don't call updateModel here since it's bound to the
        // change event
        var list = this.model.get('value') || [];
        this.setValueInEditor(list.concat(['']))
        this.$el.find('.create-setting').addClass('is-disabled');
    },

    removeEntry: function(event) {
        event.preventDefault();
        var entry = $(event.currentTarget).siblings().val();
        this.setValueInEditor(_.without(this.model.get('value'), entry));
        this.updateModel();
        this.$el.find('.create-setting').removeClass('is-disabled');
    },

    enableAdd: function() {
        this.$el.find('.create-setting').removeClass('is-disabled');
    }
});

CMS.Models.FileUpload = Backbone.Model.extend({
    defaults: {
        "title": "",
        "message": "",
        "selectedFile": null,
        "uploading": false,
        "uploadedBytes": 0,
        "totalBytes": 0,
        "finished": false,
        "mimeTypes": []
    },
    validate: function(attrs, options) {
        if(attrs.selectedFile && !_.contains(this.attributes.mimeTypes, attrs.selectedFile.type)) {
            return {
                message: _.template(
                    gettext("Only <%= fileTypes %> files can be uploaded. Please select a file ending in <%= fileExtensions %> to upload."),
                    this.formatValidTypes()
                ),
                attributes: {selectedFile: true}
            };
        }
    },
    // Return a list of this uploader's valid file types
    fileTypes: function() {
        return _.map(
            this.attributes.mimeTypes,
            function(type) {
                return type.split('/')[1].toUpperCase();
            }
        );
    },
    // Return strings for the valid file types and extensions this
    // uploader accepts, formatted as natural language
    formatValidTypes: function() {
        if(this.attributes.mimeTypes.length === 1) {
            return {
                fileTypes: this.fileTypes()[0],
                fileExtensions: '.' + this.fileTypes()[0].toLowerCase()
            };
        }
        var or = gettext('or');
        var formatTypes = function(types) {
            return _.template('<%= initial %> <%= or %> <%= last %>', {
                initial: _.initial(types).join(', '),
                or: or,
                last: _.last(types)
            });
        };
        return {
            fileTypes: formatTypes(this.fileTypes()),
            fileExtensions: formatTypes(
                _.map(this.fileTypes(),
                      function(type) {
                          return '.' + type.toLowerCase();
                      })
            )
        };
    }
});

CMS.Views.UploadDialog = Backbone.View.extend({
    options: {
        shown: true,
        successMessageTimeout: 2000 // 2 seconds
    },
    initialize: function() {
        this.template = _.template($("#upload-dialog-tpl").text());
        this.listenTo(this.model, "change", this.render);
    },
    render: function() {
        var isValid = this.model.isValid();
        var selectedFile = this.model.get('selectedFile');
        var oldInput = this.$("input[type=file]").get(0);
        this.$el.html(this.template({
            shown: this.options.shown,
            url: CMS.URL.UPLOAD_ASSET,
            title: this.model.escape('title'),
            message: this.model.escape('message'),
            selectedFile: selectedFile,
            uploading: this.model.get('uploading'),
            uploadedBytes: this.model.get('uploadedBytes'),
            totalBytes: this.model.get('totalBytes'),
            finished: this.model.get('finished'),
            error: this.model.validationError
        }));
        // Ideally, we'd like to tell the browser to pre-populate the
        // <input type="file"> with the selectedFile if we have one -- but
        // browser security prohibits that. So instead, we'll swap out the
        // new input (that has no file selected) with the old input (that
        // already has the selectedFile selected). However, we only want to do
        // this if the selected file is valid: if it isn't, we want to render
        // a blank input to prompt the user to upload a different (valid) file.
        if (selectedFile && isValid) {
            $(oldInput).removeClass("error");
            this.$('input[type=file]').replaceWith(oldInput);
        }
        return this;
    },
    events: {
        "change input[type=file]": "selectFile",
        "click .action-cancel": "hideAndRemove",
        "click .action-upload": "upload"
    },
    selectFile: function(e) {
        this.model.set({
            selectedFile: e.target.files[0] || null
        });
    },
    show: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.options.shown = true;
        $body.addClass('dialog-is-shown');
        return this.render();
    },
    hide: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.options.shown = false;
        $body.removeClass('dialog-is-shown');
        return this.render();
    },
    hideAndRemove: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        return this.hide().remove();
    },
    upload: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.set('uploading', true);
        this.$("form").ajaxSubmit({
            success: _.bind(this.success, this),
            error: _.bind(this.error, this),
            uploadProgress: _.bind(this.progress, this),
            data: {
                // don't show the generic error notification; we're in a modal,
                // and we're better off modifying it instead.
                notifyOnError: false
            }
        });
    },
    progress: function(event, position, total, percentComplete) {
        this.model.set({
            "uploadedBytes": position,
            "totalBytes": total
        });
    },
    success: function(response, statusText, xhr, form) {
        this.model.set({
            uploading: false,
            finished: true
        });
        if(this.options.onSuccess) {
            this.options.onSuccess(response, statusText, xhr, form);
        }
        var that = this;
        this.removalTimeout = setTimeout(function() {
            that.hide().remove();
        }, this.options.successMessageTimeout);
    },
    error: function() {
        this.model.set({
            "uploading": false,
            "uploadedBytes": 0,
            "title": gettext("We're sorry, there was an error")
        });
    }
});

CMS.Models.Textbook = Backbone.AssociatedModel.extend({
    defaults: function() {
        return {
            name: "",
            chapters: new CMS.Collections.ChapterSet([{}]),
            showChapters: false,
            editing: false
        };
    },
    relations: [{
        type: Backbone.Many,
        key: "chapters",
        relatedModel: "CMS.Models.Chapter",
        collectionType: "CMS.Collections.ChapterSet"
    }],
    initialize: function() {
        this.setOriginalAttributes();
        return this;
    },
    setOriginalAttributes: function() {
        this._originalAttributes = this.parse(this.toJSON());
    },
    reset: function() {
        this.set(this._originalAttributes, {parse: true});
    },
    isDirty: function() {
        return !_.isEqual(this._originalAttributes, this.parse(this.toJSON()));
    },
    isEmpty: function() {
        return !this.get('name') && this.get('chapters').isEmpty();
    },
    url: function() {
        if(this.isNew()) {
            return CMS.URL.TEXTBOOKS + "/new";
        } else {
            return CMS.URL.TEXTBOOKS + "/" + this.id;
        }
    },
    parse: function(response) {
        var ret = $.extend(true, {}, response);
        if("tab_title" in ret && !("name" in ret)) {
            ret.name = ret.tab_title;
            delete ret.tab_title;
        }
        if("url" in ret && !("chapters" in ret)) {
            ret.chapters = {"url": ret.url};
            delete ret.url;
        }
        _.each(ret.chapters, function(chapter, i) {
            chapter.order = chapter.order || i+1;
        });
        return ret;
    },
    toJSON: function() {
        return {
            tab_title: this.get('name'),
            chapters: this.get('chapters').toJSON()
        };
    },
    // NOTE: validation functions should return non-internationalized error
    // messages. The messages will be passed through gettext in the template.
    validate: function(attrs, options) {
        if (!attrs.name) {
            return {
                message: "Textbook name is required",
                attributes: {name: true}
            };
        }
        if (attrs.chapters.length === 0) {
            return {
                message: "Please add at least one chapter",
                attributes: {chapters: true}
            };
        } else {
            // validate all chapters
            var invalidChapters = [];
            attrs.chapters.each(function(chapter) {
                if(!chapter.isValid()) {
                    invalidChapters.push(chapter);
                }
            });
            if(!_.isEmpty(invalidChapters)) {
                return {
                    message: "All chapters must have a name and asset",
                    attributes: {chapters: invalidChapters}
                };
            }
        }
    }
});
CMS.Collections.TextbookSet = Backbone.Collection.extend({
    model: CMS.Models.Textbook,
    url: function() { return CMS.URL.TEXTBOOKS; },
    save: function(options) {
        return this.sync('update', this, options);
    }
});
CMS.Models.Chapter = Backbone.AssociatedModel.extend({
    defaults: function() {
        return {
            name: "",
            asset_path: "",
            order: this.collection ? this.collection.nextOrder() : 1
        };
    },
    isEmpty: function() {
        return !this.get('name') && !this.get('asset_path');
    },
    parse: function(response) {
        if("title" in response && !("name" in response)) {
            response.name = response.title;
            delete response.title;
        }
        if("url" in response && !("asset_path" in response)) {
            response.asset_path = response.url;
            delete response.url;
        }
        return response;
    },
    toJSON: function() {
        return {
            title: this.get('name'),
            url: this.get('asset_path')
        };
    },
    // NOTE: validation functions should return non-internationalized error
    // messages. The messages will be passed through gettext in the template.
    validate: function(attrs, options) {
        if(!attrs.name && !attrs.asset_path) {
            return {
                message: "Chapter name and asset_path are both required",
                attributes: {name: true, asset_path: true}
            };
        } else if(!attrs.name) {
            return {
                message: "Chapter name is required",
                attributes: {name: true}
            };
        } else if (!attrs.asset_path) {
            return {
                message: "asset_path is required",
                attributes: {asset_path: true}
            };
        }
    }
});
CMS.Collections.ChapterSet = Backbone.Collection.extend({
    model: CMS.Models.Chapter,
    comparator: "order",
    nextOrder: function() {
        if(!this.length) return 1;
        return this.last().get('order') + 1;
    },
    isEmpty: function() {
        return this.length === 0 || this.every(function(m) { return m.isEmpty(); });
    }
});


CMS.Views.ShowTextbook = Backbone.View.extend({
    initialize: function() {
        this.template = _.template($("#show-textbook-tpl").text());
        this.listenTo(this.model, "change", this.render);
    },
    tagName: "section",
    className: "textbook",
    events: {
        "click .edit": "editTextbook",
        "click .delete": "confirmDelete",
        "click .show-chapters": "showChapters",
        "click .hide-chapters": "hideChapters"
    },
    render: function() {
        var attrs = $.extend({}, this.model.attributes);
        attrs.bookindex = this.model.collection.indexOf(this.model);
        attrs.course = window.section.attributes;
        this.$el.html(this.template(attrs));
        return this;
    },
    editTextbook: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.set("editing", true);
    },
    confirmDelete: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        var textbook = this.model, collection = this.model.collection;
        var msg = new CMS.Views.Prompt.Warning({
            title: _.template(gettext("Delete “<%= name %>”?"),
                {name: textbook.escape('name')}),
            message: gettext("Deleting a textbook cannot be undone and once deleted any reference to it in your courseware's navigation will also be removed."),
            actions: {
                primary: {
                    text: gettext("Delete"),
                    click: function(view) {
                        view.hide();
                        var delmsg = new CMS.Views.Notification.Mini({
                            title: gettext("Deleting") + "&hellip;"
                        }).show();
                        textbook.destroy({
                            complete: function() {
                                delmsg.hide();
                            }
                        });
                    }
                },
                secondary: {
                    text: gettext("Cancel"),
                    click: function(view) {
                        view.hide();
                    }
                }
            }
        }).show();
    },
    showChapters: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.set('showChapters', true);
    },
    hideChapters: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.set('showChapters', false);
    }
});
CMS.Views.EditTextbook = Backbone.View.extend({
    initialize: function() {
        this.template = _.template($("#edit-textbook-tpl").text());
        this.listenTo(this.model, "invalid", this.render);
        var chapters = this.model.get('chapters');
        this.listenTo(chapters, "add", this.addOne);
        this.listenTo(chapters, "reset", this.addAll);
        this.listenTo(chapters, "all", this.render);
    },
    tagName: "section",
    className: "textbook",
    render: function() {
        this.$el.html(this.template({
            name: this.model.escape('name'),
            error: this.model.validationError
        }));
        this.addAll();
        return this;
    },
    events: {
        "change input[name=textbook-name]": "setName",
        "submit": "setAndClose",
        "click .action-cancel": "cancel",
        "click .action-add-chapter": "createChapter"
    },
    addOne: function(chapter) {
        var view = new CMS.Views.EditChapter({model: chapter});
        this.$("ol.chapters").append(view.render().el);
        return this;
    },
    addAll: function() {
        this.model.get('chapters').each(this.addOne, this);
    },
    createChapter: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.setValues();
        this.model.get('chapters').add([{}]);
    },
    setName: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.set("name", this.$("#textbook-name-input").val(), {silent: true});
    },
    setValues: function() {
        this.setName();
        var that = this;
        _.each(this.$("li"), function(li, i) {
            var chapter = that.model.get('chapters').at(i);
            if(!chapter) { return; }
            chapter.set({
                "name": $(".chapter-name", li).val(),
                "asset_path": $(".chapter-asset-path", li).val()
            });
        });
        return this;
    },
    setAndClose: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.setValues();
        if(!this.model.isValid()) { return; }
        var saving = new CMS.Views.Notification.Mini({
            title: gettext("Saving") + "&hellip;"
        }).show();
        var that = this;
        this.model.save({}, {
            success: function() {
                that.model.setOriginalAttributes();
                that.close();
            },
            complete: function() {
                saving.hide();
            }
        });
    },
    cancel: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.reset();
        return this.close();
    },
    close: function() {
        var textbooks = this.model.collection;
        this.remove();
        if(this.model.isNew()) {
            // if the textbook has never been saved, remove it
            textbooks.remove(this.model);
        }
        // don't forget to tell the model that it's no longer being edited
        this.model.set("editing", false);
        return this;
    }
});
CMS.Views.ListTextbooks = Backbone.View.extend({
    initialize: function() {
        this.emptyTemplate = _.template($("#no-textbooks-tpl").text());
        this.listenTo(this.collection, 'all', this.render);
        this.listenTo(this.collection, 'destroy', this.handleDestroy);
    },
    tagName: "div",
    className: "textbooks-list",
    render: function() {
        var textbooks = this.collection;
        if(textbooks.length === 0) {
            this.$el.html(this.emptyTemplate());
        } else {
            this.$el.empty();
            var that = this;
            textbooks.each(function(textbook) {
                var view;
                if (textbook.get("editing")) {
                    view = new CMS.Views.EditTextbook({model: textbook});
                } else {
                    view = new CMS.Views.ShowTextbook({model: textbook});
                }
                that.$el.append(view.render().el);
            });
        }
        return this;
    },
    events: {
        "click .new-button": "addOne"
    },
    addOne: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.collection.add([{editing: true}]);
    },
    handleDestroy: function(model, collection, options) {
        collection.remove(model);
    }
});
CMS.Views.EditChapter = Backbone.View.extend({
    initialize: function() {
        this.template = _.template($("#edit-chapter-tpl").text());
        this.listenTo(this.model, "change", this.render);
    },
    tagName: "li",
    className: function() {
        return "field-group chapter chapter" + this.model.get('order');
    },
    render: function() {
        this.$el.html(this.template({
            name: this.model.escape('name'),
            asset_path: this.model.escape('asset_path'),
            order: this.model.get('order'),
            error: this.model.validationError
        }));
        return this;
    },
    events: {
        "change .chapter-name": "changeName",
        "change .chapter-asset-path": "changeAssetPath",
        "click .action-close": "removeChapter",
        "click .action-upload": "openUploadDialog",
        "submit": "uploadAsset"
    },
    changeName: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.set({
            name: this.$(".chapter-name").val()
        }, {silent: true});
        return this;
    },
    changeAssetPath: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.set({
            asset_path: this.$(".chapter-asset-path").val()
        }, {silent: true});
        return this;
    },
    removeChapter: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.collection.remove(this.model);
        return this.remove();
    },
    openUploadDialog: function(e) {
        if(e && e.preventDefault) { e.preventDefault(); }
        this.model.set({
            name: this.$("input.chapter-name").val(),
            asset_path: this.$("input.chapter-asset-path").val()
        });
        var msg = new CMS.Models.FileUpload({
            title: _.template(gettext("Upload a new PDF to “<%= name %>”"),
                {name: section.escape('name')}),
            message: "Files must be in PDF format.",
            mimeTypes: ['application/pdf']
        });
        var that = this;
        var view = new CMS.Views.UploadDialog({
            model: msg,
            onSuccess: function(response) {
                var options = {};
                if(!that.model.get('name')) {
                    options.name = response.displayname;
                }
                options.asset_path = response.url;
                that.model.set(options);
            },
        });
        $(".wrapper-view").after(view.show().el);
    }
});

$(document).ready(function() {
    $('.uploads .upload-button').bind('click', showUploadModal);
    $('.upload-modal .close-button').bind('click', hideModal);
    $('.upload-modal .choose-file-button').bind('click', showFileSelectionMenu);
    $('.remove-asset-button').bind('click', removeAsset);
});

function removeAsset(e){
    e.preventDefault();

    var that = this;
    var msg = new CMS.Views.Prompt.Warning({
        title: gettext("Delete File Confirmation"),
        message: gettext("Are you sure you wish to delete this item. It cannot be reversed!\n\nAlso any content that links/refers to this item will no longer work (e.g. broken images and/or links)"),
        actions: {
            primary: {
                text: gettext("OK"),
                click: function(view) {
                    // call the back-end to actually remove the asset
                    var url = $('.asset-library').data('remove-asset-callback-url');
                    var row = $(that).closest('tr');
                    $.post(url,
                        { 'location': row.data('id') },
                        function() {
                            // show the post-commit confirmation
                            var deleted = new CMS.Views.Notification.Confirmation({
                                title: gettext("Your file has been deleted."),
                                closeIcon: false,
                                maxShown: 2000
                            });
                            deleted.show();
                            row.remove();
                            analytics.track('Deleted Asset', {
                                'course': course_location_analytics,
                                'id': row.data('id')
                            });
                        }
                    );
                    view.hide();
                }
            },
            secondary: [{
                text: gettext("Cancel"),
                click: function(view) {
                    view.hide();
                }
            }]
        }
    });
    return msg.show();
}

function showUploadModal(e) {
    e.preventDefault();
    $modal = $('.upload-modal').show();
    $('.file-input').bind('change', startUpload);
    $modalCover.show();
}

function showFileSelectionMenu(e) {
    e.preventDefault();
    $('.file-input').click();
}

function startUpload(e) {
    var files = $('.file-input').get(0).files;
    if (files.length === 0)
        return;

    $('.upload-modal h1').html(gettext('Uploading…'));
    $('.upload-modal .file-name').html(files[0].name);
    $('.upload-modal .file-chooser').ajaxSubmit({
        beforeSend: resetUploadBar,
        uploadProgress: showUploadFeedback,
        complete: displayFinishedUpload
    });
    $('.upload-modal .choose-file-button').hide();
    $('.upload-modal .progress-bar').removeClass('loaded').show();
}

function resetUploadBar() {
    var percentVal = '0%';
    $('.upload-modal .progress-fill').width(percentVal);
    $('.upload-modal .progress-fill').html(percentVal);
}

function showUploadFeedback(event, position, total, percentComplete) {
    var percentVal = percentComplete + '%';
    $('.upload-modal .progress-fill').width(percentVal);
    $('.upload-modal .progress-fill').html(percentVal);
}

function displayFinishedUpload(xhr) {
    if (xhr.status == 200) {
        markAsLoaded();
    }

    var resp = JSON.parse(xhr.responseText);
    $('.upload-modal .embeddable-xml-input').val(resp.portable_url);
    $('.upload-modal .embeddable').show();
    $('.upload-modal .file-name').hide();
    $('.upload-modal .progress-fill').html(resp.msg);
    $('.upload-modal .choose-file-button').html(gettext('Load Another File')).show();
    $('.upload-modal .progress-fill').width('100%');

    // see if this id already exists, if so, then user must have updated an existing piece of content
    $("tr[data-id='" + resp.url + "']").remove();

    var template = $('#new-asset-element').html();
    var html = Mustache.to_html(template, resp);
    $('table > tbody').prepend(html);

    // re-bind the listeners to delete it
    $('.remove-asset-button').bind('click', removeAsset);

    analytics.track('Uploaded a File', {
        'course': course_location_analytics,
        'asset_url': resp.url
    });
}

// checks whether or not the url is external to the local site.
// generously provided by StackOverflow: http://stackoverflow.com/questions/6238351/fastest-way-to-detect-external-urls
window.isExternal = function (url) {
    // parse the url into protocol, host, path, query, and fragment. More information can be found here: http://tools.ietf.org/html/rfc3986#appendix-B
    var match = url.match(/^([^:\/?#]+:)?(?:\/\/([^\/?#]*))?([^?#]+)?(\?[^#]*)?(#.*)?/);
    // match[1] matches a protocol if one exists in the url
    // if the protocol in the url does not match the protocol in the window's location, this url is considered external
    if (typeof match[1] === "string" &&
            match[1].length > 0 &&
            match[1].toLowerCase() !== location.protocol)
        return true;
    // match[2] matches the host if one exists in the url
    // if the host in the url does not match the host of the window location, this url is considered external
    if (typeof match[2] === "string" &&
            match[2].length > 0 &&
            // this regex removes the port number if it patches the current location's protocol
            match[2].replace(new RegExp(":("+{"http:":80,"https:":443}[location.protocol]+")?$"), "") !== location.host)
        return true;
    return false;
};

// Utility method for replacing a portion of a string.
window.rewriteStaticLinks = function(content, from, to) {
    if (from === null || to === null) {
        return content
    }

    var regex = new RegExp(from, 'g');
    return content.replace(regex, to)
};

if (!CMS.Models['Settings']) CMS.Models.Settings = new Object();

CMS.Models.Settings.CourseGradingPolicy = Backbone.Model.extend({
    defaults : {
        course_location : null,
        graders : null,  // CourseGraderCollection
        grade_cutoffs : null,  // CourseGradeCutoff model
        grace_period : null // either null or { hours: n, minutes: m, ...}
    },
    parse: function(attributes) {
        if (attributes['course_location']) {
            attributes.course_location = new CMS.Models.Location(attributes.course_location, {parse:true});
        }
        if (attributes['graders']) {
            var graderCollection;
            // interesting race condition: if {parse:true} when newing, then parse called before .attributes created
            if (this.attributes && this.has('graders')) {
                graderCollection = this.get('graders');
                graderCollection.reset(attributes.graders);
            }
            else {
                graderCollection = new CMS.Models.Settings.CourseGraderCollection(attributes.graders);
                graderCollection.course_location = attributes['course_location'] || this.get('course_location');
            }
            attributes.graders = graderCollection;
        }
        // If grace period is unset or equal to 00:00 on the server,
        // it's received as null
        if (attributes['grace_period'] === null) {
            attributes.grace_period = {
                hours: 0,
                minutes: 0
            }
        }
        return attributes;
    },
    url : function() {
        var location = this.get('course_location');
        return '/' + location.get('org') + "/" + location.get('course') + '/settings-details/' + location.get('name') + '/section/grading';
    },
    gracePeriodToDate : function() {
        var newDate = new Date();
        if (this.has('grace_period') && this.get('grace_period')['hours'])
            newDate.setHours(this.get('grace_period')['hours']);
        else newDate.setHours(0);
        if (this.has('grace_period') && this.get('grace_period')['minutes'])
            newDate.setMinutes(this.get('grace_period')['minutes']);
        else newDate.setMinutes(0);
        if (this.has('grace_period') && this.get('grace_period')['seconds'])
            newDate.setSeconds(this.get('grace_period')['seconds']);
        else newDate.setSeconds(0);

        return newDate;
    },
    parseGracePeriod : function(grace_period) {
        // Enforce hours:minutes format
        if(!/^\d{2,3}:\d{2}$/.test(grace_period)) {
            return null;
        }
        var pieces = grace_period.split(/:/);
        return {
            hours: parseInt(pieces[0], 10),
            minutes: parseInt(pieces[1], 10)
        }
    },
    validate : function(attrs) {
        if(_.has(attrs, 'grace_period')) {
            if(attrs['grace_period'] === null) {
                return {
                    'grace_period': gettext('Grace period must be specified in HH:MM format.')
                }
            }
        }
    }
});

CMS.Models.Settings.CourseGrader = Backbone.Model.extend({
    defaults: {
        "type" : "",	// must be unique w/in collection (ie. w/in course)
        "min_count" : 1,
        "drop_count" : 0,
        "short_label" : "",	// what to use in place of type if space is an issue
        "weight" : 0 // int 0..100
    },
    parse : function(attrs) {
        if (attrs['weight']) {
            if (!_.isNumber(attrs.weight)) attrs.weight = parseInt(attrs.weight);
        }
        if (attrs['min_count']) {
            if (!_.isNumber(attrs.min_count)) attrs.min_count = parseInt(attrs.min_count);
        }
        if (attrs['drop_count']) {
            if (!_.isNumber(attrs.drop_count)) attrs.drop_count = parseInt(attrs.drop_count);
        }
        return attrs;
    },
    validate : function(attrs) {
        var errors = {};
        if (_.has(attrs, 'type')) {
            if (_.isEmpty(attrs['type'])) {
                errors.type = "The assignment type must have a name.";
            }
            else {
                // FIXME somehow this.collection is unbound sometimes. I can't track down when
                var existing = this.collection && this.collection.some(function(other) { return (other.cid != this.cid) && (other.get('type') == attrs['type']);}, this);
                if (existing) {
                    errors.type = gettext("There's already another assignment type with this name.");
                }
            }
        }
        if (_.has(attrs, 'weight')) {
            var intWeight = parseInt(attrs.weight); // see if this ensures value saved is int
            if (!isFinite(intWeight) || /\D+/.test(attrs.weight) || intWeight < 0 || intWeight > 100) {
                errors.weight = gettext("Please enter an integer between 0 and 100.");
            }
            else {
                attrs.weight = intWeight;
                if (this.collection && attrs.weight > 0) {
                    // FIXME b/c saves don't update the models if validation fails, we should
                    // either revert the field value to the one in the model and make them make room
                    // or figure out a wholistic way to balance the vals across the whole
//                  if ((this.collection.sumWeights() + attrs.weight - this.get('weight')) > 100)
//                  errors.weight = "The weights cannot add to more than 100.";
                }
            }}
        if (_.has(attrs, 'min_count')) {
            if (!isFinite(attrs.min_count) || /\D+/.test(attrs.min_count)) {
                errors.min_count = gettext("Please enter an integer.");
            }
            else attrs.min_count = parseInt(attrs.min_count);
        }
        if (_.has(attrs, 'drop_count')) {
            if (!isFinite(attrs.drop_count) || /\D+/.test(attrs.drop_count)) {
                errors.drop_count = gettext("Please enter an integer.");
            }
            else attrs.drop_count = parseInt(attrs.drop_count);
        }
        if (_.has(attrs, 'min_count') && _.has(attrs, 'drop_count') && attrs.drop_count > attrs.min_count) {
            errors.drop_count = _.template(
                gettext("Cannot drop more <% attrs.types %> than will assigned."),
                attrs, {variable: 'attrs'});
        }
        if (!_.isEmpty(errors)) return errors;
    }
});

CMS.Models.Settings.CourseGraderCollection = Backbone.Collection.extend({
    model : CMS.Models.Settings.CourseGrader,
    course_location : null, // must be set to a Location object
    url : function() {
        return '/' + this.course_location.get('org') + "/" + this.course_location.get('course') + '/settings-grading/' + this.course_location.get('name') + '/';
    },
    sumWeights : function() {
        return this.reduce(function(subtotal, grader) { return subtotal + grader.get('weight'); }, 0);
    }
});
 }).call(this);