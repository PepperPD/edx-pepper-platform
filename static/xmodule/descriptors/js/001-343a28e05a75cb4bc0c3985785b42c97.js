// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.HTMLEditingDescriptor = (function() {
    HTMLEditingDescriptor.isInactiveClass = "is-inactive";

    function HTMLEditingDescriptor(element) {
      this.focusVisualEditor = __bind(this.focusVisualEditor, this);
      this.initInstanceCallback = __bind(this.initInstanceCallback, this);
      this.onSwitchEditor = __bind(this.onSwitchEditor, this);
      this.setupTinyMCE = __bind(this.setupTinyMCE, this);
      var $element;
      this.element = element;
      this.base_asset_url = this.element.find("#editor-tab").data('base-asset-url');
      if (this.base_asset_url === void 0) {
        this.base_asset_url = null;
      }
      this.advanced_editor = CodeMirror.fromTextArea($(".edit-box", this.element)[0], {
        mode: "text/html",
        lineNumbers: true,
        lineWrapping: true
      });
      this.$advancedEditorWrapper = $(this.advanced_editor.getWrapperElement());
      this.$advancedEditorWrapper.addClass(HTMLEditingDescriptor.isInactiveClass);
      tinyMCE.baseURL = '/static/js/vendor/tiny_mce';
      this.tiny_mce_textarea = $(".tiny-mce", this.element).tinymce({
        script_url: '/static/js/vendor/tiny_mce/tiny_mce.js',
        theme: "advanced",
        skin: 'studio',
        schema: "html5",
        convert_urls: false,
        content_css: "/static/css/tiny-mce.css",
        popup_css: '/static/js/vendor/tiny_mce/themes/advanced/skins/default/dialog.css',
        formats: {
          h4: {},
          h5: {},
          h6: {},
          code: {
            inline: 'code'
          }
        },
        visual: false,
        theme_advanced_buttons1: "formatselect,bold,italic,underline,|,bullist,numlist,outdent,indent,|,blockquote,wrapAsCode,|,link,unlink",
        theme_advanced_toolbar_location: "top",
        theme_advanced_toolbar_align: "left",
        theme_advanced_statusbar_location: "none",
        theme_advanced_resizing: true,
        theme_advanced_blockformats: "p,pre,h1,h2,h3",
        width: '100%',
        height: '400px',
        setup: this.setupTinyMCE,
        init_instance_callback: this.initInstanceCallback
      });
      this.showingVisualEditor = true;
      $element = $(element);
      this.$htmlTab = $element.find('.html-tab');
      this.$visualTab = $element.find('.visual-tab');
      this.element.on('click', '.editor-tabs .tab', this.onSwitchEditor);
    }

    HTMLEditingDescriptor.prototype.setupTinyMCE = function(ed) {
      ed.addButton('wrapAsCode', {
        title: 'Code',
        image: '/static/images/ico-tinymce-code.png',
        onclick: function() {
          ed.formatter.toggle('code');
          return ed.isNotDirty = false;
        }
      });
      ed.onNodeChange.add(function(editor, command, e) {
        return command.setActive('wrapAsCode', e.nodeName === 'CODE');
      });
      return this.visualEditor = ed;
    };

    HTMLEditingDescriptor.prototype.onSwitchEditor = function(e) {
      var $currentTarget, visualEditor;
      e.preventDefault();
      $currentTarget = $(e.currentTarget);
      if (!$currentTarget.hasClass('current')) {
        $currentTarget.addClass('current');
        this.$mceToolbar.toggleClass(HTMLEditingDescriptor.isInactiveClass);
        this.$advancedEditorWrapper.toggleClass(HTMLEditingDescriptor.isInactiveClass);
        visualEditor = this.getVisualEditor();
        if ($currentTarget.data('tab') === 'visual') {
          this.$htmlTab.removeClass('current');
          return this.showVisualEditor(visualEditor);
        } else {
          this.$visualTab.removeClass('current');
          return this.showAdvancedEditor(visualEditor);
        }
      }
    };

    HTMLEditingDescriptor.prototype.showAdvancedEditor = function(visualEditor) {
      var content;
      if (visualEditor.isDirty()) {
        content = rewriteStaticLinks(visualEditor.getContent({
          no_events: 1
        }), this.base_asset_url, '/static/');
        this.advanced_editor.setValue(content);
        this.advanced_editor.setCursor(0);
      }
      this.advanced_editor.refresh();
      this.advanced_editor.focus();
      return this.showingVisualEditor = false;
    };

    HTMLEditingDescriptor.prototype.showVisualEditor = function(visualEditor) {
      var content;
      content = rewriteStaticLinks(this.advanced_editor.getValue(), '/static/', this.base_asset_url);
      visualEditor.setContent(content);
      visualEditor.startContent = content;
      this.focusVisualEditor(visualEditor);
      return this.showingVisualEditor = true;
    };

    HTMLEditingDescriptor.prototype.initInstanceCallback = function(visualEditor) {
      visualEditor.setContent(rewriteStaticLinks(this.advanced_editor.getValue(), '/static/', this.base_asset_url));
      return this.focusVisualEditor(visualEditor);
    };

    HTMLEditingDescriptor.prototype.focusVisualEditor = function(visualEditor) {
      visualEditor.focus();
      visualEditor.isNotDirty = true;
      if (this.$mceToolbar == null) {
        return this.$mceToolbar = $(this.element).find('table.mceToolbar');
      }
    };

    HTMLEditingDescriptor.prototype.getVisualEditor = function() {
      /*
      Returns the instance of TinyMCE.
      This is different from the textarea that exists in the HTML template (@tiny_mce_textarea.
      
      Pulled out as a helper method for unit test.
      */

      return this.visualEditor;
    };

    HTMLEditingDescriptor.prototype.save = function() {
      var text, visualEditor;
      this.element.off('click', '.editor-tabs .tab', this.onSwitchEditor);
      text = this.advanced_editor.getValue();
      visualEditor = this.getVisualEditor();
      if (this.showingVisualEditor && visualEditor.isDirty()) {
        text = rewriteStaticLinks(visualEditor.getContent({
          no_events: 1
        }), this.base_asset_url, '/static/');
      }
      return {
        data: text
      };
    };

    return HTMLEditingDescriptor;

  })();

}).call(this);
