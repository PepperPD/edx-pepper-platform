// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Rubric = (function() {
    Rubric.prototype.rubric_category_sel = '.rubric-category';

    Rubric.prototype.rubric_sel = '.rubric';

    function Rubric(el) {
      this.check_complete = __bind(this.check_complete, this);
      this.get_total_score = __bind(this.get_total_score, this);
      this.get_score_list = __bind(this.get_score_list, this);
      this.tracking_callback = __bind(this.tracking_callback, this);
      this.keypress_callback = __bind(this.keypress_callback, this);
      this.initialize = __bind(this.initialize, this);
      this.el = el;
    }

    Rubric.prototype.initialize = function(location) {
      this.$(this.rubric_sel).data("location", location);
      this.$('input[class="score-selection"]').change(this.tracking_callback);
      $(window).unbind('keydown', this.keypress_callback);
      $(window).keydown(this.keypress_callback);
      this.categories = this.$(this.rubric_category_sel);
      this.category = this.$(this.categories.first());
      return this.category_index = 0;
    };

    Rubric.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    Rubric.prototype.keypress_callback = function(event) {
      var inputs, max_score, selected;
      if (this.$(event.target).is('input, textarea')) {
        return;
      }
      if (event.which >= 48 && event.which <= 57) {
        selected = event.which - 48;
      } else if (event.which >= 96 && event.which <= 105) {
        selected = event.which - 96;
      } else {
        return;
      }
      if (this.category_index <= this.categories.length) {
        inputs = this.$("input[name='score-selection-" + this.category_index + "']");
        max_score = inputs.length - 1;
        if (selected > max_score || selected < 0) {
          return;
        }
        inputs.filter("input[value=" + selected + "]").click();
        this.category_index++;
        return this.category = this.$(this.categories[this.category_index]);
      }
    };

    Rubric.prototype.tracking_callback = function(event) {
      var category, data, location, target_selection;
      target_selection = this.$(event.target).val();
      category = this.$(event.target).data("category");
      location = this.$(this.rubric_sel).data('location');
      data = {
        location: location,
        selection: target_selection,
        category: category
      };
      return Logger.log('rubric_select', data);
    };

    Rubric.prototype.get_score_list = function() {
      var i, num_categories, score, score_lst, _i, _ref;
      num_categories = this.$(this.rubric_category_sel).length;
      score_lst = [];
      for (i = _i = 0, _ref = num_categories - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        score = this.$("input[name='score-selection-" + i + "']:checked").val();
        score_lst.push(score);
      }
      return score_lst;
    };

    Rubric.prototype.get_total_score = function() {
      var score, score_lst, tot, _i, _len;
      score_lst = this.get_score_list();
      tot = 0;
      for (_i = 0, _len = score_lst.length; _i < _len; _i++) {
        score = score_lst[_i];
        tot += parseInt(score);
      }
      return tot;
    };

    Rubric.prototype.check_complete = function() {
      var i, num_categories, score, _i, _ref;
      num_categories = this.$(this.rubric_category_sel).length;
      for (i = _i = 0, _ref = num_categories - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        score = this.$("input[name='score-selection-" + i + "']:checked").val();
        if (score === void 0) {
          return false;
        }
      }
      return true;
    };

    return Rubric;

  })();

  this.CombinedOpenEnded = (function() {
    CombinedOpenEnded.prototype.wrapper_sel = 'section.xmodule_CombinedOpenEndedModule';

    CombinedOpenEnded.prototype.coe_sel = 'section.combined-open-ended';

    CombinedOpenEnded.prototype.reset_button_sel = '.reset-button';

    CombinedOpenEnded.prototype.next_step_sel = '.next-step-button';

    CombinedOpenEnded.prototype.question_header_sel = '.question-header';

    CombinedOpenEnded.prototype.submit_evaluation_sel = '.submit-evaluation-button';

    CombinedOpenEnded.prototype.result_container_sel = 'div.result-container';

    CombinedOpenEnded.prototype.combined_rubric_sel = '.combined-rubric-container';

    CombinedOpenEnded.prototype.open_ended_child_sel = 'section.open-ended-child';

    CombinedOpenEnded.prototype.error_sel = '.error';

    CombinedOpenEnded.prototype.answer_area_sel = 'textarea.answer';

    CombinedOpenEnded.prototype.answer_area_div_sel = 'div.answer';

    CombinedOpenEnded.prototype.prompt_sel = '.prompt';

    CombinedOpenEnded.prototype.rubric_wrapper_sel = '.rubric-wrapper';

    CombinedOpenEnded.prototype.hint_wrapper_sel = '.hint-wrapper';

    CombinedOpenEnded.prototype.message_wrapper_sel = '.message-wrapper';

    CombinedOpenEnded.prototype.submit_button_sel = '.submit-button';

    CombinedOpenEnded.prototype.skip_button_sel = '.skip-button';

    CombinedOpenEnded.prototype.file_upload_sel = '.file-upload';

    CombinedOpenEnded.prototype.file_upload_box_sel = '.file-upload-box';

    CombinedOpenEnded.prototype.file_upload_preview_sel = '.file-upload-preview';

    CombinedOpenEnded.prototype.fof_sel = 'textarea.feedback-on-feedback';

    CombinedOpenEnded.prototype.sub_id_sel = 'input.submission_id';

    CombinedOpenEnded.prototype.grader_id_sel = 'input.grader_id';

    CombinedOpenEnded.prototype.grader_status_sel = '.grader-status';

    CombinedOpenEnded.prototype.info_rubric_elements_sel = '.rubric-info-item';

    CombinedOpenEnded.prototype.rubric_collapse_sel = '.rubric-collapse';

    CombinedOpenEnded.prototype.next_rubric_sel = '.rubric-next-button';

    CombinedOpenEnded.prototype.previous_rubric_sel = '.rubric-previous-button';

    CombinedOpenEnded.prototype.oe_alert_sel = '.open-ended-alert';

    function CombinedOpenEnded(el) {
      this.graded_callback = __bind(this.graded_callback, this);
      this.setup_score_selection = __bind(this.setup_score_selection, this);
      this.toggle_rubric = __bind(this.toggle_rubric, this);
      this.preview_image = __bind(this.preview_image, this);
      this.remove_attribute = __bind(this.remove_attribute, this);
      this.prompt_hide = __bind(this.prompt_hide, this);
      this.prompt_show = __bind(this.prompt_show, this);
      this.shift_rubric = __bind(this.shift_rubric, this);
      this.previous_rubric = __bind(this.previous_rubric, this);
      this.next_rubric = __bind(this.next_rubric, this);
      this.hide_rubrics = __bind(this.hide_rubrics, this);
      this.collapse_question = __bind(this.collapse_question, this);
      this.replace_text_inputs = __bind(this.replace_text_inputs, this);
      this.hide_file_upload = __bind(this.hide_file_upload, this);
      this.setup_file_upload = __bind(this.setup_file_upload, this);
      this.poll = __bind(this.poll, this);
      this.queueing = __bind(this.queueing, this);
      this.gentle_alert = __bind(this.gentle_alert, this);
      this.next_problem = __bind(this.next_problem, this);
      this.reset = __bind(this.reset, this);
      this.skip_post_assessment = __bind(this.skip_post_assessment, this);
      this.save_hint = __bind(this.save_hint, this);
      this.save_assessment = __bind(this.save_assessment, this);
      this.keyup_handler = __bind(this.keyup_handler, this);
      this.keydown_handler = __bind(this.keydown_handler, this);
      this.save_answer = __bind(this.save_answer, this);
      this.replace_answer = __bind(this.replace_answer, this);
      this.rebind = __bind(this.rebind, this);
      this.message_post = __bind(this.message_post, this);
      this.show_combined_rubric_current = __bind(this.show_combined_rubric_current, this);
      this.get_html = __bind(this.get_html, this);
      this.get_html_callback = __bind(this.get_html_callback, this);
      this.el = el;
      this.$el = $(el);
      this.reinitialize(el);
      $(window).keydown(this.keydown_handler);
      $(window).keyup(this.keyup_handler);
    }

    CombinedOpenEnded.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    CombinedOpenEnded.prototype.reinitialize = function() {
      this.has_been_reset = false;
      this.wrapper = this.$(this.wrapper_sel);
      this.coe = this.$(this.coe_sel);
      this.ajax_url = this.coe.data('ajax-url');
      this.get_html();
      this.coe = this.$(this.coe_sel);
      this.allow_reset = this.coe.data('allow_reset');
      this.id = this.coe.data('id');
      this.state = this.coe.data('state');
      this.task_count = this.coe.data('task-count');
      this.task_number = this.coe.data('task-number');
      this.accept_file_upload = this.coe.data('accept-file-upload');
      this.location = this.coe.data('location');
      this.rub = new Rubric(this.coe);
      this.rub.initialize(this.location);
      this.is_ctrl = false;
      this.reset_button = this.$(this.reset_button_sel);
      this.reset_button.click(this.reset);
      this.next_problem_button = this.$(this.next_step_sel);
      this.next_problem_button.click(this.next_problem);
      this.question_header = this.$(this.question_header_sel);
      this.question_header.click(this.collapse_question);
      Collapsible.setCollapsibles(this.$el);
      this.submit_evaluation_button = this.$(this.submit_evaluation_sel);
      this.submit_evaluation_button.click(this.message_post);
      this.results_container = this.$(this.result_container_sel);
      this.combined_rubric_container = this.$(this.combined_rubric_sel);
      this.oe = this.$(this.open_ended_child_sel);
      this.errors_area = this.$(this.oe).find(this.error_sel);
      this.answer_area = this.$(this.oe).find(this.answer_area_sel);
      this.prompt_container = this.$(this.oe).find(this.prompt_sel);
      this.rubric_wrapper = this.$(this.oe).find(this.rubric_wrapper_sel);
      this.hint_wrapper = this.$(this.oe).find(this.hint_wrapper_sel);
      this.message_wrapper = this.$(this.oe).find(this.message_wrapper_sel);
      this.submit_button = this.$(this.oe).find(this.submit_button_sel);
      this.child_state = this.oe.data('state');
      this.child_type = this.oe.data('child-type');
      if (this.child_type === "openended") {
        this.skip_button = this.$(this.oe).find(this.skip_button_sel);
        this.skip_button.click(this.skip_post_assessment);
      }
      this.file_upload_area = this.$(this.oe).find(this.file_upload_sel);
      this.can_upload_files = false;
      this.open_ended_child = this.$(this.oe).find(this.open_ended_child_sel);
      this.out_of_sync_message = 'The problem state got out of sync.  Try reloading the page.';
      if (this.task_number > 1) {
        this.prompt_hide();
      } else if (this.task_number === 1 && this.child_state !== 'initial') {
        this.prompt_hide();
      }
      this.find_assessment_elements();
      this.find_hint_elements();
      return this.rebind();
    };

    CombinedOpenEnded.prototype.get_html_callback = function(response) {
      return this.coe.replaceWith(response.html);
    };

    CombinedOpenEnded.prototype.get_html = function() {
      var url;
      url = "" + this.ajax_url + "/get_html";
      return $.ajaxWithPrefix({
        type: 'POST',
        url: url,
        data: {},
        success: this.get_html_callback,
        async: false
      });
    };

    CombinedOpenEnded.prototype.show_combined_rubric_current = function() {
      var data,
        _this = this;
      data = {};
      return $.postWithPrefix("" + this.ajax_url + "/get_combined_rubric", data, function(response) {
        if (response.success) {
          _this.combined_rubric_container.after(response.html).remove();
          _this.combined_rubric_container = _this.$(_this.combined_rubric_sel);
          _this.toggle_rubric("");
          _this.rubric_collapse = _this.$(_this.rubric_collapse_sel);
          _this.rubric_collapse.click(_this.toggle_rubric);
          _this.hide_rubrics();
          _this.$(_this.previous_rubric_sel).click(_this.previous_rubric);
          _this.$(_this.next_rubric_sel).click(_this.next_rubric);
          if (response.hide_reset) {
            return _this.reset_button.hide();
          }
        }
      });
    };

    CombinedOpenEnded.prototype.message_post = function(event) {
      var evaluation_scoring, external_grader_message, fd, feedback, grader_id, score, settings, submission_id,
        _this = this;
      external_grader_message = $(event.target).parent().parent().parent();
      evaluation_scoring = $(event.target).parent();
      fd = new FormData();
      feedback = this.$(evaluation_scoring).find(this.fof_sel)[0].value;
      submission_id = this.$(external_grader_message).find(this.sub_id_sel)[0].value;
      grader_id = this.$(external_grader_message).find(this.grader_id_sel)[0].value;
      score = this.$(evaluation_scoring).find("input:radio[name='evaluation-score']:checked").val();
      fd.append('feedback', feedback);
      fd.append('submission_id', submission_id);
      fd.append('grader_id', grader_id);
      if (!score) {
        this.gentle_alert("You need to pick a rating before you can submit.");
        return;
      } else {
        fd.append('score', score);
      }
      settings = {
        type: "POST",
        data: fd,
        processData: false,
        contentType: false,
        success: function(response) {
          _this.gentle_alert(response.msg);
          _this.$('section.evaluation').slideToggle();
          return _this.message_wrapper.html(response.message_html);
        }
      };
      return $.ajaxWithPrefix("" + this.ajax_url + "/save_post_assessment", settings);
    };

    CombinedOpenEnded.prototype.rebind = function() {
      this.submit_button.unbind('click');
      this.submit_button.show();
      this.reset_button.hide();
      this.hide_file_upload();
      this.next_problem_button.hide();
      this.hint_area.attr('disabled', false);
      if (this.task_number === 1 && this.child_state === 'assessing') {
        this.prompt_hide();
      }
      if (this.child_state === 'done') {
        this.rubric_wrapper.hide();
      }
      if (this.child_type === "openended") {
        this.skip_button.hide();
      }
      if (this.allow_reset === "True") {
        this.show_combined_rubric_current();
        this.reset_button.show();
        this.submit_button.hide();
        this.answer_area.attr("disabled", true);
        this.replace_text_inputs();
        this.hint_area.attr('disabled', true);
        if (this.task_number < this.task_count) {
          return this.gentle_alert("Your score did not meet the criteria to move to the next step.");
        }
      } else if (this.child_state === 'initial') {
        this.answer_area.attr("disabled", false);
        this.submit_button.prop('value', 'Submit');
        this.submit_button.click(this.save_answer);
        return this.setup_file_upload();
      } else if (this.child_state === 'assessing') {
        this.answer_area.attr("disabled", true);
        this.replace_text_inputs();
        this.hide_file_upload();
        this.submit_button.prop('value', 'Submit assessment');
        this.submit_button.click(this.save_assessment);
        this.submit_button.attr("disabled", true);
        if (this.child_type === "openended") {
          this.submit_button.hide();
          this.queueing();
          this.grader_status = this.$(this.grader_status_sel);
          return this.grader_status.html("<span class='grading'>Your response has been submitted.  Please check back later for your grade.</span> ");
        } else if (this.child_type === "selfassessment") {
          return this.setup_score_selection();
        }
      } else if (this.child_state === 'post_assessment') {
        if (this.child_type === "openended") {
          this.skip_button.show();
          this.skip_post_assessment();
        }
        this.answer_area.attr("disabled", true);
        this.replace_text_inputs();
        this.submit_button.prop('value', 'Submit post-assessment');
        if (this.child_type === "selfassessment") {
          return this.submit_button.click(this.save_hint);
        } else {
          return this.submit_button.click(this.message_post);
        }
      } else if (this.child_state === 'done') {
        this.show_combined_rubric_current();
        this.rubric_wrapper.hide();
        this.answer_area.attr("disabled", true);
        this.replace_text_inputs();
        this.hint_area.attr('disabled', true);
        this.submit_button.hide();
        if (this.child_type === "openended") {
          this.skip_button.hide();
        }
        if (this.task_number < this.task_count) {
          return this.next_problem_button.show();
        } else {
          return this.reset_button.show();
        }
      }
    };

    CombinedOpenEnded.prototype.find_assessment_elements = function() {
      return this.assessment = this.$('input[name="grade-selection"]');
    };

    CombinedOpenEnded.prototype.find_hint_elements = function() {
      return this.hint_area = this.$('textarea.post_assessment');
    };

    CombinedOpenEnded.prototype.replace_answer = function(response) {
      var answer_area_div;
      if (response.success) {
        this.rubric_wrapper.html(response.rubric_html);
        this.rubric_wrapper.show();
        this.rub = new Rubric(this.coe);
        this.rub.initialize(this.location);
        this.child_state = 'assessing';
        this.find_assessment_elements();
        this.rebind();
        answer_area_div = this.$(this.answer_area_div_sel);
        return answer_area_div.html(response.student_response);
      } else {
        this.can_upload_files = pre_can_upload_files;
        return this.gentle_alert(response.error);
      }
    };

    CombinedOpenEnded.prototype.save_answer = function(event) {
      var fd, files, max_filesize, pre_can_upload_files, settings,
        _this = this;
      this.submit_button.attr("disabled", true);
      this.submit_button.hide();
      event.preventDefault();
      this.answer_area.attr("disabled", true);
      max_filesize = 2 * 1000 * 1000;
      pre_can_upload_files = this.can_upload_files;
      if (this.child_state === 'initial') {
        files = "";
        if (this.can_upload_files === true) {
          files = this.$(this.file_upload_box_sel)[0].files[0];
          if (files !== void 0) {
            if (files.size > max_filesize) {
              this.can_upload_files = false;
              files = "";
            }
          } else {
            this.can_upload_files = false;
          }
        }
        fd = new FormData();
        fd.append('student_answer', this.answer_area.val());
        fd.append('student_file', files);
        fd.append('can_upload_files', this.can_upload_files);
        settings = {
          type: "POST",
          data: fd,
          processData: false,
          contentType: false,
          async: false,
          success: function(response) {
            return _this.replace_answer(response);
          }
        };
        return $.ajaxWithPrefix("" + this.ajax_url + "/save_answer", settings);
      } else {
        return this.errors_area.html(this.out_of_sync_message);
      }
    };

    CombinedOpenEnded.prototype.keydown_handler = function(event) {
      if (event.which === 17 && this.is_ctrl === false) {
        return this.is_ctrl = true;
      } else if (this.is_ctrl === true && event.which === 13 && this.child_state === 'assessing' && this.rub.check_complete()) {
        return this.save_assessment(event);
      }
    };

    CombinedOpenEnded.prototype.keyup_handler = function(event) {
      if (event.which === 17 && this.is_ctrl === true) {
        return this.is_ctrl = false;
      }
    };

    CombinedOpenEnded.prototype.save_assessment = function(event) {
      var checked_assessment, data, score_list,
        _this = this;
      this.submit_button.attr("disabled", true);
      this.submit_button.hide();
      event.preventDefault();
      if (this.child_state === 'assessing' && this.rub.check_complete()) {
        checked_assessment = this.rub.get_total_score();
        score_list = this.rub.get_score_list();
        data = {
          'assessment': checked_assessment,
          'score_list': score_list
        };
        return $.postWithPrefix("" + this.ajax_url + "/save_assessment", data, function(response) {
          if (response.success) {
            _this.child_state = response.state;
            if (_this.child_state === 'post_assessment') {
              _this.hint_wrapper.html(response.hint_html);
              _this.find_hint_elements();
            } else if (_this.child_state === 'done') {
              _this.rubric_wrapper.hide();
            }
            return _this.rebind();
          } else {
            return _this.errors_area.html(response.error);
          }
        });
      } else {
        return this.errors_area.html(this.out_of_sync_message);
      }
    };

    CombinedOpenEnded.prototype.save_hint = function(event) {
      var data,
        _this = this;
      event.preventDefault();
      if (this.child_state === 'post_assessment') {
        data = {
          'hint': this.hint_area.val()
        };
        return $.postWithPrefix("" + this.ajax_url + "/save_post_assessment", data, function(response) {
          if (response.success) {
            _this.message_wrapper.html(response.message_html);
            _this.child_state = 'done';
            return _this.rebind();
          } else {
            return _this.errors_area.html(response.error);
          }
        });
      } else {
        return this.errors_area.html(this.out_of_sync_message);
      }
    };

    CombinedOpenEnded.prototype.skip_post_assessment = function() {
      var _this = this;
      if (this.child_state === 'post_assessment') {
        return $.postWithPrefix("" + this.ajax_url + "/skip_post_assessment", {}, function(response) {
          if (response.success) {
            _this.child_state = 'done';
            return _this.rebind();
          } else {
            return _this.errors_area.html(response.error);
          }
        });
      } else {
        return this.errors_area.html(this.out_of_sync_message);
      }
    };

    CombinedOpenEnded.prototype.reset = function(event) {
      var _this = this;
      event.preventDefault();
      if (this.child_state === 'done' || this.allow_reset === "True") {
        return $.postWithPrefix("" + this.ajax_url + "/reset", {}, function(response) {
          if (response.success) {
            _this.answer_area.val('');
            _this.rubric_wrapper.html('');
            _this.hint_wrapper.html('');
            _this.message_wrapper.html('');
            _this.child_state = 'initial';
            _this.coe.after(response.html).remove();
            _this.allow_reset = "False";
            _this.reinitialize(_this.element);
            _this.has_been_reset = true;
            _this.rebind();
            return _this.reset_button.hide();
          } else {
            return _this.errors_area.html(response.error);
          }
        });
      } else {
        return this.errors_area.html(this.out_of_sync_message);
      }
    };

    CombinedOpenEnded.prototype.next_problem = function() {
      var _this = this;
      if (this.child_state === 'done') {
        return $.postWithPrefix("" + this.ajax_url + "/next_problem", {}, function(response) {
          if (response.success) {
            _this.answer_area.val('');
            _this.rubric_wrapper.html('');
            _this.hint_wrapper.html('');
            _this.message_wrapper.html('');
            _this.child_state = 'initial';
            _this.coe.after(response.html).remove();
            _this.reinitialize(_this.element);
            _this.rebind();
            _this.next_problem_button.hide();
            if (!response.allow_reset) {
              return _this.gentle_alert("Moved to next step.");
            } else {
              _this.gentle_alert("Your score did not meet the criteria to move to the next step.");
              return _this.show_combined_rubric_current();
            }
          } else {
            return _this.errors_area.html(response.error);
          }
        });
      } else {
        return this.errors_area.html(this.out_of_sync_message);
      }
    };

    CombinedOpenEnded.prototype.gentle_alert = function(msg) {
      var alert_elem;
      if (this.$el.find(this.oe_alert_sel).length) {
        this.$el.find(this.oe_alert_sel).remove();
      }
      alert_elem = "<div class='open-ended-alert'>" + msg + "</div>";
      this.$el.find('.open-ended-action').after(alert_elem);
      return this.$el.find(this.oe_alert_sel).css({
        opacity: 0
      }).animate({
        opacity: 1
      }, 700);
    };

    CombinedOpenEnded.prototype.queueing = function() {
      if (this.child_state === "assessing" && this.child_type === "openended") {
        if (window.queuePollerID) {
          window.clearTimeout(window.queuePollerID);
        }
        return window.queuePollerID = window.setTimeout(this.poll, 10000);
      }
    };

    CombinedOpenEnded.prototype.poll = function() {
      var _this = this;
      return $.postWithPrefix("" + this.ajax_url + "/check_for_score", function(response) {
        if (response.state === "done" || response.state === "post_assessment") {
          delete window.queuePollerID;
          return _this.reload();
        } else {
          return window.queuePollerID = window.setTimeout(_this.poll, 10000);
        }
      });
    };

    CombinedOpenEnded.prototype.setup_file_upload = function() {
      if (this.accept_file_upload === "True") {
        if (window.File && window.FileReader && window.FileList && window.Blob) {
          this.can_upload_files = true;
          this.file_upload_area.html('<input type="file" class="file-upload-box"><img class="file-upload-preview" src="#" alt="Uploaded image" />');
          this.file_upload_area.show();
          this.$(this.file_upload_preview_sel).hide();
          return this.$(this.file_upload_box_sel).change(this.preview_image);
        } else {
          return this.gentle_alert('File uploads are required for this question, but are not supported in this browser. Try the newest version of google chrome.  Alternatively, if you have uploaded the image to the web, you can paste a link to it into the answer box.');
        }
      }
    };

    CombinedOpenEnded.prototype.hide_file_upload = function() {
      if (this.accept_file_upload === "True") {
        return this.file_upload_area.hide();
      }
    };

    CombinedOpenEnded.prototype.replace_text_inputs = function() {
      var answer_class, answer_id, answer_val, new_text;
      answer_class = this.answer_area.attr('class');
      answer_id = this.answer_area.attr('id');
      answer_val = this.answer_area.val();
      new_text = '';
      new_text = "<div class='" + answer_class + "' id='" + answer_id + "'>" + answer_val + "</div>";
      return this.answer_area.replaceWith(new_text);
    };

    CombinedOpenEnded.prototype.reload = function() {
      return this.reinitialize();
    };

    CombinedOpenEnded.prototype.collapse_question = function(event) {
      var new_text;
      this.prompt_container.slideToggle();
      this.prompt_container.toggleClass('open');
      if (this.question_header.text() === "Hide Prompt") {
        new_text = "Show Prompt";
        Logger.log('oe_hide_question', {
          location: this.location
        });
      } else {
        Logger.log('oe_show_question', {
          location: this.location
        });
        new_text = "Hide Prompt";
      }
      this.question_header.text(new_text);
      return false;
    };

    CombinedOpenEnded.prototype.hide_rubrics = function() {
      var rub, rubrics, _i, _len, _results;
      rubrics = this.$(this.combined_rubric_sel);
      _results = [];
      for (_i = 0, _len = rubrics.length; _i < _len; _i++) {
        rub = rubrics[_i];
        if (this.$(rub).data('status') === "shown") {
          _results.push(this.$(rub).show());
        } else {
          _results.push(this.$(rub).hide());
        }
      }
      return _results;
    };

    CombinedOpenEnded.prototype.next_rubric = function() {
      this.shift_rubric(1);
      return false;
    };

    CombinedOpenEnded.prototype.previous_rubric = function() {
      this.shift_rubric(-1);
      return false;
    };

    CombinedOpenEnded.prototype.shift_rubric = function(i) {
      var number, rub, rubrics, _i, _len;
      rubrics = this.$(this.combined_rubric_sel);
      number = 0;
      for (_i = 0, _len = rubrics.length; _i < _len; _i++) {
        rub = rubrics[_i];
        if (this.$(rub).data('status') === "shown") {
          number = this.$(rub).data('number');
        }
        this.$(rub).data('status', 'hidden');
      }
      if (i === 1 && number < rubrics.length - 1) {
        number = number + i;
      }
      if (i === -1 && number > 0) {
        number = number + i;
      }
      this.$(rubrics[number]).data('status', 'shown');
      return this.hide_rubrics();
    };

    CombinedOpenEnded.prototype.prompt_show = function() {
      if (this.prompt_container.is(":hidden") === true) {
        this.prompt_container.slideToggle();
        this.prompt_container.toggleClass('open');
        return this.question_header.text("Hide Prompt");
      }
    };

    CombinedOpenEnded.prototype.prompt_hide = function() {
      if (this.prompt_container.is(":visible") === true) {
        this.prompt_container.slideToggle();
        this.prompt_container.toggleClass('open');
        return this.question_header.text("Show Prompt");
      }
    };

    CombinedOpenEnded.prototype.log_feedback_click = function(event) {
      var generated_event_type, link_text;
      link_text = this.$(event.target).html();
      if (link_text === 'See full feedback') {
        return Logger.log('oe_show_full_feedback', {});
      } else if (link_text === 'Respond to Feedback') {
        return Logger.log('oe_show_respond_to_feedback', {});
      } else {
        generated_event_type = link_text.toLowerCase().replace(" ", "_");
        return Logger.log("oe_" + generated_event_type, {});
      }
    };

    CombinedOpenEnded.prototype.log_feedback_selection = function(event) {
      var target_selection;
      target_selection = this.$(event.target).val();
      return Logger.log('oe_feedback_response_selected', {
        value: target_selection
      });
    };

    CombinedOpenEnded.prototype.remove_attribute = function(name) {
      if (this.$(this.file_upload_preview_sel).attr(name)) {
        return this.$(this.file_upload_preview_sel)[0].removeAttribute(name);
      }
    };

    CombinedOpenEnded.prototype.preview_image = function() {
      var reader,
        _this = this;
      if (this.$(this.file_upload_box_sel)[0].files && this.$(this.file_upload_box_sel)[0].files[0]) {
        reader = new FileReader();
        reader.onload = function(e) {
          var height_px, max_dim, scale_factor, width_px;
          max_dim = 150;
          _this.remove_attribute('src');
          _this.remove_attribute('height');
          _this.remove_attribute('width');
          _this.$(_this.file_upload_preview_sel).attr('src', e.target.result);
          height_px = _this.$(_this.file_upload_preview_sel)[0].height;
          width_px = _this.$(_this.file_upload_preview_sel)[0].width;
          scale_factor = 0;
          if (height_px > width_px) {
            scale_factor = height_px / max_dim;
          } else {
            scale_factor = width_px / max_dim;
          }
          _this.$(_this.file_upload_preview_sel)[0].width = width_px / scale_factor;
          _this.$(_this.file_upload_preview_sel)[0].height = height_px / scale_factor;
          return _this.$(_this.file_upload_preview_sel).show();
        };
        return reader.readAsDataURL(this.$(this.file_upload_box_sel)[0].files[0]);
      }
    };

    CombinedOpenEnded.prototype.toggle_rubric = function(event) {
      var info_rubric_elements;
      info_rubric_elements = this.$(this.info_rubric_elements_sel);
      info_rubric_elements.slideToggle();
      return false;
    };

    CombinedOpenEnded.prototype.setup_score_selection = function() {
      return this.$("input[class='score-selection']").change(this.graded_callback);
    };

    CombinedOpenEnded.prototype.graded_callback = function() {
      if (this.rub.check_complete()) {
        this.submit_button.attr("disabled", false);
        return this.submit_button.show();
      }
    };

    return CombinedOpenEnded;

  })();

}).call(this);
